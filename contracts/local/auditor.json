{
  "address": "0xddd863413d4FaD445ff5aC1270954b1aF2F7E612",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracleAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "GenericError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum TSUtils.State",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "enum TSUtils.State",
          "name": "requiredState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEAM_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract IExafin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "enableMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "exafins",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFuturePools",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exafinCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "liquidateAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exafinCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFuturePools",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "pauseBorrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "repayAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "enum TSUtils.State",
          "name": "requiredState",
          "type": "uint8"
        }
      ],
      "name": "requirePoolState",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exafinBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "exafins",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "supplyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "supplyAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x519ac2fb091d7c752f25cb7cca1830300297126b138278814dd78750374f2f65",
  "receipt": {
    "to": null,
    "from": "0xE23E91DDA6ba5Cf760dAF30300518E92576b5337",
    "contractAddress": "0xddd863413d4FaD445ff5aC1270954b1aF2F7E612",
    "transactionIndex": 0,
    "gasUsed": "4401726",
    "logsBloom": "0x
    "blockHash": "0xd311c79920c073933c4172ccccfaea9c937d1789c8905a5f00b38c8403bce352",
    "transactionHash": "0x519ac2fb091d7c752f25cb7cca1830300297126b138278814dd78750374f2f65",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13556611,
        "transactionHash": "0x519ac2fb091d7c752f25cb7cca1830300297126b138278814dd78750374f2f65",
        "address": "0xddd863413d4FaD445ff5aC1270954b1aF2F7E612",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e23e91dda6ba5cf760daf30300518e92576b5337",
          "0x000000000000000000000000e23e91dda6ba5cf760daf30300518e92576b5337"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd311c79920c073933c4172ccccfaea9c937d1789c8905a5f00b38c8403bce352"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13556611,
        "transactionHash": "0x519ac2fb091d7c752f25cb7cca1830300297126b138278814dd78750374f2f65",
        "address": "0xddd863413d4FaD445ff5aC1270954b1aF2F7E612",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33",
          "0x000000000000000000000000e23e91dda6ba5cf760daf30300518e92576b5337",
          "0x000000000000000000000000e23e91dda6ba5cf760daf30300518e92576b5337"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xd311c79920c073933c4172ccccfaea9c937d1789c8905a5f00b38c8403bce352"
      }
    ],
    "blockNumber": 13556611,
    "cumulativeGasUsed": "4401726",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x58d36dFc4f1f6d0B61DFef26aa401B337D855aeB"],
  "solcInputHash": "1d77e7a2908e8de0f43c265154e69270",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"GenericError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum TSUtils.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum TSUtils.State\",\"name\":\"requiredState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract IExafin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"enableMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"exafins\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFuturePools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exafinCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"liquidateAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exafinCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFuturePools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"pauseBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"repayAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"enum TSUtils.State\",\"name\":\"requiredState\",\"type\":\"uint8\"}],\"name\":\"requirePoolState\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exafinBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"seizeAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"exafins\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"supplyAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"enableMarket(address,uint256,string,string,uint8)\":{\"details\":\"Function to enable a certain Exafin market to be used as collateral\",\"params\":{\"collateralFactor\":\"exafin's collateral factor for the underlying asset\",\"exafin\":\"address to add to the protocol\"}},\"enterMarkets(address[])\":{\"details\":\"Allows wallet to enter certain markets (exafinDAI, exafinETH, etc) By performing this action, the wallet's money could be used as collateral\",\"params\":{\"exafins\":\"contracts addresses to enable for `msg.sender`\"}},\"getAccountLiquidity(address,uint256)\":{\"details\":\"Function to get account's liquidity for a certain maturity pool\",\"params\":{\"account\":\"wallet to retrieve liquidity for a certain maturity date\",\"maturityDate\":\"timestamp to calculate maturity's pool\"}},\"getFuturePools()\":{\"details\":\"Function to retrieve valid future pools\"},\"getMarketAddresses()\":{\"details\":\"Function to retrieve all markets\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidateAllowed(address,address,address,address,uint256,uint256)\":{\"details\":\"Function to allow/reject liquidation of assets. This function can be called  externally, but only will have effect when called from an exafin. \",\"params\":{\"borrower\":\"address which the assets are being liquidated\",\"exafinBorrowed\":\"market from where the debt is pending\",\"exafinCollateral\":\"market where the assets will be liquidated (should be msg.sender on Exafin.sol)\",\"liquidator\":\"address that is liquidating the assets\",\"maturityDate\":\"maturity where the position has a shortfall in liquidity\",\"repayAmount\":\"amount to be repaid from the debt (outstanding debt * close factor should be bigger than this value)\"}},\"liquidateCalculateSeizeAmount(address,address,uint256)\":{\"details\":\"Function to calculate the amount of assets to be seized - when a position is undercollaterized it should be repaid and this functions calculates the  amount of collateral to be seized\",\"params\":{\"actualRepayAmount\":\"repay amount in the borrowed asset\",\"exafinBorrowed\":\"market from where the debt is pending\",\"exafinCollateral\":\"market where the assets will be liquidated (should be msg.sender on Exafin.sol)\"}},\"pauseBorrow(address,bool)\":{\"details\":\"Function to pause/unpause borrowing on a certain market\",\"params\":{\"exafin\":\"address to pause\",\"paused\":\"true/false\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"seizeAllowed(address,address,address,address)\":{\"details\":\"Function to allow/reject seizing of assets. This function can be called  externally, but only will have effect when called from an exafin. \",\"params\":{\"borrower\":\"address to validate where the assets will be removed\",\"exafinBorrowed\":\"market from where the debt will be paid\",\"exafinCollateral\":\"market where the assets will be seized (should be msg.sender on Exafin.sol)\",\"liquidator\":\"address to validate where the seized assets will be received\"}},\"setMarketBorrowCaps(address[],uint256[])\":{\"params\":{\"exafins\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"setOracle(address)\":{\"details\":\"Function to set Oracle's to be used\",\"params\":{\"_priceOracleAddress\":\"address of the new oracle\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given exafin markets. Borrowing that brings total borrows to or above borrow cap will revert.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Auditor.sol\":\"Auditor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/Auditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./interfaces/IExafin.sol\\\";\\nimport \\\"./interfaces/IAuditor.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./utils/TSUtils.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Auditor is IAuditor, AccessControl {\\n\\n    bytes32 public constant TEAM_ROLE = keccak256(\\\"TEAM_ROLE\\\");\\n\\n    using DecimalMath for uint256;\\n\\n    event MarketListed(address exafin);\\n    event MarketEntered(address exafin, address account);\\n    event ActionPaused(address exafin, string action, bool paused);\\n    event OracleChanged(address newOracle);\\n    event NewBorrowCap(address indexed exafin, uint256 newBorrowCap);\\n\\n    mapping(address => Market) public markets;\\n    mapping(address => bool) public borrowPaused;\\n    mapping(address => uint256) public borrowCaps;\\n    mapping(address => IExafin[]) public accountAssets;\\n\\n    uint256 private marketCount = 0;\\n    address[] public marketsAddress;\\n\\n    uint256 public closeFactor = 5e17;\\n    uint8 public maxFuturePools = 12; // 6 months\\n\\n    IOracle public oracle;\\n\\n    struct Market {\\n        string symbol;\\n        string name;\\n        bool isListed;\\n        uint256 collateralFactor;\\n        uint8 decimals;\\n        mapping(address => bool) accountMembership;\\n    }\\n\\n    struct AccountLiquidity {\\n        uint256 balance;\\n        uint256 borrowBalance;\\n        uint256 collateralFactor;\\n        uint256 oraclePrice;\\n        uint256 sumCollateral;\\n        uint256 sumDebt;\\n    }\\n\\n    constructor(address _priceOracleAddress) {\\n        oracle = IOracle(_priceOracleAddress);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(TEAM_ROLE, msg.sender);\\n    }\\n\\n    /**\\n        @dev Allows wallet to enter certain markets (exafinDAI, exafinETH, etc)\\n             By performing this action, the wallet's money could be used as collateral\\n        @param exafins contracts addresses to enable for `msg.sender`\\n     */\\n    function enterMarkets(address[] calldata exafins)\\n        external\\n    {\\n        uint256 len = exafins.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            IExafin exafin = IExafin(exafins[i]);\\n            _addToMarket(exafin, msg.sender);\\n        }\\n    }\\n\\n    /**\\n        @dev\\n            Allows wallet to enter certain markets (exafinDAI, exafinETH, etc)\\n            By performing this action, the wallet's money could be used as collateral\\n        @param exafin contracts addresses to enable\\n        @param borrower wallet that wants to enter a market\\n     */\\n    function _addToMarket(IExafin exafin, address borrower)\\n        internal\\n    {\\n        Market storage marketToJoin = markets[address(exafin)];\\n\\n        if (!marketToJoin.isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            return;\\n        }\\n\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(exafin);\\n\\n        emit MarketEntered(address(exafin), borrower);\\n    }\\n\\n    /**\\n        @dev Function to get account's liquidity for a certain maturity pool\\n        @param account wallet to retrieve liquidity for a certain maturity date\\n        @param maturityDate timestamp to calculate maturity's pool\\n     */\\n    function getAccountLiquidity(address account, uint256 maturityDate)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return _accountLiquidity(account, maturityDate, address(0), 0, 0);\\n    }\\n\\n    /**\\n        @dev Function to get account's liquidity for a certain maturity pool\\n        @param account wallet to retrieve liquidity for a certain maturity date\\n        @param maturityDate timestamp to calculate maturity's pool\\n     */\\n    function _accountLiquidity(\\n        address account,\\n        uint256 maturityDate,\\n        address exafinToSimulate,\\n        uint256 redeemAmount,\\n        uint256 borrowAmount\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256\\n        )\\n    {\\n\\n        AccountLiquidity memory vars; // Holds all our calculation results\\n\\n        // For each asset the account is in\\n        IExafin[] memory assets = accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IExafin asset = assets[i];\\n            Market storage market = markets[address(asset)];\\n\\n            // Read the balances\\n            (vars.balance, vars.borrowBalance) = asset.getAccountSnapshot(\\n                account,\\n                maturityDate\\n            );\\n            vars.collateralFactor = markets[address(asset)].collateralFactor;\\n\\n            // Get the normalized price of the asset (18 decimals)\\n            vars.oraclePrice = oracle.getAssetPrice(asset.tokenName());\\n\\n            // We sum all the collateral prices\\n            vars.sumCollateral += DecimalMath.getTokenAmountInUSD(vars.balance, vars.oraclePrice, market.decimals).mul_(vars.collateralFactor);\\n\\n            // We sum all the debt\\n            vars.sumDebt += DecimalMath.getTokenAmountInUSD(vars.borrowBalance, vars.oraclePrice, market.decimals);\\n\\n            // Simulate the effects of borrowing from/lending to a pool\\n            if (asset == IExafin(exafinToSimulate)) {\\n                // Calculate the effects of borrowing exafins\\n                if (borrowAmount != 0) {\\n                    vars.sumDebt += DecimalMath.getTokenAmountInUSD(borrowAmount, vars.oraclePrice, market.decimals);\\n                }\\n\\n                // Calculate the effects of redeeming exafins\\n                // (having less collateral is the same as having more debt for this calculation)\\n                if (redeemAmount != 0) {\\n                    vars.sumDebt += DecimalMath.getTokenAmountInUSD(redeemAmount, vars.oraclePrice, market.decimals).mul_(vars.collateralFactor);\\n                }\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumDebt) {\\n            return (vars.sumCollateral - vars.sumDebt, 0);\\n        } else {\\n            return (0, vars.sumDebt - vars.sumCollateral);\\n        }\\n    }\\n\\n\\n    function supplyAllowed(\\n        address exafinAddress,\\n        address supplier,\\n        uint256 supplyAmount,\\n        uint256 maturityDate\\n    ) external view override {\\n        supplier;\\n        supplyAmount;\\n\\n        if (!markets[exafinAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        _requirePoolState(maturityDate, TSUtils.State.VALID); \\n    }\\n\\n    function requirePoolState(uint256 maturityDate, TSUtils.State requiredState) external view {\\n        return _requirePoolState(maturityDate, requiredState);\\n    }\\n\\n    function _requirePoolState(uint256 maturityDate, TSUtils.State requiredState) internal view {\\n        TSUtils.State state = TSUtils.getPoolState(block.timestamp, maturityDate, maxFuturePools);\\n        if(state != requiredState) {\\n            revert UnmatchedPoolState(state, requiredState);\\n        }\\n    }\\n\\n    function borrowAllowed(\\n        address exafinAddress,\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 maturityDate\\n    ) external override {\\n\\n        if (borrowPaused[exafinAddress]) {\\n            revert GenericError(ErrorCode.BORROW_PAUSED);\\n        }\\n\\n        _requirePoolState(maturityDate, TSUtils.State.VALID); \\n\\n        if (!markets[exafinAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[exafinAddress].accountMembership[borrower]) {\\n            // only exafins may call borrowAllowed if borrower not in market\\n            if (msg.sender != exafinAddress) {\\n                revert GenericError(ErrorCode.NOT_AN_EXAFIN_SENDER);\\n            }\\n\\n            // attempt to add borrower to the market // reverts if error\\n            _addToMarket(IExafin(msg.sender), borrower);\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[exafinAddress].accountMembership[borrower]);\\n        }\\n\\n        // We check that the asset price is valid\\n        oracle.getAssetPrice(IExafin(exafinAddress).tokenName());\\n\\n        uint256 borrowCap = borrowCaps[exafinAddress];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = IExafin(exafinAddress).getTotalBorrows(\\n                maturityDate\\n            );\\n            uint256 nextTotalBorrows = totalBorrows + borrowAmount;\\n            if (nextTotalBorrows >= borrowCap) {\\n                revert GenericError(ErrorCode.MARKET_BORROW_CAP_REACHED);\\n            }\\n        }\\n\\n        (, uint256 shortfall) = _accountLiquidity(\\n            borrower,\\n            maturityDate,\\n            exafinAddress,\\n            0,\\n            borrowAmount\\n        );\\n        if (shortfall > 0) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_LIQUIDITY);\\n        }\\n    }\\n\\n    function redeemAllowed(\\n        address exafinAddress,\\n        address redeemer,\\n        uint256 redeemTokens,\\n        uint256 maturityDate\\n    ) external view override {\\n        if (!markets[exafinAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        _requirePoolState(maturityDate, TSUtils.State.MATURED); \\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[exafinAddress].accountMembership[redeemer]) {\\n            return;\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (, uint256 shortfall) = _accountLiquidity(\\n            redeemer,\\n            maturityDate,\\n            exafinAddress,\\n            redeemTokens,\\n            0\\n        );\\n        if (shortfall > 0) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_LIQUIDITY);\\n        }\\n    }\\n\\n    function repayAllowed(\\n        address exafinAddress,\\n        address borrower,\\n        uint256 maturityDate\\n    ) override external view {\\n        borrower;\\n\\n        if (!markets[exafinAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        _requirePoolState(maturityDate, TSUtils.State.MATURED);\\n    }\\n\\n    /**\\n        @dev Function to calculate the amount of assets to be seized\\n             - when a position is undercollaterized it should be repaid and this functions calculates the \\n               amount of collateral to be seized\\n        @param exafinCollateral market where the assets will be liquidated (should be msg.sender on Exafin.sol)\\n        @param exafinBorrowed market from where the debt is pending\\n        @param actualRepayAmount repay amount in the borrowed asset\\n     */\\n    function liquidateCalculateSeizeAmount(\\n        address exafinBorrowed,\\n        address exafinCollateral,\\n        uint256 actualRepayAmount\\n    ) override external view returns (uint256) {\\n\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint256 priceBorrowed = oracle.getAssetPrice(IExafin(exafinBorrowed).tokenName());\\n        uint256 priceCollateral = oracle.getAssetPrice(IExafin(exafinCollateral).tokenName());\\n\\n        uint256 amountInUSD = DecimalMath.getTokenAmountInUSD(actualRepayAmount, priceBorrowed, markets[exafinBorrowed].decimals);\\n        // 10**18: usd amount decimals\\n        uint256 seizeTokens = DecimalMath.getTokenAmountFromUsd(amountInUSD, priceCollateral, markets[exafinCollateral].decimals);\\n\\n        return seizeTokens;\\n    }\\n\\n    /**\\n        @dev Function to allow/reject liquidation of assets. This function can be called \\n             externally, but only will have effect when called from an exafin. \\n        @param exafinCollateral market where the assets will be liquidated (should be msg.sender on Exafin.sol)\\n        @param exafinBorrowed market from where the debt is pending\\n        @param liquidator address that is liquidating the assets\\n        @param borrower address which the assets are being liquidated\\n        @param repayAmount amount to be repaid from the debt (outstanding debt * close factor should be bigger than this value)\\n        @param maturityDate maturity where the position has a shortfall in liquidity\\n     */\\n    function liquidateAllowed(\\n        address exafinBorrowed,\\n        address exafinCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 maturityDate\\n    ) override external view {\\n\\n        if (repayAmount == 0) {\\n            revert GenericError(ErrorCode.REPAY_ZERO);\\n        }\\n\\n        if (borrower == liquidator) {\\n            revert GenericError(ErrorCode.LIQUIDATOR_NOT_BORROWER);\\n        }\\n\\n        // if markets are listed, they have the same auditor\\n        if (!markets[exafinBorrowed].isListed || !markets[exafinCollateral].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidatable */\\n        (, uint256 shortfall) = _accountLiquidity(borrower, maturityDate, address(0), 0, 0);\\n        if (shortfall == 0) {\\n            revert GenericError(ErrorCode.UNSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        (,uint256 borrowBalance) = IExafin(exafinBorrowed).getAccountSnapshot(borrower, maturityDate);\\n        uint256 maxClose = closeFactor.mul_(borrowBalance);\\n        if (repayAmount > maxClose) {\\n            revert GenericError(ErrorCode.TOO_MUCH_REPAY);\\n        }\\n    }\\n\\n    /**\\n        @dev Function to allow/reject seizing of assets. This function can be called \\n             externally, but only will have effect when called from an exafin. \\n        @param exafinCollateral market where the assets will be seized (should be msg.sender on Exafin.sol)\\n        @param exafinBorrowed market from where the debt will be paid\\n        @param liquidator address to validate where the seized assets will be received\\n        @param borrower address to validate where the assets will be removed\\n     */\\n    function seizeAllowed(\\n        address exafinCollateral,\\n        address exafinBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) override external view {\\n\\n        if (borrower == liquidator) {\\n            revert GenericError(ErrorCode.LIQUIDATOR_NOT_BORROWER);\\n        }\\n\\n        // If markets are listed, they have also the same Auditor\\n        if (!markets[exafinCollateral].isListed || !markets[exafinBorrowed].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n    }\\n\\n    /**\\n        @dev Function to enable a certain Exafin market to be used as collateral\\n        @param exafin address to add to the protocol\\n        @param collateralFactor exafin's collateral factor for the underlying asset\\n     */\\n    function enableMarket(\\n        address exafin,\\n        uint256 collateralFactor,\\n        string memory symbol,\\n        string memory name,\\n        uint8 decimals\\n    ) public onlyRole(TEAM_ROLE) {\\n        Market storage market = markets[exafin];\\n\\n        if (market.isListed) {\\n            revert GenericError(ErrorCode.MARKET_ALREADY_LISTED);\\n        }\\n\\n        if (IExafin(exafin).getAuditor() != this) {\\n            revert GenericError(ErrorCode.AUDITOR_MISMATCH);\\n        }\\n\\n        market.isListed = true;\\n        market.collateralFactor = collateralFactor;\\n        market.symbol = symbol;\\n        market.name = name;\\n        market.decimals = decimals;\\n\\n        marketCount += 1;\\n        marketsAddress.push(exafin);\\n\\n        emit MarketListed(exafin);\\n    }\\n\\n    /**\\n        @notice Set the given borrow caps for the given exafin markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n        @param exafins The addresses of the markets (tokens) to change the borrow caps for\\n        @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function setMarketBorrowCaps(\\n        address[] calldata exafins,\\n        uint256[] calldata newBorrowCaps\\n    ) external onlyRole(TEAM_ROLE) {\\n        uint256 numMarkets = exafins.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        if (numMarkets == 0 || numMarkets != numBorrowCaps) {\\n            revert GenericError(ErrorCode.INVALID_SET_BORROW_CAP);\\n        }\\n\\n        for(uint256 i = 0; i < numMarkets; i++) {\\n            if (!markets[exafins[i]].isListed) {\\n                revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n            }\\n\\n            borrowCaps[exafins[i]] = newBorrowCaps[i];\\n            emit NewBorrowCap(exafins[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n        @dev Function to pause/unpause borrowing on a certain market\\n        @param exafin address to pause\\n        @param paused true/false\\n     */\\n    function pauseBorrow(address exafin, bool paused)\\n        public\\n        onlyRole(TEAM_ROLE)\\n        returns (bool)\\n    {\\n        if (!markets[exafin].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        borrowPaused[address(exafin)] = paused;\\n        emit ActionPaused(exafin, \\\"Borrow\\\", paused);\\n        return paused;\\n    }\\n\\n    /**\\n        @dev Function to set Oracle's to be used\\n        @param _priceOracleAddress address of the new oracle\\n     */\\n    function setOracle(address _priceOracleAddress) public onlyRole(TEAM_ROLE) {\\n        oracle = IOracle(_priceOracleAddress);\\n        emit OracleChanged(_priceOracleAddress);\\n    }\\n\\n    /**\\n        @dev Function to retrieve valid future pools\\n     */\\n    function getFuturePools() override external view returns (uint256[] memory) {\\n        return TSUtils.futurePools(block.timestamp, maxFuturePools);\\n    }\\n\\n    /**\\n        @dev Function to retrieve all markets\\n     */\\n    function getMarketAddresses() override external view returns (address[] memory) {\\n        return marketsAddress;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd7a60cecb062498d0eb92825c6412b6d1d40ffa80f5b3c3e4cfb5147fd4c02e1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAuditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IAuditor {\\n\\n    function getAccountLiquidity(\\n        address account,\\n        uint256 maturityDate\\n    ) external view returns (uint256, uint256);\\n\\n    function supplyAllowed(\\n        address exafinAddress,\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function borrowAllowed(\\n        address exafinAddress,\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function redeemAllowed(\\n        address exafinAddress,\\n        address redeemer,\\n        uint256 redeemTokens,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function repayAllowed(\\n        address exafinAddress,\\n        address borrower,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function liquidateAllowed(\\n        address exafinBorrowed,\\n        address exafinCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount, \\n        uint256 maturityDate\\n    ) external view;\\n\\n    function seizeAllowed(\\n        address exafinCollateral,\\n        address exafinBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) external view;\\n\\n    function liquidateCalculateSeizeAmount(\\n        address exafinBorrowed,\\n        address exafinCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256);\\n\\n    function getFuturePools() external view returns (uint256[] memory);\\n    function getMarketAddresses() external view returns (address[] memory);\\n\\n}\\n\",\"keccak256\":\"0x387a5236087a19039aa50125ce95e85d62689257705bd234ddbd34292c063c17\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IExafin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IAuditor.sol\\\";\\n\\ninterface IExafin {\\n\\n    function getRateToSupply(\\n        uint256 amount,\\n        uint256 maturityDate\\n    ) external view returns (uint256);\\n\\n    function getRateToBorrow(\\n        uint256 amount,\\n        uint256 maturityDate\\n    ) external view returns (uint256);\\n\\n    function borrow(\\n        uint256 amount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function supply(\\n        address from,\\n        uint256 amount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function redeem(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function repay(\\n        address borrower,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IExafin exafinCollateral,\\n        uint256 maturityDate\\n    ) external returns (uint256);\\n    \\n    function tokenName() external view returns (string calldata);\\n\\n    function getAccountSnapshot(address who, uint256 timestamp)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTotalBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAuditor() external view returns (IAuditor);\\n}\\n\",\"keccak256\":\"0xe81eb6598e3587eb995ed12b2bff9f1333fe3350a7d2342b15062a27a2330dc8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IOracle interface\\n * @notice Interface for the Exactly oracle.\\n **/\\n\\ninterface IOracle {\\n  /**\\n   * @dev Returns the asset price\\n   * @param symbol The symbol of the asset\\n   * @return The price of the asset\\n   **/\\n  function getAssetPrice(string memory symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8b16399c6c3108ab2926e1034bcb0bf14dc8175c31c9a079e2da60428739892c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary DecimalMath {\\n\\n    uint256 private constant NUMBER_SCALE = 1e18;\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b / NUMBER_SCALE;\\n    }\\n\\n    function mul_(uint256 a, uint256 b, uint256 scale) internal pure returns (uint256) {\\n        return a * b / scale;\\n    }\\n\\n    function div_(uint256 a, uint256 b, uint256 scale) internal pure returns (uint256) {\\n        return a * scale / b;\\n    }\\n\\n    // @notice Converts an amount of a particular token into a normalized USD value\\n    // @dev it abstracts the decimals of the token, it's used to compute liquidity\\n    // @param tokenAmount the amount of the token to convert to USD\\n    // @param oraclePrice the price of the token, as returned from the oracle\\n    // @param underlyingDecimals the decimals of the token (eg: 18 instead of 10**18)\\n    // @return the amount of USD the asset represents, normalized to 18 decimals precision\\n    function getTokenAmountInUSD(uint256 tokenAmount, uint256 oraclePrice, uint8 underlyingDecimals) internal pure returns (uint256){\\n      uint256 tokenScale = 10**underlyingDecimals;\\n      uint256 normalizedTokenAmount = tokenAmount* NUMBER_SCALE / tokenScale;\\n      return normalizedTokenAmount*oraclePrice/NUMBER_SCALE;\\n    }\\n\\n    // @notice Converts normalized USD value into an  amount of a particular token\\n    // @dev it abstracts the decimals of the token, it's used to get the seizable amount in a liquidation\\n    // @param usdAmount the amount of usd to convert to the token\\n    // @param oraclePrice the price of the token, as returned from the oracle\\n    // @param tokenDecimals the decimals of the token (eg: 18 instead of 10**18)\\n    // @return the raw amount of the token equivalent to the provided usd amount\\n    function getTokenAmountFromUsd(uint256 usdAmount, uint256 oraclePrice, uint8 tokenDecimals) internal pure returns(uint256) {\\n        return ((usdAmount * NUMBER_SCALE/oraclePrice)*10**tokenDecimals)/ NUMBER_SCALE;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ab67bfabe56ce109e94075076938b3a5cb4e70bb4e1dd9a69be67471f9a6088\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TSUtils.sol\\\";\\n\\nerror GenericError(ErrorCode error);\\nerror UnmatchedPoolState(TSUtils.State state, TSUtils.State requiredState);\\n\\nenum ErrorCode {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY,\\n    UNSUFFICIENT_SHORTFALL,\\n    AUDITOR_MISMATCH,\\n    TOO_MUCH_REPAY,\\n    REPAY_ZERO,\\n    TOKENS_MORE_THAN_BALANCE,\\n    INVALID_POOL_STATE,\\n    INVALID_POOL_ID,\\n    LIQUIDATOR_NOT_BORROWER,\\n    BORROW_PAUSED,\\n    NOT_AN_EXAFIN_SENDER,\\n    INVALID_SET_BORROW_CAP,\\n    MARKET_BORROW_CAP_REACHED,\\n    INCONSISTENT_PARAMS_LENGTH\\n}\\n\",\"keccak256\":\"0xcd43f9dd1e3249df161ae7a2f31bc922e78b9597ed4028b74ca43c8bfdc8bcaf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary TSUtils {\\n\\n    uint32 public constant INTERVAL = 7 days;\\n\\n    enum State {\\n        INVALID,\\n        MATURED,\\n        VALID,\\n        NOT_READY\\n    }\\n\\n    function trimmedDay(uint256 timestamp) public pure returns (uint256) {\\n        return timestamp - (timestamp % 1 days);\\n    }\\n\\n    function getPoolState(uint256 currentTimestamp, uint256 timestamp, uint8 maxPools) public pure returns (State) {\\n        if (timestamp % INTERVAL != 0) {\\n            return State.INVALID;\\n        }\\n\\n        if (timestamp < currentTimestamp) {\\n            return State.MATURED;\\n        }\\n\\n        uint256 totalSecondsForEnabledPools = INTERVAL * maxPools;\\n        if (timestamp > currentTimestamp - (currentTimestamp % INTERVAL) + totalSecondsForEnabledPools) {\\n            return State.NOT_READY;\\n        }\\n\\n        return State.VALID;\\n    }\\n\\n    function isPoolID(uint256 timestamp) public pure returns (bool) {\\n        return (timestamp % INTERVAL) == 0;\\n    }\\n\\n    function futurePools(uint256 startingTimestamp, uint8 maxPools) public pure returns (uint256[] memory) {\\n        uint256[] memory poolIDs = new uint256[](maxPools);\\n        uint256 timestamp = startingTimestamp - (startingTimestamp % INTERVAL);\\n        for (uint256 i=0; i < maxPools; i++) {\\n            timestamp += INTERVAL;\\n            poolIDs[i] = timestamp;\\n        }\\n        return poolIDs;\\n    }\\n}\\n\\n\",\"keccak256\":\"0xade8142fd948ff87a77cc3a999bb473930e9f076198c411102a2ea8858345da9\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006005556706f05b59d3b20000600755600c600860006101000a81548160ff021916908360ff1602179055503480156200003e57600080fd5b506040516200501d3803806200501d833981810160405281019062000064919062000283565b80600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000ba6000801b33620000f360201b60201c565b620000ec7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3333620000f360201b60201c565b50620002fd565b6200010582826200010960201b60201c565b5050565b6200011b8282620001fa60201b60201c565b620001f657600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200019b6200026460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000815190506200027d81620002e3565b92915050565b6000602082840312156200029657600080fd5b6000620002a6848285016200026c565b91505092915050565b6000620002bc82620002c3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002ee81620002af565b8114620002fa57600080fd5b50565b614d10806200030d6000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80637adbf9731161010f578063b962aaeb116100a2578063dce1544911610071578063dce15449146105b8578063dec481b8146105e8578063eafe967b14610618578063f4ae956014610634576101f0565b8063b962aaeb14610534578063c299823814610550578063d547741f1461056c578063d76a677914610588576101f0565b806391d14854116100de57806391d148541461049757806397ce0d31146104c75780639e35e142146104e5578063a217fddf14610516576101f0565b80637adbf9731461040d5780637dc0d1d014610429578063806a9f80146104475780638e8f294b14610463576101f0565b80632f2ff15d116101875780634a584432116101565780634a5844321461037557806353c4fc98146103a55780635cf232e6146103c15780635efadbd1146103dd576101f0565b80632f2ff15d146103035780632f8832d61461031f57806336568abe1461033b57806349d5e60414610357576101f0565b80630e52dbec116101c35780630e52dbec1461027d578063186db48f1461029b578063248a9ca3146102b75780632c7c0ae8146102e7576101f0565b806301ffc9a7146101f557806305308b9f14610225578063059a80081461024357806307219b091461025f575b600080fd5b61020f600480360381019061020a9190613c76565b610664565b60405161021c91906141eb565b60405180910390f35b61022d6106de565b60405161023a919061435e565b60405180910390f35b61025d60048036038101906102589190613994565b6106e4565b005b610267610c9f565b60405161027491906141c9565b60405180910390f35b610285610d43565b6040516102929190614402565b60405180910390f35b6102b560048036038101906102b09190613b5b565b610d56565b005b6102d160048036038101906102cc9190613c11565b61109b565b6040516102de9190614206565b60405180910390f35b61030160048036038101906102fc91906138bc565b6110ba565b005b61031d60048036038101906103189190613c3a565b6113b3565b005b61033960048036038101906103349190613994565b6113dc565b005b61035560048036038101906103509190613c3a565b611571565b005b61035f6115f4565b60405161036c9190614206565b60405180910390f35b61038f600480360381019061038a9190613830565b611618565b60405161039c919061435e565b60405180910390f35b6103bf60048036038101906103ba9190613994565b611630565b005b6103db60048036038101906103d69190613a6f565b6116d3565b005b6103f760048036038101906103f29190613945565b6119bd565b604051610404919061435e565b60405180910390f35b61042760048036038101906104229190613830565b611cea565b005b610431611d98565b60405161043e919061423c565b60405180910390f35b610461600480360381019061045c9190613d84565b611dbe565b005b61047d60048036038101906104789190613830565b611dcc565b60405161048e9594939291906142bd565b60405180910390f35b6104b160048036038101906104ac9190613c3a565b611f2c565b6040516104be91906141eb565b60405180910390f35b6104cf611f96565b6040516104dc91906141a7565b60405180910390f35b6104ff60048036038101906104fa9190613a33565b612024565b60405161050d929190614379565b60405180910390f35b61051e612041565b60405161052b9190614206565b60405180910390f35b61054e60048036038101906105499190613945565b612048565b005b61056a60048036038101906105659190613b16565b6120ea565b005b61058660048036038101906105819190613c3a565b612173565b005b6105a2600480360381019061059d9190613830565b61219c565b6040516105af91906141eb565b60405180910390f35b6105d260048036038101906105cd9190613a33565b6121bc565b6040516105df9190614221565b60405180910390f35b61060260048036038101906105fd91906139f7565b61220a565b60405161060f91906141eb565b60405180910390f35b610632600480360381019061062d9190613859565b61236a565b005b61064e60048036038101906106499190613d32565b6124ce565b60405161065b91906140fe565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106d757506106d68261250d565b5b9050919050565b60075481565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561077457600e6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161076b9190614257565b60405180910390fd5b61077f816002612577565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166108115760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016108089190614257565b60405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109de578373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091357600f6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161090a9190614257565b60405180910390fd5b61091d33846126d0565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8573ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015610a6257600080fd5b505afa158015610a76573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a9f9190613cf1565b6040518263ffffffff1660e01b8152600401610abb919061429b565b60206040518083038186803b158015610ad357600080fd5b505afa158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b9190613d5b565b506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114610c3d5760008573ffffffffffffffffffffffffffffffffffffffff1663ea1cd41f846040518263ffffffff1660e01b8152600401610b93919061435e565b60206040518083038186803b158015610bab57600080fd5b505afa158015610bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be39190613d5b565b905060008482610bf39190614538565b9050828110610c3a5760116040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610c319190614257565b60405180910390fd5b50505b6000610c4d858488600088612901565b9150506000811115610c975760056040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610c8e9190614257565b60405180910390fd5b505050505050565b60607376b39236427532F4BF047Ad28dEbCC1EAb47c9E163ee5c40d442600860009054906101000a900460ff166040518363ffffffff1660e01b8152600401610ce99291906143d9565b60006040518083038186803b158015610d0157600080fd5b505af4158015610d15573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d3e9190613bd0565b905090565b600860009054906101000a900460ff1681565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33610d8881610d83612e4f565b612e57565b600085859050905060008484905090506000821480610da75750808214155b15610dea5760106040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610de19190614257565b60405180910390fd5b60005b828110156110915760016000898984818110610e32577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e479190613830565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610ed45760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610ecb9190614257565b60405180910390fd5b858582818110610f0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135600360008a8a85818110610f51577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610f669190613830565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550878782818110610fdd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ff29190613830565b73ffffffffffffffffffffffffffffffffffffffff167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6878784818110611062577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051611076919061435e565b60405180910390a28080611089906149bc565b915050610ded565b5050505050505050565b6000806000838152602001908152602001600020600101549050919050565b60008214156111015760096040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016110f89190614257565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561117357600d6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161116a9190614257565b60405180910390fd5b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16158061121c5750600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b1561125f5760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016112569190614257565b60405180910390fd5b600061127084836000806000612901565b91505060008114156112ba5760066040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016112b19190614257565b60405180910390fd5b60008773ffffffffffffffffffffffffffffffffffffffff166355a1ac2e86856040518363ffffffff1660e01b81526004016112f792919061417e565b604080518083038186803b15801561130e57600080fd5b505afa158015611322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113469190613dc0565b915050600061136082600754612ef490919063ffffffff16565b9050808511156113a85760086040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161139f9190614257565b60405180910390fd5b505050505050505050565b6113bc8261109b565b6113cd816113c8612e4f565b612e57565b6113d78383612f1d565b505050565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1661146e5760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016114659190614257565b60405180910390fd5b611479816001612577565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661150f5761156b565b600061151f848387866000612901565b91505060008111156115695760056040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016115609190614257565b60405180910390fd5b505b50505050565b611579612e4f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd9061433e565b60405180910390fd5b6115f08282612ffd565b5050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3381565b60036020528060005260406000206000915090505481565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166116c25760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016116b99190614257565b60405180910390fd5b6116cd816002612577565b50505050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3361170581611700612e4f565b612e57565b6000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff161561179d5760026040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016117949190614257565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1663b72ddee96040518163ffffffff1660e01b815260040160206040518083038186803b1580156117fa57600080fd5b505afa15801561180e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118329190613c9f565b73ffffffffffffffffffffffffffffffffffffffff161461188b5760076040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016118829190614257565b60405180910390fd5b60018160020160006101000a81548160ff021916908315150217905550858160030181905550848160000190805190602001906118c992919061348b565b50838160010190805190602001906118e292919061348b565b50828160040160006101000a81548160ff021916908360ff1602179055506001600560008282546119139190614538565b925050819055506006879080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f876040516119ac91906140fe565b60405180910390a150505050505050565b600080600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015611a4457600080fd5b505afa158015611a58573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a819190613cf1565b6040518263ffffffff1660e01b8152600401611a9d919061429b565b60206040518083038186803b158015611ab557600080fd5b505afa158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aed9190613d5b565b90506000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015611b7557600080fd5b505afa158015611b89573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611bb29190613cf1565b6040518263ffffffff1660e01b8152600401611bce919061429b565b60206040518083038186803b158015611be657600080fd5b505afa158015611bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1e9190613d5b565b90506000611c7c8584600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff166130de565b90506000611cda8284600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1661313d565b9050809450505050509392505050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33611d1c81611d17612e4f565b612e57565b81600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe41882604051611d8c91906140fe565b60405180910390a15050565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611dc88282612577565b5050565b6001602052806000526040600020600091509050806000018054611def90614959565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1b90614959565b8015611e685780601f10611e3d57610100808354040283529160200191611e68565b820191906000526020600020905b815481529060010190602001808311611e4b57829003601f168201915b505050505090806001018054611e7d90614959565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea990614959565b8015611ef65780601f10611ecb57610100808354040283529160200191611ef6565b820191906000526020600020905b815481529060010190602001808311611ed957829003601f168201915b5050505050908060020160009054906101000a900460ff16908060030154908060040160009054906101000a900460ff16905085565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600680548060200260200160405190810160405280929190818152602001828054801561201a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611fd0575b5050505050905090565b60008061203684846000806000612901565b915091509250929050565b6000801b81565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166120da5760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016120d19190614257565b60405180910390fd5b6120e5816001612577565b505050565b600082829050905060005b8181101561216d576000848483818110612138577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061214d9190613830565b905061215981336126d0565b508080612165906149bc565b9150506120f5565b50505050565b61217c8261109b565b61218d81612188612e4f565b612e57565b6121978383612ffd565b505050565b60026020528060005260406000206000915054906101000a900460ff1681565b600460205281600052604060002081815481106121d857600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3361223e81612239612e4f565b612e57565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166122d05760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016122c79190614257565b60405180910390fd5b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b08484604051612358929190614142565b60405180910390a18291505092915050565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156123dc57600d6040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016123d39190614257565b60405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615806124855750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b156124c85760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016124bf9190614257565b60405180910390fd5b50505050565b600681815481106124de57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007376b39236427532F4BF047Ad28dEbCC1EAb47c9E163da4b8a4c4285600860009054906101000a900460ff166040518463ffffffff1660e01b81526004016125c3939291906143a2565b60206040518083038186803b1580156125db57600080fd5b505af41580156125ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126139190613cc8565b905081600381111561264e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115612687577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146126cb5780826040517f34e2603a0000000000000000000000000000000000000000000000000000000081526004016126c2929190614272565b60405180910390fd5b505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff166127675760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161275e9190614257565b60405180910390fd5b600115158160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156127c857506128fd565b60018160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a583836040516128f3929190614119565b60405180910390a1505b5050565b60008061290c613511565b6000600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156129cd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612983575b5050505050905060005b8151811015612df6576000828281518110612a1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508173ffffffffffffffffffffffffffffffffffffffff166355a1ac2e8d8d6040518363ffffffff1660e01b8152600401612aa392919061417e565b604080518083038186803b158015612aba57600080fd5b505afa158015612ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af29190613dc0565b866000018760200182815250828152505050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154856040018181525050600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8373ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015612bd457600080fd5b505afa158015612be8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612c119190613cf1565b6040518263ffffffff1660e01b8152600401612c2d919061429b565b60206040518083038186803b158015612c4557600080fd5b505afa158015612c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7d9190613d5b565b856060018181525050612cc08560400151612cb2876000015188606001518560040160009054906101000a900460ff166130de565b612ef490919063ffffffff16565b85608001818151612cd19190614538565b91508181525050612cfc856020015186606001518360040160009054906101000a900460ff166130de565b8560a001818151612d0d9190614538565b915081815250508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612de15760008814612d8957612d708886606001518360040160009054906101000a900460ff166130de565b8560a001818151612d819190614538565b915081815250505b60008914612de057612dc78560400151612db98b88606001518560040160009054906101000a900460ff166130de565b612ef490919063ffffffff16565b8560a001818151612dd89190614538565b915081815250505b5b50508080612dee906149bc565b9150506129d7565b508160a0015182608001511115612e28578160a001518260800151612e1b919061478a565b6000935093505050612e45565b600082608001518360a00151612e3e919061478a565b9350935050505b9550959350505050565b600033905090565b612e618282611f2c565b612ef057612e868173ffffffffffffffffffffffffffffffffffffffff166014613191565b612e948360001c6020613191565b604051602001612ea59291906140c4565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee7919061429b565b60405180910390fd5b5050565b6000670de0b6b3a76400008284612f0b9190614730565b612f15919061458e565b905092915050565b612f278282611f2c565b612ff957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612f9e612e4f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6130078282611f2c565b156130da57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061307f612e4f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008082600a6130ee9190614612565b9050600081670de0b6b3a7640000876131079190614730565b613111919061458e565b9050670de0b6b3a764000085826131289190614730565b613132919061458e565b925050509392505050565b6000670de0b6b3a764000082600a6131559190614612565b84670de0b6b3a76400008761316a9190614730565b613174919061458e565b61317e9190614730565b613188919061458e565b90509392505050565b6060600060028360026131a49190614730565b6131ae9190614538565b67ffffffffffffffff8111156131ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561321f5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061327d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613307577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026133479190614730565b6133519190614538565b90505b600181111561343d577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106133b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106133f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806134369061492f565b9050613354565b5060008414613481576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134789061431e565b60405180910390fd5b8091505092915050565b82805461349790614959565b90600052602060002090601f0160209004810192826134b95760008555613500565b82601f106134d257805160ff1916838001178555613500565b82800160010185558215613500579182015b828111156134ff5782518255916020019190600101906134e4565b5b50905061350d9190613547565b5090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115613560576000816000905550600101613548565b5090565b600061357761357284614442565b61441d565b9050808382526020820190508285602086028201111561359657600080fd5b60005b858110156135c657816135ac8882613806565b845260208401935060208301925050600181019050613599565b5050509392505050565b60006135e36135de8461446e565b61441d565b9050828152602081018484840111156135fb57600080fd5b6136068482856148ed565b509392505050565b600061362161361c8461446e565b61441d565b90508281526020810184848401111561363957600080fd5b6136448482856148fc565b509392505050565b60008135905061365b81614c29565b92915050565b60008083601f84011261367357600080fd5b8235905067ffffffffffffffff81111561368c57600080fd5b6020830191508360208202830111156136a457600080fd5b9250929050565b60008083601f8401126136bd57600080fd5b8235905067ffffffffffffffff8111156136d657600080fd5b6020830191508360208202830111156136ee57600080fd5b9250929050565b600082601f83011261370657600080fd5b8151613716848260208601613564565b91505092915050565b60008135905061372e81614c40565b92915050565b60008135905061374381614c57565b92915050565b60008135905061375881614c6e565b92915050565b60008151905061376d81614c85565b92915050565b60008135905061378281614c9c565b92915050565b60008151905061379781614c9c565b92915050565b600082601f8301126137ae57600080fd5b81356137be8482602086016135d0565b91505092915050565b600082601f8301126137d857600080fd5b81516137e884826020860161360e565b91505092915050565b60008135905061380081614cac565b92915050565b60008151905061381581614cac565b92915050565b60008135905061382a81614cc3565b92915050565b60006020828403121561384257600080fd5b60006138508482850161364c565b91505092915050565b6000806000806080858703121561386f57600080fd5b600061387d8782880161364c565b945050602061388e8782880161364c565b935050604061389f8782880161364c565b92505060606138b08782880161364c565b91505092959194509250565b60008060008060008060c087890312156138d557600080fd5b60006138e389828a0161364c565b96505060206138f489828a0161364c565b955050604061390589828a0161364c565b945050606061391689828a0161364c565b935050608061392789828a016137f1565b92505060a061393889828a016137f1565b9150509295509295509295565b60008060006060848603121561395a57600080fd5b60006139688682870161364c565b93505060206139798682870161364c565b925050604061398a868287016137f1565b9150509250925092565b600080600080608085870312156139aa57600080fd5b60006139b88782880161364c565b94505060206139c98782880161364c565b93505060406139da878288016137f1565b92505060606139eb878288016137f1565b91505092959194509250565b60008060408385031215613a0a57600080fd5b6000613a188582860161364c565b9250506020613a298582860161371f565b9150509250929050565b60008060408385031215613a4657600080fd5b6000613a548582860161364c565b9250506020613a65858286016137f1565b9150509250929050565b600080600080600060a08688031215613a8757600080fd5b6000613a958882890161364c565b9550506020613aa6888289016137f1565b945050604086013567ffffffffffffffff811115613ac357600080fd5b613acf8882890161379d565b935050606086013567ffffffffffffffff811115613aec57600080fd5b613af88882890161379d565b9250506080613b098882890161381b565b9150509295509295909350565b60008060208385031215613b2957600080fd5b600083013567ffffffffffffffff811115613b4357600080fd5b613b4f85828601613661565b92509250509250929050565b60008060008060408587031215613b7157600080fd5b600085013567ffffffffffffffff811115613b8b57600080fd5b613b9787828801613661565b9450945050602085013567ffffffffffffffff811115613bb657600080fd5b613bc2878288016136ab565b925092505092959194509250565b600060208284031215613be257600080fd5b600082015167ffffffffffffffff811115613bfc57600080fd5b613c08848285016136f5565b91505092915050565b600060208284031215613c2357600080fd5b6000613c3184828501613734565b91505092915050565b60008060408385031215613c4d57600080fd5b6000613c5b85828601613734565b9250506020613c6c8582860161364c565b9150509250929050565b600060208284031215613c8857600080fd5b6000613c9684828501613749565b91505092915050565b600060208284031215613cb157600080fd5b6000613cbf8482850161375e565b91505092915050565b600060208284031215613cda57600080fd5b6000613ce884828501613788565b91505092915050565b600060208284031215613d0357600080fd5b600082015167ffffffffffffffff811115613d1d57600080fd5b613d29848285016137c7565b91505092915050565b600060208284031215613d4457600080fd5b6000613d52848285016137f1565b91505092915050565b600060208284031215613d6d57600080fd5b6000613d7b84828501613806565b91505092915050565b60008060408385031215613d9757600080fd5b6000613da5858286016137f1565b9250506020613db685828601613773565b9150509250929050565b60008060408385031215613dd357600080fd5b6000613de185828601613806565b9250506020613df285828601613806565b9150509250929050565b6000613e088383613e2c565b60208301905092915050565b6000613e208383614079565b60208301905092915050565b613e35816147be565b82525050565b613e44816147be565b82525050565b6000613e55826144bf565b613e5f81856144fa565b9350613e6a8361449f565b8060005b83811015613e9b578151613e828882613dfc565b9750613e8d836144e0565b925050600181019050613e6e565b5085935050505092915050565b6000613eb3826144ca565b613ebd818561450b565b9350613ec8836144af565b8060005b83811015613ef9578151613ee08882613e14565b9750613eeb836144ed565b925050600181019050613ecc565b5085935050505092915050565b613f0f816147d0565b82525050565b613f1e816147dc565b82525050565b613f2d81614881565b82525050565b613f3c816148a5565b82525050565b613f4b816148c9565b82525050565b613f5a816148db565b82525050565b6000613f6b826144d5565b613f75818561451c565b9350613f858185602086016148fc565b613f8e81614af0565b840191505092915050565b6000613fa4826144d5565b613fae818561452d565b9350613fbe8185602086016148fc565b80840191505092915050565b6000613fd760208361451c565b9150613fe282614b0e565b602082019050919050565b6000613ffa60068361451c565b915061400582614b37565b602082019050919050565b600061401d60178361452d565b915061402882614b60565b601782019050919050565b600061404060118361452d565b915061404b82614b89565b601182019050919050565b6000614063602f8361451c565b915061406e82614bb2565b604082019050919050565b6140828161486a565b82525050565b6140918161486a565b82525050565b6140a08161486a565b82525050565b6140af81614874565b82525050565b6140be81614874565b82525050565b60006140cf82614010565b91506140db8285613f99565b91506140e682614033565b91506140f28284613f99565b91508190509392505050565b60006020820190506141136000830184613e3b565b92915050565b600060408201905061412e6000830185613e3b565b61413b6020830184613e3b565b9392505050565b60006060820190506141576000830185613e3b565b818103602083015261416881613fed565b90506141776040830184613f06565b9392505050565b60006040820190506141936000830185613e3b565b6141a06020830184614088565b9392505050565b600060208201905081810360008301526141c18184613e4a565b905092915050565b600060208201905081810360008301526141e38184613ea8565b905092915050565b60006020820190506142006000830184613f06565b92915050565b600060208201905061421b6000830184613f15565b92915050565b60006020820190506142366000830184613f24565b92915050565b60006020820190506142516000830184613f33565b92915050565b600060208201905061426c6000830184613f42565b92915050565b60006040820190506142876000830185613f51565b6142946020830184613f51565b9392505050565b600060208201905081810360008301526142b58184613f60565b905092915050565b600060a08201905081810360008301526142d78188613f60565b905081810360208301526142eb8187613f60565b90506142fa6040830186613f06565b6143076060830185614088565b61431460808301846140a6565b9695505050505050565b6000602082019050818103600083015261433781613fca565b9050919050565b6000602082019050818103600083015261435781614056565b9050919050565b60006020820190506143736000830184614088565b92915050565b600060408201905061438e6000830185614088565b61439b6020830184614088565b9392505050565b60006060820190506143b76000830186614097565b6143c46020830185614097565b6143d160408301846140b5565b949350505050565b60006040820190506143ee6000830185614097565b6143fb60208301846140b5565b9392505050565b600060208201905061441760008301846140a6565b92915050565b6000614427614438565b9050614433828261498b565b919050565b6000604051905090565b600067ffffffffffffffff82111561445d5761445c614ac1565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561448957614488614ac1565b5b61449282614af0565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006145438261486a565b915061454e8361486a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561458357614582614a05565b5b828201905092915050565b60006145998261486a565b91506145a48361486a565b9250826145b4576145b3614a34565b5b828204905092915050565b6000808291508390505b6001851115614609578086048111156145e5576145e4614a05565b5b60018516156145f45780820291505b808102905061460285614b01565b94506145c9565b94509492505050565b600061461d8261486a565b915061462883614874565b92506146557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461465d565b905092915050565b60008261466d5760019050614729565b8161467b5760009050614729565b8160018114614691576002811461469b576146ca565b6001915050614729565b60ff8411156146ad576146ac614a05565b5b8360020a9150848211156146c4576146c3614a05565b5b50614729565b5060208310610133831016604e8410600b84101617156146ff5782820a9050838111156146fa576146f9614a05565b5b614729565b61470c84848460016145bf565b9250905081840481111561472357614722614a05565b5b81810290505b9392505050565b600061473b8261486a565b91506147468361486a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561477f5761477e614a05565b5b828202905092915050565b60006147958261486a565b91506147a08361486a565b9250828210156147b3576147b2614a05565b5b828203905092915050565b60006147c98261484a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061481d826147be565b9050919050565b600081905061483282614c01565b919050565b600081905061484582614c15565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061488c82614893565b9050919050565b600061489e8261484a565b9050919050565b60006148b0826148b7565b9050919050565b60006148c28261484a565b9050919050565b60006148d482614824565b9050919050565b60006148e682614837565b9050919050565b82818337600083830152505050565b60005b8381101561491a5780820151818401526020810190506148ff565b83811115614929576000848401525b50505050565b600061493a8261486a565b9150600082141561494e5761494d614a05565b5b600182039050919050565b6000600282049050600182168061497157607f821691505b6020821081141561498557614984614a92565b5b50919050565b61499482614af0565b810181811067ffffffffffffffff821117156149b3576149b2614ac1565b5b80604052505050565b60006149c78261486a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149fa576149f9614a05565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f426f72726f770000000000000000000000000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60138110614c1257614c11614a63565b5b50565b60048110614c2657614c25614a63565b5b50565b614c32816147be565b8114614c3d57600080fd5b50565b614c49816147d0565b8114614c5457600080fd5b50565b614c60816147dc565b8114614c6b57600080fd5b50565b614c77816147e6565b8114614c8257600080fd5b50565b614c8e81614812565b8114614c9957600080fd5b50565b60048110614ca957600080fd5b50565b614cb58161486a565b8114614cc057600080fd5b50565b614ccc81614874565b8114614cd757600080fd5b5056fea2646970667358221220bce0702a268fb5bd1df630d265d77d02d451f65c02f2960cd5a625f7a3dd29b664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80637adbf9731161010f578063b962aaeb116100a2578063dce1544911610071578063dce15449146105b8578063dec481b8146105e8578063eafe967b14610618578063f4ae956014610634576101f0565b8063b962aaeb14610534578063c299823814610550578063d547741f1461056c578063d76a677914610588576101f0565b806391d14854116100de57806391d148541461049757806397ce0d31146104c75780639e35e142146104e5578063a217fddf14610516576101f0565b80637adbf9731461040d5780637dc0d1d014610429578063806a9f80146104475780638e8f294b14610463576101f0565b80632f2ff15d116101875780634a584432116101565780634a5844321461037557806353c4fc98146103a55780635cf232e6146103c15780635efadbd1146103dd576101f0565b80632f2ff15d146103035780632f8832d61461031f57806336568abe1461033b57806349d5e60414610357576101f0565b80630e52dbec116101c35780630e52dbec1461027d578063186db48f1461029b578063248a9ca3146102b75780632c7c0ae8146102e7576101f0565b806301ffc9a7146101f557806305308b9f14610225578063059a80081461024357806307219b091461025f575b600080fd5b61020f600480360381019061020a9190613c76565b610664565b60405161021c91906141eb565b60405180910390f35b61022d6106de565b60405161023a919061435e565b60405180910390f35b61025d60048036038101906102589190613994565b6106e4565b005b610267610c9f565b60405161027491906141c9565b60405180910390f35b610285610d43565b6040516102929190614402565b60405180910390f35b6102b560048036038101906102b09190613b5b565b610d56565b005b6102d160048036038101906102cc9190613c11565b61109b565b6040516102de9190614206565b60405180910390f35b61030160048036038101906102fc91906138bc565b6110ba565b005b61031d60048036038101906103189190613c3a565b6113b3565b005b61033960048036038101906103349190613994565b6113dc565b005b61035560048036038101906103509190613c3a565b611571565b005b61035f6115f4565b60405161036c9190614206565b60405180910390f35b61038f600480360381019061038a9190613830565b611618565b60405161039c919061435e565b60405180910390f35b6103bf60048036038101906103ba9190613994565b611630565b005b6103db60048036038101906103d69190613a6f565b6116d3565b005b6103f760048036038101906103f29190613945565b6119bd565b604051610404919061435e565b60405180910390f35b61042760048036038101906104229190613830565b611cea565b005b610431611d98565b60405161043e919061423c565b60405180910390f35b610461600480360381019061045c9190613d84565b611dbe565b005b61047d60048036038101906104789190613830565b611dcc565b60405161048e9594939291906142bd565b60405180910390f35b6104b160048036038101906104ac9190613c3a565b611f2c565b6040516104be91906141eb565b60405180910390f35b6104cf611f96565b6040516104dc91906141a7565b60405180910390f35b6104ff60048036038101906104fa9190613a33565b612024565b60405161050d929190614379565b60405180910390f35b61051e612041565b60405161052b9190614206565b60405180910390f35b61054e60048036038101906105499190613945565b612048565b005b61056a60048036038101906105659190613b16565b6120ea565b005b61058660048036038101906105819190613c3a565b612173565b005b6105a2600480360381019061059d9190613830565b61219c565b6040516105af91906141eb565b60405180910390f35b6105d260048036038101906105cd9190613a33565b6121bc565b6040516105df9190614221565b60405180910390f35b61060260048036038101906105fd91906139f7565b61220a565b60405161060f91906141eb565b60405180910390f35b610632600480360381019061062d9190613859565b61236a565b005b61064e60048036038101906106499190613d32565b6124ce565b60405161065b91906140fe565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106d757506106d68261250d565b5b9050919050565b60075481565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561077457600e6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161076b9190614257565b60405180910390fd5b61077f816002612577565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166108115760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016108089190614257565b60405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109de578373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091357600f6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161090a9190614257565b60405180910390fd5b61091d33846126d0565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8573ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015610a6257600080fd5b505afa158015610a76573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a9f9190613cf1565b6040518263ffffffff1660e01b8152600401610abb919061429b565b60206040518083038186803b158015610ad357600080fd5b505afa158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b9190613d5b565b506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114610c3d5760008573ffffffffffffffffffffffffffffffffffffffff1663ea1cd41f846040518263ffffffff1660e01b8152600401610b93919061435e565b60206040518083038186803b158015610bab57600080fd5b505afa158015610bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be39190613d5b565b905060008482610bf39190614538565b9050828110610c3a5760116040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610c319190614257565b60405180910390fd5b50505b6000610c4d858488600088612901565b9150506000811115610c975760056040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610c8e9190614257565b60405180910390fd5b505050505050565b606073__$90f1fa1b3f91137ac60e95891d324fdd69$__63ee5c40d442600860009054906101000a900460ff166040518363ffffffff1660e01b8152600401610ce99291906143d9565b60006040518083038186803b158015610d0157600080fd5b505af4158015610d15573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d3e9190613bd0565b905090565b600860009054906101000a900460ff1681565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33610d8881610d83612e4f565b612e57565b600085859050905060008484905090506000821480610da75750808214155b15610dea5760106040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610de19190614257565b60405180910390fd5b60005b828110156110915760016000898984818110610e32577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e479190613830565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610ed45760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610ecb9190614257565b60405180910390fd5b858582818110610f0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135600360008a8a85818110610f51577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610f669190613830565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550878782818110610fdd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ff29190613830565b73ffffffffffffffffffffffffffffffffffffffff167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6878784818110611062577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051611076919061435e565b60405180910390a28080611089906149bc565b915050610ded565b5050505050505050565b6000806000838152602001908152602001600020600101549050919050565b60008214156111015760096040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016110f89190614257565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561117357600d6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161116a9190614257565b60405180910390fd5b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16158061121c5750600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b1561125f5760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016112569190614257565b60405180910390fd5b600061127084836000806000612901565b91505060008114156112ba5760066040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016112b19190614257565b60405180910390fd5b60008773ffffffffffffffffffffffffffffffffffffffff166355a1ac2e86856040518363ffffffff1660e01b81526004016112f792919061417e565b604080518083038186803b15801561130e57600080fd5b505afa158015611322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113469190613dc0565b915050600061136082600754612ef490919063ffffffff16565b9050808511156113a85760086040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161139f9190614257565b60405180910390fd5b505050505050505050565b6113bc8261109b565b6113cd816113c8612e4f565b612e57565b6113d78383612f1d565b505050565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1661146e5760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016114659190614257565b60405180910390fd5b611479816001612577565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661150f5761156b565b600061151f848387866000612901565b91505060008111156115695760056040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016115609190614257565b60405180910390fd5b505b50505050565b611579612e4f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd9061433e565b60405180910390fd5b6115f08282612ffd565b5050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3381565b60036020528060005260406000206000915090505481565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166116c25760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016116b99190614257565b60405180910390fd5b6116cd816002612577565b50505050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3361170581611700612e4f565b612e57565b6000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff161561179d5760026040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016117949190614257565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1663b72ddee96040518163ffffffff1660e01b815260040160206040518083038186803b1580156117fa57600080fd5b505afa15801561180e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118329190613c9f565b73ffffffffffffffffffffffffffffffffffffffff161461188b5760076040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016118829190614257565b60405180910390fd5b60018160020160006101000a81548160ff021916908315150217905550858160030181905550848160000190805190602001906118c992919061348b565b50838160010190805190602001906118e292919061348b565b50828160040160006101000a81548160ff021916908360ff1602179055506001600560008282546119139190614538565b925050819055506006879080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f876040516119ac91906140fe565b60405180910390a150505050505050565b600080600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015611a4457600080fd5b505afa158015611a58573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a819190613cf1565b6040518263ffffffff1660e01b8152600401611a9d919061429b565b60206040518083038186803b158015611ab557600080fd5b505afa158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aed9190613d5b565b90506000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015611b7557600080fd5b505afa158015611b89573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611bb29190613cf1565b6040518263ffffffff1660e01b8152600401611bce919061429b565b60206040518083038186803b158015611be657600080fd5b505afa158015611bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1e9190613d5b565b90506000611c7c8584600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff166130de565b90506000611cda8284600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1661313d565b9050809450505050509392505050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33611d1c81611d17612e4f565b612e57565b81600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe41882604051611d8c91906140fe565b60405180910390a15050565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611dc88282612577565b5050565b6001602052806000526040600020600091509050806000018054611def90614959565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1b90614959565b8015611e685780601f10611e3d57610100808354040283529160200191611e68565b820191906000526020600020905b815481529060010190602001808311611e4b57829003601f168201915b505050505090806001018054611e7d90614959565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea990614959565b8015611ef65780601f10611ecb57610100808354040283529160200191611ef6565b820191906000526020600020905b815481529060010190602001808311611ed957829003601f168201915b5050505050908060020160009054906101000a900460ff16908060030154908060040160009054906101000a900460ff16905085565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600680548060200260200160405190810160405280929190818152602001828054801561201a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611fd0575b5050505050905090565b60008061203684846000806000612901565b915091509250929050565b6000801b81565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166120da5760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016120d19190614257565b60405180910390fd5b6120e5816001612577565b505050565b600082829050905060005b8181101561216d576000848483818110612138577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061214d9190613830565b905061215981336126d0565b508080612165906149bc565b9150506120f5565b50505050565b61217c8261109b565b61218d81612188612e4f565b612e57565b6121978383612ffd565b505050565b60026020528060005260406000206000915054906101000a900460ff1681565b600460205281600052604060002081815481106121d857600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3361223e81612239612e4f565b612e57565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166122d05760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016122c79190614257565b60405180910390fd5b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b08484604051612358929190614142565b60405180910390a18291505092915050565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156123dc57600d6040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016123d39190614257565b60405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615806124855750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b156124c85760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016124bf9190614257565b60405180910390fd5b50505050565b600681815481106124de57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073__$90f1fa1b3f91137ac60e95891d324fdd69$__63da4b8a4c4285600860009054906101000a900460ff166040518463ffffffff1660e01b81526004016125c3939291906143a2565b60206040518083038186803b1580156125db57600080fd5b505af41580156125ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126139190613cc8565b905081600381111561264e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115612687577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146126cb5780826040517f34e2603a0000000000000000000000000000000000000000000000000000000081526004016126c2929190614272565b60405180910390fd5b505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff166127675760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161275e9190614257565b60405180910390fd5b600115158160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156127c857506128fd565b60018160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a583836040516128f3929190614119565b60405180910390a1505b5050565b60008061290c613511565b6000600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156129cd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612983575b5050505050905060005b8151811015612df6576000828281518110612a1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508173ffffffffffffffffffffffffffffffffffffffff166355a1ac2e8d8d6040518363ffffffff1660e01b8152600401612aa392919061417e565b604080518083038186803b158015612aba57600080fd5b505afa158015612ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af29190613dc0565b866000018760200182815250828152505050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154856040018181525050600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8373ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015612bd457600080fd5b505afa158015612be8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612c119190613cf1565b6040518263ffffffff1660e01b8152600401612c2d919061429b565b60206040518083038186803b158015612c4557600080fd5b505afa158015612c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7d9190613d5b565b856060018181525050612cc08560400151612cb2876000015188606001518560040160009054906101000a900460ff166130de565b612ef490919063ffffffff16565b85608001818151612cd19190614538565b91508181525050612cfc856020015186606001518360040160009054906101000a900460ff166130de565b8560a001818151612d0d9190614538565b915081815250508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612de15760008814612d8957612d708886606001518360040160009054906101000a900460ff166130de565b8560a001818151612d819190614538565b915081815250505b60008914612de057612dc78560400151612db98b88606001518560040160009054906101000a900460ff166130de565b612ef490919063ffffffff16565b8560a001818151612dd89190614538565b915081815250505b5b50508080612dee906149bc565b9150506129d7565b508160a0015182608001511115612e28578160a001518260800151612e1b919061478a565b6000935093505050612e45565b600082608001518360a00151612e3e919061478a565b9350935050505b9550959350505050565b600033905090565b612e618282611f2c565b612ef057612e868173ffffffffffffffffffffffffffffffffffffffff166014613191565b612e948360001c6020613191565b604051602001612ea59291906140c4565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee7919061429b565b60405180910390fd5b5050565b6000670de0b6b3a76400008284612f0b9190614730565b612f15919061458e565b905092915050565b612f278282611f2c565b612ff957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612f9e612e4f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6130078282611f2c565b156130da57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061307f612e4f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008082600a6130ee9190614612565b9050600081670de0b6b3a7640000876131079190614730565b613111919061458e565b9050670de0b6b3a764000085826131289190614730565b613132919061458e565b925050509392505050565b6000670de0b6b3a764000082600a6131559190614612565b84670de0b6b3a76400008761316a9190614730565b613174919061458e565b61317e9190614730565b613188919061458e565b90509392505050565b6060600060028360026131a49190614730565b6131ae9190614538565b67ffffffffffffffff8111156131ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561321f5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061327d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613307577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026133479190614730565b6133519190614538565b90505b600181111561343d577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106133b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106133f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806134369061492f565b9050613354565b5060008414613481576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134789061431e565b60405180910390fd5b8091505092915050565b82805461349790614959565b90600052602060002090601f0160209004810192826134b95760008555613500565b82601f106134d257805160ff1916838001178555613500565b82800160010185558215613500579182015b828111156134ff5782518255916020019190600101906134e4565b5b50905061350d9190613547565b5090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115613560576000816000905550600101613548565b5090565b600061357761357284614442565b61441d565b9050808382526020820190508285602086028201111561359657600080fd5b60005b858110156135c657816135ac8882613806565b845260208401935060208301925050600181019050613599565b5050509392505050565b60006135e36135de8461446e565b61441d565b9050828152602081018484840111156135fb57600080fd5b6136068482856148ed565b509392505050565b600061362161361c8461446e565b61441d565b90508281526020810184848401111561363957600080fd5b6136448482856148fc565b509392505050565b60008135905061365b81614c29565b92915050565b60008083601f84011261367357600080fd5b8235905067ffffffffffffffff81111561368c57600080fd5b6020830191508360208202830111156136a457600080fd5b9250929050565b60008083601f8401126136bd57600080fd5b8235905067ffffffffffffffff8111156136d657600080fd5b6020830191508360208202830111156136ee57600080fd5b9250929050565b600082601f83011261370657600080fd5b8151613716848260208601613564565b91505092915050565b60008135905061372e81614c40565b92915050565b60008135905061374381614c57565b92915050565b60008135905061375881614c6e565b92915050565b60008151905061376d81614c85565b92915050565b60008135905061378281614c9c565b92915050565b60008151905061379781614c9c565b92915050565b600082601f8301126137ae57600080fd5b81356137be8482602086016135d0565b91505092915050565b600082601f8301126137d857600080fd5b81516137e884826020860161360e565b91505092915050565b60008135905061380081614cac565b92915050565b60008151905061381581614cac565b92915050565b60008135905061382a81614cc3565b92915050565b60006020828403121561384257600080fd5b60006138508482850161364c565b91505092915050565b6000806000806080858703121561386f57600080fd5b600061387d8782880161364c565b945050602061388e8782880161364c565b935050604061389f8782880161364c565b92505060606138b08782880161364c565b91505092959194509250565b60008060008060008060c087890312156138d557600080fd5b60006138e389828a0161364c565b96505060206138f489828a0161364c565b955050604061390589828a0161364c565b945050606061391689828a0161364c565b935050608061392789828a016137f1565b92505060a061393889828a016137f1565b9150509295509295509295565b60008060006060848603121561395a57600080fd5b60006139688682870161364c565b93505060206139798682870161364c565b925050604061398a868287016137f1565b9150509250925092565b600080600080608085870312156139aa57600080fd5b60006139b88782880161364c565b94505060206139c98782880161364c565b93505060406139da878288016137f1565b92505060606139eb878288016137f1565b91505092959194509250565b60008060408385031215613a0a57600080fd5b6000613a188582860161364c565b9250506020613a298582860161371f565b9150509250929050565b60008060408385031215613a4657600080fd5b6000613a548582860161364c565b9250506020613a65858286016137f1565b9150509250929050565b600080600080600060a08688031215613a8757600080fd5b6000613a958882890161364c565b9550506020613aa6888289016137f1565b945050604086013567ffffffffffffffff811115613ac357600080fd5b613acf8882890161379d565b935050606086013567ffffffffffffffff811115613aec57600080fd5b613af88882890161379d565b9250506080613b098882890161381b565b9150509295509295909350565b60008060208385031215613b2957600080fd5b600083013567ffffffffffffffff811115613b4357600080fd5b613b4f85828601613661565b92509250509250929050565b60008060008060408587031215613b7157600080fd5b600085013567ffffffffffffffff811115613b8b57600080fd5b613b9787828801613661565b9450945050602085013567ffffffffffffffff811115613bb657600080fd5b613bc2878288016136ab565b925092505092959194509250565b600060208284031215613be257600080fd5b600082015167ffffffffffffffff811115613bfc57600080fd5b613c08848285016136f5565b91505092915050565b600060208284031215613c2357600080fd5b6000613c3184828501613734565b91505092915050565b60008060408385031215613c4d57600080fd5b6000613c5b85828601613734565b9250506020613c6c8582860161364c565b9150509250929050565b600060208284031215613c8857600080fd5b6000613c9684828501613749565b91505092915050565b600060208284031215613cb157600080fd5b6000613cbf8482850161375e565b91505092915050565b600060208284031215613cda57600080fd5b6000613ce884828501613788565b91505092915050565b600060208284031215613d0357600080fd5b600082015167ffffffffffffffff811115613d1d57600080fd5b613d29848285016137c7565b91505092915050565b600060208284031215613d4457600080fd5b6000613d52848285016137f1565b91505092915050565b600060208284031215613d6d57600080fd5b6000613d7b84828501613806565b91505092915050565b60008060408385031215613d9757600080fd5b6000613da5858286016137f1565b9250506020613db685828601613773565b9150509250929050565b60008060408385031215613dd357600080fd5b6000613de185828601613806565b9250506020613df285828601613806565b9150509250929050565b6000613e088383613e2c565b60208301905092915050565b6000613e208383614079565b60208301905092915050565b613e35816147be565b82525050565b613e44816147be565b82525050565b6000613e55826144bf565b613e5f81856144fa565b9350613e6a8361449f565b8060005b83811015613e9b578151613e828882613dfc565b9750613e8d836144e0565b925050600181019050613e6e565b5085935050505092915050565b6000613eb3826144ca565b613ebd818561450b565b9350613ec8836144af565b8060005b83811015613ef9578151613ee08882613e14565b9750613eeb836144ed565b925050600181019050613ecc565b5085935050505092915050565b613f0f816147d0565b82525050565b613f1e816147dc565b82525050565b613f2d81614881565b82525050565b613f3c816148a5565b82525050565b613f4b816148c9565b82525050565b613f5a816148db565b82525050565b6000613f6b826144d5565b613f75818561451c565b9350613f858185602086016148fc565b613f8e81614af0565b840191505092915050565b6000613fa4826144d5565b613fae818561452d565b9350613fbe8185602086016148fc565b80840191505092915050565b6000613fd760208361451c565b9150613fe282614b0e565b602082019050919050565b6000613ffa60068361451c565b915061400582614b37565b602082019050919050565b600061401d60178361452d565b915061402882614b60565b601782019050919050565b600061404060118361452d565b915061404b82614b89565b601182019050919050565b6000614063602f8361451c565b915061406e82614bb2565b604082019050919050565b6140828161486a565b82525050565b6140918161486a565b82525050565b6140a08161486a565b82525050565b6140af81614874565b82525050565b6140be81614874565b82525050565b60006140cf82614010565b91506140db8285613f99565b91506140e682614033565b91506140f28284613f99565b91508190509392505050565b60006020820190506141136000830184613e3b565b92915050565b600060408201905061412e6000830185613e3b565b61413b6020830184613e3b565b9392505050565b60006060820190506141576000830185613e3b565b818103602083015261416881613fed565b90506141776040830184613f06565b9392505050565b60006040820190506141936000830185613e3b565b6141a06020830184614088565b9392505050565b600060208201905081810360008301526141c18184613e4a565b905092915050565b600060208201905081810360008301526141e38184613ea8565b905092915050565b60006020820190506142006000830184613f06565b92915050565b600060208201905061421b6000830184613f15565b92915050565b60006020820190506142366000830184613f24565b92915050565b60006020820190506142516000830184613f33565b92915050565b600060208201905061426c6000830184613f42565b92915050565b60006040820190506142876000830185613f51565b6142946020830184613f51565b9392505050565b600060208201905081810360008301526142b58184613f60565b905092915050565b600060a08201905081810360008301526142d78188613f60565b905081810360208301526142eb8187613f60565b90506142fa6040830186613f06565b6143076060830185614088565b61431460808301846140a6565b9695505050505050565b6000602082019050818103600083015261433781613fca565b9050919050565b6000602082019050818103600083015261435781614056565b9050919050565b60006020820190506143736000830184614088565b92915050565b600060408201905061438e6000830185614088565b61439b6020830184614088565b9392505050565b60006060820190506143b76000830186614097565b6143c46020830185614097565b6143d160408301846140b5565b949350505050565b60006040820190506143ee6000830185614097565b6143fb60208301846140b5565b9392505050565b600060208201905061441760008301846140a6565b92915050565b6000614427614438565b9050614433828261498b565b919050565b6000604051905090565b600067ffffffffffffffff82111561445d5761445c614ac1565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561448957614488614ac1565b5b61449282614af0565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006145438261486a565b915061454e8361486a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561458357614582614a05565b5b828201905092915050565b60006145998261486a565b91506145a48361486a565b9250826145b4576145b3614a34565b5b828204905092915050565b6000808291508390505b6001851115614609578086048111156145e5576145e4614a05565b5b60018516156145f45780820291505b808102905061460285614b01565b94506145c9565b94509492505050565b600061461d8261486a565b915061462883614874565b92506146557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461465d565b905092915050565b60008261466d5760019050614729565b8161467b5760009050614729565b8160018114614691576002811461469b576146ca565b6001915050614729565b60ff8411156146ad576146ac614a05565b5b8360020a9150848211156146c4576146c3614a05565b5b50614729565b5060208310610133831016604e8410600b84101617156146ff5782820a9050838111156146fa576146f9614a05565b5b614729565b61470c84848460016145bf565b9250905081840481111561472357614722614a05565b5b81810290505b9392505050565b600061473b8261486a565b91506147468361486a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561477f5761477e614a05565b5b828202905092915050565b60006147958261486a565b91506147a08361486a565b9250828210156147b3576147b2614a05565b5b828203905092915050565b60006147c98261484a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061481d826147be565b9050919050565b600081905061483282614c01565b919050565b600081905061484582614c15565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061488c82614893565b9050919050565b600061489e8261484a565b9050919050565b60006148b0826148b7565b9050919050565b60006148c28261484a565b9050919050565b60006148d482614824565b9050919050565b60006148e682614837565b9050919050565b82818337600083830152505050565b60005b8381101561491a5780820151818401526020810190506148ff565b83811115614929576000848401525b50505050565b600061493a8261486a565b9150600082141561494e5761494d614a05565b5b600182039050919050565b6000600282049050600182168061497157607f821691505b6020821081141561498557614984614a92565b5b50919050565b61499482614af0565b810181811067ffffffffffffffff821117156149b3576149b2614ac1565b5b80604052505050565b60006149c78261486a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149fa576149f9614a05565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f426f72726f770000000000000000000000000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60138110614c1257614c11614a63565b5b50565b60048110614c2657614c25614a63565b5b50565b614c32816147be565b8114614c3d57600080fd5b50565b614c49816147d0565b8114614c5457600080fd5b50565b614c60816147dc565b8114614c6b57600080fd5b50565b614c77816147e6565b8114614c8257600080fd5b50565b614c8e81614812565b8114614c9957600080fd5b50565b60048110614ca957600080fd5b50565b614cb58161486a565b8114614cc057600080fd5b50565b614ccc81614874565b8114614cd757600080fd5b5056fea2646970667358221220bce0702a268fb5bd1df630d265d77d02d451f65c02f2960cd5a625f7a3dd29b664736f6c63430008040033",
  "libraries": {
    "TSUtils": "0x76b39236427532F4BF047Ad28dEbCC1EAb47c9E1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "enableMarket(address,uint256,string,string,uint8)": {
        "details": "Function to enable a certain Exafin market to be used as collateral",
        "params": {
          "collateralFactor": "exafin's collateral factor for the underlying asset",
          "exafin": "address to add to the protocol"
        }
      },
      "enterMarkets(address[])": {
        "details": "Allows wallet to enter certain markets (exafinDAI, exafinETH, etc) By performing this action, the wallet's money could be used as collateral",
        "params": {
          "exafins": "contracts addresses to enable for `msg.sender`"
        }
      },
      "getAccountLiquidity(address,uint256)": {
        "details": "Function to get account's liquidity for a certain maturity pool",
        "params": {
          "account": "wallet to retrieve liquidity for a certain maturity date",
          "maturityDate": "timestamp to calculate maturity's pool"
        }
      },
      "getFuturePools()": {
        "details": "Function to retrieve valid future pools"
      },
      "getMarketAddresses()": {
        "details": "Function to retrieve all markets"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidateAllowed(address,address,address,address,uint256,uint256)": {
        "details": "Function to allow/reject liquidation of assets. This function can be called  externally, but only will have effect when called from an exafin. ",
        "params": {
          "borrower": "address which the assets are being liquidated",
          "exafinBorrowed": "market from where the debt is pending",
          "exafinCollateral": "market where the assets will be liquidated (should be msg.sender on Exafin.sol)",
          "liquidator": "address that is liquidating the assets",
          "maturityDate": "maturity where the position has a shortfall in liquidity",
          "repayAmount": "amount to be repaid from the debt (outstanding debt * close factor should be bigger than this value)"
        }
      },
      "liquidateCalculateSeizeAmount(address,address,uint256)": {
        "details": "Function to calculate the amount of assets to be seized - when a position is undercollaterized it should be repaid and this functions calculates the  amount of collateral to be seized",
        "params": {
          "actualRepayAmount": "repay amount in the borrowed asset",
          "exafinBorrowed": "market from where the debt is pending",
          "exafinCollateral": "market where the assets will be liquidated (should be msg.sender on Exafin.sol)"
        }
      },
      "pauseBorrow(address,bool)": {
        "details": "Function to pause/unpause borrowing on a certain market",
        "params": {
          "exafin": "address to pause",
          "paused": "true/false"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "seizeAllowed(address,address,address,address)": {
        "details": "Function to allow/reject seizing of assets. This function can be called  externally, but only will have effect when called from an exafin. ",
        "params": {
          "borrower": "address to validate where the assets will be removed",
          "exafinBorrowed": "market from where the debt will be paid",
          "exafinCollateral": "market where the assets will be seized (should be msg.sender on Exafin.sol)",
          "liquidator": "address to validate where the seized assets will be received"
        }
      },
      "setMarketBorrowCaps(address[],uint256[])": {
        "params": {
          "exafins": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "setOracle(address)": {
        "details": "Function to set Oracle's to be used",
        "params": {
          "_priceOracleAddress": "address of the new oracle"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given exafin markets. Borrowing that brings total borrows to or above borrow cap will revert."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 2552,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "markets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Market)2596_storage)"
      },
      {
        "astId": 2556,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "borrowPaused",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2560,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2566,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "accountAssets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_contract(IExafin)5624)dyn_storage)"
      },
      {
        "astId": 2569,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "marketCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2572,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "marketsAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2575,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "closeFactor",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2578,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "maxFuturePools",
        "offset": 0,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 2581,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "oracle",
        "offset": 1,
        "slot": "8",
        "type": "t_contract(IOracle)5670"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IExafin)5624)dyn_storage": {
        "base": "t_contract(IExafin)5624",
        "encoding": "dynamic_array",
        "label": "contract IExafin[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IExafin)5624": {
        "encoding": "inplace",
        "label": "contract IExafin",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)5670": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(IExafin)5624)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IExafin[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IExafin)5624)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Market)2596_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Auditor.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)2596_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Market)2596_storage": {
        "encoding": "inplace",
        "label": "struct Auditor.Market",
        "members": [
          {
            "astId": 2583,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2585,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2587,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "isListed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2589,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "collateralFactor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2591,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "decimals",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 2595,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "accountMembership",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
