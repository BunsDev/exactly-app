{
  "address": "0xDC891752642e1e98C9e4b5060045FD7C8Db4fD92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exaToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "GenericError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum TSUtils.State",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "enum TSUtils.State",
          "name": "requiredState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mpBorrowerDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exaMPBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedMPBorrowerExa",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mpSupplierDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exaMPSupplyIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedMPSupplierExa",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spSupplierDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exaSPSupplyIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedSPSupplierExa",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "ExaSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "beforeBorrowMP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "beforeDepositMP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "beforeRepayMP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        }
      ],
      "name": "beforeSupplySP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "beforeWithdrawMP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        }
      ],
      "name": "beforeWithdrawSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "fixedLenders",
          "type": "address[]"
        }
      ],
      "name": "claimExa",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimExaAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "enableMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "fixedLenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "enterMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "exitMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFuturePools",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        }
      ],
      "name": "getMarketData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "liquidateAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFuturePools",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "pauseBorrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "enum TSUtils.State",
          "name": "requiredState",
          "type": "uint8"
        }
      ],
      "name": "requirePoolState",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsState",
      "outputs": [
        {
          "internalType": "address",
          "name": "exaToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fixedLenderBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exaSpeed",
          "type": "uint256"
        }
      ],
      "name": "setExaSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationIncentive",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "fixedLenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f1382cae692070279e1ae4407cd4165e307535a84cc166d496a9561b8dd503c",
  "receipt": {
    "to": null,
    "from": "0xEB1E881fc67987646597838d18fDF173691F25E7",
    "contractAddress": "0xDC891752642e1e98C9e4b5060045FD7C8Db4fD92",
    "transactionIndex": 0,
    "gasUsed": "4970289",
    "logsBloom": "0x
    "blockHash": "0x9c6ce179fa218462d0f008375f4361d7fdc1bc488eec58c0d0222cddc949c31a",
    "transactionHash": "0x5f1382cae692070279e1ae4407cd4165e307535a84cc166d496a9561b8dd503c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13757341,
        "transactionHash": "0x5f1382cae692070279e1ae4407cd4165e307535a84cc166d496a9561b8dd503c",
        "address": "0xDC891752642e1e98C9e4b5060045FD7C8Db4fD92",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eb1e881fc67987646597838d18fdf173691f25e7",
          "0x000000000000000000000000eb1e881fc67987646597838d18fdf173691f25e7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9c6ce179fa218462d0f008375f4361d7fdc1bc488eec58c0d0222cddc949c31a"
      }
    ],
    "blockNumber": 13757341,
    "cumulativeGasUsed": "4970289",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD8Eedc43a1b640E6aBD56aC6cc66Cc53f25B2c53",
    "0x1Bb0851a116e8d90A19d1087d1A51Ac267961cfb"
  ],
  "solcInputHash": "5c87df12e29dc2079cea619578365c10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exaToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"GenericError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum TSUtils.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum TSUtils.State\",\"name\":\"requiredState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpBorrowerDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exaMPBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedMPBorrowerExa\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpSupplierDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exaMPSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedMPSupplierExa\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spSupplierDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exaSPSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSPSupplierExa\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"ExaSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"beforeBorrowMP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"beforeDepositMP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"beforeRepayMP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"beforeSupplySP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"beforeWithdrawMP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"beforeWithdrawSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"fixedLenders\",\"type\":\"address[]\"}],\"name\":\"claimExa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimExaAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"enableMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fixedLenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"enterMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"exitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFuturePools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"}],\"name\":\"getMarketData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"liquidateAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFuturePools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"pauseBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"enum TSUtils.State\",\"name\":\"requiredState\",\"type\":\"uint8\"}],\"name\":\"requirePoolState\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"exaToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fixedLenderBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"seizeAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exaSpeed\",\"type\":\"uint256\"}],\"name\":\"setExaSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationIncentive\",\"type\":\"uint256\"}],\"name\":\"setLiquidationIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fixedLenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ActionPaused(address,string,bool)\":{\"params\":{\"action\":\"string describing the action that has been paused/re-enabled\",\"fixedLender\":\"address of the market that a certain feature has been paused/re-enabled\",\"paused\":\"boolean describing if the action has been paused or re-enabled\"}},\"DistributedMPBorrowerExa(address,address,uint256,uint256)\":{\"params\":{\"borrower\":\"address of the borrower that have received rewards in a given fixedLender space\",\"exaMPBorrowIndex\":\"index of the given market that was used to update user rewards\",\"fixedLender\":\"address of the fixed lender market in which a user has received rewards\",\"mpBorrowerDelta\":\"delta blocks that have been processed\"}},\"DistributedMPSupplierExa(address,address,uint256,uint256)\":{\"params\":{\"exaMPSupplyIndex\":\"index of the given market that was used to update user rewards\",\"fixedLender\":\"address of the fixed lender market in which a user has received rewards\",\"mpSupplierDelta\":\"delta blocks that have been processed\",\"supplier\":\"address of the supplier that have received rewards in a given lender space\"}},\"DistributedSPSupplierExa(address,address,uint256,uint256)\":{\"params\":{\"exaSPSupplyIndex\":\"index of the given market that was used to update user rewards\",\"fixedLender\":\"address of the fixed lender market in which a user has received rewards\",\"spSupplierDelta\":\"delta blocks that have been processed\",\"supplier\":\"address of the supplier that have received rewards in a given lender space\"}},\"ExaSpeedUpdated(address,uint256)\":{\"params\":{\"fixedLenderAddress\":\"address of the lender that has a new borrow cap\",\"newSpeed\":\"new borrow cap expressed with 1e18 precision for the given market.\"}},\"MarketEntered(address,address,uint256)\":{\"params\":{\"account\":\"address of the user that just entered a market\",\"fixedLender\":\"address of the market that the user entered\",\"maturityDate\":\"dateID/poolID/maturity that the user just entered\"}},\"MarketExited(address,address,uint256)\":{\"params\":{\"account\":\"address of the user that just left a market\",\"fixedLender\":\"address of the market that the user just left\",\"maturityDate\":\"dateID/poolID/maturity that the user just left\"}},\"MarketListed(address)\":{\"params\":{\"fixedLender\":\"address of the fixedLender market that it was listed\"}},\"NewBorrowCap(address,uint256)\":{\"params\":{\"fixedLender\":\"address of the lender that has a new borrow cap\",\"newBorrowCap\":\"new borrow cap expressed with 1e18 precision for the given market.                     0 = means no cap\"}},\"OracleChanged(address)\":{\"params\":{\"newOracle\":\"address of the new oracle that is used to calculate liquidity\"}}},\"kind\":\"dev\",\"methods\":{\"beforeBorrowMP(address,address,uint256,uint256)\":{\"details\":\"Hook function to be called before someone borrows money to a market/maturity.      This function verifies if market is valid, maturity is valid, checks if the user has enough collateral      and accrues rewards accordingly.\",\"params\":{\"borrowAmount\":\"amount that will be lent out to the borrower (expressed with same precision as underlying)\",\"borrower\":\"address of the user that will borrow money from a maturity date\",\"fixedLenderAddress\":\"address of the fixedLender that will lend money in a maturity\",\"maturityDate\":\"timestamp for the maturity date that the user wants to borrow money. It should                     be in a VALID state (meaning that is not in the distant future, nor matured)\"}},\"beforeDepositMP(address,address,uint256)\":{\"details\":\"Hook function to be called before someone supplies money to a market/maturity.      This function verifies if market is valid, maturity is valid, and accrues rewards accordingly.\",\"params\":{\"fixedLenderAddress\":\"address of the fixedLender that will deposit money in a maturity\",\"maturityDate\":\"timestamp for the maturity date that the user wants to supply money. It should                     be in a VALID state (meaning that is not in the distant future, nor matured)\",\"supplier\":\"address of the user that will supply money to a certain maturity (it can be later on                 used as collater with _enterMarkets_ functions)\"}},\"beforeRepayMP(address,address)\":{\"details\":\"Hook function to be called before someone wants to repay its debt in a market/maturity.      This function verifies if market is valid, maturity is MATURED and accrues rewards accordingly.      This function is called from fixedLender contracts.\",\"params\":{\"borrower\":\"address of the user that wants to repay its debt\",\"fixedLenderAddress\":\"address of the fixedLender that will collect money in a maturity\"}},\"beforeSupplySP(address,address)\":{\"details\":\"Hook function to be called before someone supplies money to the smart pool      This function basically checks if the address of the fixed Lender market is      valid and makes sure to accrue EXA tokens to the market and the user.\",\"params\":{\"fixedLenderAddress\":\"address of the fixed lender that will receive money in                           it's smart pool\",\"supplier\":\"address of the user that will supply money to the smart pool\"}},\"beforeWithdrawMP(address,address,uint256,uint256)\":{\"details\":\"Hook function to be called before someone wants to receive its money back from a market/maturity.      This function verifies if market is valid, maturity is MATURED, checks if the user has no outstanding      debts and accrues rewards accordingly. This function is called from fixedLender contracts.\",\"params\":{\"fixedLenderAddress\":\"address of the fixedLender that will lend money in a maturity\",\"maturityDate\":\"timestamp for the maturity date that the user wants to get it's money from. It should                     be in a MATURED state (meaning that the date is VALID + MATURED)\",\"redeemAmount\":\"amount that the user wants to withdraw from the maturity\",\"redeemer\":\"address of the user that wants to withdraw it's money\"}},\"beforeWithdrawSP(address,address)\":{\"details\":\"Hook function to be called before someone withdraws money from the smart pool      This function basically checks if the address of the fixed Lender market is      valid and makes sure to accrue EXA tokens to the market and the user.\",\"params\":{\"fixedLenderAddress\":\"address of the fixed lender that will receive money in                           it's smart pool\",\"supplier\":\"address of the user that will withdraw money from the smart pool\"}},\"claimExa(address,address[])\":{\"params\":{\"fixedLenders\":\"The list of markets to claim EXA in\",\"holder\":\"The address to claim EXA for\"}},\"claimExaAll(address)\":{\"params\":{\"holder\":\"The address to claim EXA for\"}},\"enableMarket(address,uint256,string,string,uint8)\":{\"details\":\"Function to enable a certain FixedLender market to be used as collateral\",\"params\":{\"collateralFactor\":\"fixedLender's collateral factor for the underlying asset\",\"fixedLender\":\"address to add to the protocol\"}},\"enterMarkets(address[],uint256)\":{\"details\":\"Allows wallet to enter certain markets (fixedLenderDAI, fixedLenderETH, etc)      By performing this action, the wallet's money could be used as collateral\",\"params\":{\"fixedLenders\":\"contracts addresses to enable for `msg.sender` for a certain maturity\",\"maturityDate\":\"poolID in which the fixedLenders will be enabled\"}},\"exitMarket(address,uint256)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset,      or be providing necessary collateral for an outstanding borrow.\",\"params\":{\"fixedLenderAddress\":\"The address of the asset to be removed\",\"maturityDate\":\"The timestamp/poolID where the user wants to stop providing collateral\"}},\"getAccountLiquidity(address,uint256)\":{\"details\":\"Function to get account's liquidity for a certain maturity pool\",\"params\":{\"account\":\"wallet to retrieve liquidity for a certain maturity date\",\"maturityDate\":\"timestamp to calculate maturity's pool\"}},\"getFuturePools()\":{\"details\":\"Function to retrieve valid future pools\"},\"getMarketAddresses()\":{\"details\":\"Function to retrieve all markets\"},\"getMarketData(address)\":{\"details\":\"Given a fixedLender address, it returns the corresponding market data\",\"params\":{\"fixedLenderAddress\":\"Address of the contract where we are getting the data\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidateAllowed(address,address,address,address,uint256,uint256)\":{\"details\":\"Function to allow/reject liquidation of assets. This function can be called      externally, but only will have effect when called from a fixedLender.\",\"params\":{\"borrower\":\"address which the assets are being liquidated\",\"fixedLenderBorrowed\":\"market from where the debt is pending\",\"fixedLenderCollateral\":\"market where the assets will be liquidated (should be msg.sender on FixedLender.sol)\",\"liquidator\":\"address that is liquidating the assets\",\"maturityDate\":\"maturity where the position has a shortfall in liquidity\",\"repayAmount\":\"amount to be repaid from the debt (outstanding debt * close factor should be bigger than this value)\"}},\"liquidateCalculateSeizeAmount(address,address,uint256)\":{\"details\":\"Function to calculate the amount of assets to be seized      - when a position is undercollaterized it should be repaid and this functions calculates the        amount of collateral to be seized\",\"params\":{\"actualRepayAmount\":\"repay amount in the borrowed asset\",\"fixedLenderBorrowed\":\"market from where the debt is pending\",\"fixedLenderCollateral\":\"market where the assets will be liquidated (should be msg.sender on FixedLender.sol)\"}},\"pauseBorrow(address,bool)\":{\"details\":\"Function to pause/unpause borrowing on a certain market\",\"params\":{\"fixedLender\":\"address to pause\",\"paused\":\"true/false\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"requirePoolState(uint256,uint8)\":{\"details\":\"Function to verify that a maturityDate is VALID, MATURED, NOT_READY or INVALID.      If expected state doesn't match the calculated one, it reverts with a custom error \\\"UnmatchedPoolState\\\".\",\"params\":{\"maturityDate\":\"timestamp of the maturity date to be verified\",\"requiredState\":\"state required by the caller to be verified (see TSUtils.State() for description)\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"seizeAllowed(address,address,address,address)\":{\"details\":\"Function to allow/reject seizing of assets. This function can be called      externally, but only will have effect when called from a fixedLender.\",\"params\":{\"borrower\":\"address to validate where the assets will be removed\",\"fixedLenderBorrowed\":\"market from where the debt will be paid\",\"fixedLenderCollateral\":\"market where the assets will be seized (should be msg.sender on FixedLender.sol)\",\"liquidator\":\"address to validate where the seized assets will be received\"}},\"setExaSpeed(address,uint256)\":{\"params\":{\"exaSpeed\":\"New EXA speed for market\",\"fixedLenderAddress\":\"The market whose EXA speed to update\"}},\"setLiquidationIncentive(uint256)\":{\"params\":{\"_liquidationIncentive\":\"new liquidation incentive. It's a factor, so 15% would be 1.15e18\"}},\"setMarketBorrowCaps(address[],uint256[])\":{\"params\":{\"fixedLenders\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"setOracle(address)\":{\"details\":\"Function to set Oracle's to be used\",\"params\":{\"_priceOracleAddress\":\"address of the new oracle\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ActionPaused(address,string,bool)\":{\"notice\":\"Event emitted when a certain action has been paused by the protocol\"},\"DistributedMPBorrowerExa(address,address,uint256,uint256)\":{\"notice\":\"Event emitted each time EXA has been distributed to a certain user as a maturity pool borrower\"},\"DistributedMPSupplierExa(address,address,uint256,uint256)\":{\"notice\":\"Event emitted each time EXA has been distributed to a certain user as a maturity pool supplier\"},\"DistributedSPSupplierExa(address,address,uint256,uint256)\":{\"notice\":\"Event emitted each time EXA has been distributed to a certain user as a smart pool supplier\"},\"ExaSpeedUpdated(address,uint256)\":{\"notice\":\"Event emitted when a new ExaSpeed has been set for a given fixedLender.         The speed is the amount of EXA tokens that it will be given to         suppliers/borrowers/lenders on each block. Amount distributed accordingly         to their contributions\"},\"MarketEntered(address,address,uint256)\":{\"notice\":\"Event emitted when a user enters a market to use his deposit as collateral         for a loan. Notice that the market entered is the pair fixedLender/maturityDate\"},\"MarketExited(address,address,uint256)\":{\"notice\":\"Event emitted when a user leaves a market. This means that he would stop using         his deposit as collateral and it won't ask for any loans in this market\"},\"MarketListed(address)\":{\"notice\":\"Event emitted when a new market is listed for borrow/lending\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Event emitted when a new borrow cap has been set for a certain fixedLender         If newBorrowCap is 0, that means that there's no cap\"},\"OracleChanged(address)\":{\"notice\":\"Event emitted when a new Oracle has been set\"}},\"kind\":\"user\",\"methods\":{\"claimExa(address,address[])\":{\"notice\":\"Claim all the EXA accrued by holder in the specified markets\"},\"claimExaAll(address)\":{\"notice\":\"Claim all the EXA accrued by holder in all markets\"},\"exitMarket(address,uint256)\":{\"notice\":\"Removes fixedLender from sender's account liquidity calculation\"},\"setExaSpeed(address,uint256)\":{\"notice\":\"Set EXA speed for a single market\"},\"setLiquidationIncentive(uint256)\":{\"notice\":\"Set liquidation incentive for the whole ecosystem\"},\"setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given fixedLender markets. Borrowing that brings total borrows to or above borrow cap will revert.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Auditor.sol\":\"Auditor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Arrays.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\n *\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\n * alternative consider {ERC20Votes}.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\n\\nabstract contract ERC20Snapshot is ERC20 {\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using Arrays for uint256[];\\n    using Counters for Counters.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    Counters.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _getCurrentSnapshotId();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Get the current snapshotId\\n     */\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\n        return _currentSnapshotId.current();\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        } else if (to == address(0)) {\\n            // burn\\n            _updateAccountSnapshot(from);\\n            _updateTotalSupplySnapshot();\\n        } else {\\n            // transfer\\n            _updateAccountSnapshot(from);\\n            _updateAccountSnapshot(to);\\n        }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x716009b907958a146335eb5a8a0300d684ffda2690bf907e135118d775e04053\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4752e3dddc1de93cf04f7231c79520d5ef02e45679baeecbd79ff19fdfcc6114\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Auditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./interfaces/IFixedLender.sol\\\";\\nimport \\\"./interfaces/IAuditor.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./utils/TSUtils.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\nimport \\\"./utils/ExaLib.sol\\\";\\n\\ncontract Auditor is IAuditor, AccessControl {\\n    using DecimalMath for uint256;\\n    using SafeCast for uint256;\\n    using ExaLib for ExaLib.RewardsState;\\n    using MarketsLib for MarketsLib.Book;\\n\\n    // Protocol Management\\n    MarketsLib.Book private book;\\n\\n    uint256 public closeFactor = 5e17;\\n    uint256 public liquidationIncentive = 1e18 + 1e17;\\n    uint8 public maxFuturePools = 12; // if every 14 days, then 6 months\\n    address[] public marketsAddresses;\\n\\n    // Rewards Management\\n    ExaLib.RewardsState public rewardsState;\\n\\n    IOracle public oracle;\\n\\n    /**\\n     * @notice Event emitted when a new market is listed for borrow/lending\\n     * @param fixedLender address of the fixedLender market that it was listed\\n     */\\n    event MarketListed(address fixedLender);\\n\\n    /**\\n     * @notice Event emitted when a user enters a market to use his deposit as collateral\\n     *         for a loan. Notice that the market entered is the pair fixedLender/maturityDate\\n     * @param fixedLender address of the market that the user entered\\n     * @param account address of the user that just entered a market\\n     * @param maturityDate dateID/poolID/maturity that the user just entered\\n     */\\n    event MarketEntered(\\n        address fixedLender,\\n        address account,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user leaves a market. This means that he would stop using\\n     *         his deposit as collateral and it won't ask for any loans in this market\\n     * @param fixedLender address of the market that the user just left\\n     * @param account address of the user that just left a market\\n     * @param maturityDate dateID/poolID/maturity that the user just left\\n     */\\n    event MarketExited(\\n        address fixedLender,\\n        address account,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a certain action has been paused by the protocol\\n     * @param fixedLender address of the market that a certain feature has been paused/re-enabled\\n     * @param action string describing the action that has been paused/re-enabled\\n     * @param paused boolean describing if the action has been paused or re-enabled\\n     */\\n    event ActionPaused(address fixedLender, string action, bool paused);\\n\\n    /**\\n     * @notice Event emitted when a new Oracle has been set\\n     * @param newOracle address of the new oracle that is used to calculate liquidity\\n     */\\n    event OracleChanged(address newOracle);\\n\\n    /**\\n     * @notice Event emitted when a new borrow cap has been set for a certain fixedLender\\n     *         If newBorrowCap is 0, that means that there's no cap\\n     * @param fixedLender address of the lender that has a new borrow cap\\n     * @param newBorrowCap new borrow cap expressed with 1e18 precision for the given market.\\n     *                     0 = means no cap\\n     */\\n    event NewBorrowCap(address indexed fixedLender, uint256 newBorrowCap);\\n\\n    /**\\n     * @notice Event emitted when a new ExaSpeed has been set for a given fixedLender.\\n     *         The speed is the amount of EXA tokens that it will be given to\\n     *         suppliers/borrowers/lenders on each block. Amount distributed accordingly\\n     *         to their contributions\\n     * @param fixedLenderAddress address of the lender that has a new borrow cap\\n     * @param newSpeed new borrow cap expressed with 1e18 precision for the given market.\\n     */\\n    event ExaSpeedUpdated(address fixedLenderAddress, uint256 newSpeed);\\n\\n    /**\\n     * @notice Event emitted each time EXA has been distributed to a certain user as a maturity pool supplier\\n     * @param fixedLender address of the fixed lender market in which a user has received rewards\\n     * @param supplier address of the supplier that have received rewards in a given lender space\\n     * @param mpSupplierDelta delta blocks that have been processed\\n     * @param exaMPSupplyIndex index of the given market that was used to update user rewards\\n     */\\n    event DistributedMPSupplierExa(\\n        address indexed fixedLender,\\n        address indexed supplier,\\n        uint256 mpSupplierDelta,\\n        uint256 exaMPSupplyIndex\\n    );\\n\\n    /**\\n     * @notice Event emitted each time EXA has been distributed to a certain user as a maturity pool borrower\\n     * @param fixedLender address of the fixed lender market in which a user has received rewards\\n     * @param borrower address of the borrower that have received rewards in a given fixedLender space\\n     * @param mpBorrowerDelta delta blocks that have been processed\\n     * @param exaMPBorrowIndex index of the given market that was used to update user rewards\\n     */\\n    event DistributedMPBorrowerExa(\\n        address indexed fixedLender,\\n        address indexed borrower,\\n        uint256 mpBorrowerDelta,\\n        uint256 exaMPBorrowIndex\\n    );\\n\\n    /**\\n     * @notice Event emitted each time EXA has been distributed to a certain user as a smart pool supplier\\n     * @param fixedLender address of the fixed lender market in which a user has received rewards\\n     * @param supplier address of the supplier that have received rewards in a given lender space\\n     * @param spSupplierDelta delta blocks that have been processed\\n     * @param exaSPSupplyIndex index of the given market that was used to update user rewards\\n     */\\n    event DistributedSPSupplierExa(\\n        address indexed fixedLender,\\n        address indexed supplier,\\n        uint256 spSupplierDelta,\\n        uint256 exaSPSupplyIndex\\n    );\\n\\n    constructor(address _priceOracleAddress, address _exaToken) {\\n        rewardsState.exaToken = _exaToken;\\n        oracle = IOracle(_priceOracleAddress);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows wallet to enter certain markets (fixedLenderDAI, fixedLenderETH, etc)\\n     *      By performing this action, the wallet's money could be used as collateral\\n     * @param fixedLenders contracts addresses to enable for `msg.sender` for a certain maturity\\n     * @param maturityDate poolID in which the fixedLenders will be enabled\\n     */\\n    function enterMarkets(address[] calldata fixedLenders, uint256 maturityDate)\\n        external\\n    {\\n        _requirePoolState(maturityDate, TSUtils.State.VALID);\\n        uint256 len = fixedLenders.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            book.addToMarket(fixedLenders[i], msg.sender, maturityDate);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes fixedLender from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *      or be providing necessary collateral for an outstanding borrow.\\n     * @param fixedLenderAddress The address of the asset to be removed\\n     * @param maturityDate The timestamp/poolID where the user wants to stop providing collateral\\n     */\\n    function exitMarket(address fixedLenderAddress, uint256 maturityDate)\\n        external\\n    {\\n        if (!book.markets[fixedLenderAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        IFixedLender fixedLender = IFixedLender(fixedLenderAddress);\\n\\n        if (!TSUtils.isPoolID(maturityDate)) {\\n            revert GenericError(ErrorCode.INVALID_POOL_ID);\\n        }\\n\\n        (uint256 amountHeld, uint256 borrowBalance) = fixedLender\\n            .getAccountSnapshot(msg.sender, maturityDate);\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (borrowBalance != 0) {\\n            revert GenericError(ErrorCode.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        _beforeWithdrawMP(\\n            fixedLenderAddress,\\n            msg.sender,\\n            amountHeld,\\n            maturityDate\\n        );\\n\\n        book.exitMarket(fixedLenderAddress, msg.sender, maturityDate);\\n    }\\n\\n    /**\\n     * @dev Function to set Oracle's to be used\\n     * @param _priceOracleAddress address of the new oracle\\n     */\\n    function setOracle(address _priceOracleAddress)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        oracle = IOracle(_priceOracleAddress);\\n        emit OracleChanged(_priceOracleAddress);\\n    }\\n\\n    /**\\n     * @notice Set liquidation incentive for the whole ecosystem\\n     * @param _liquidationIncentive new liquidation incentive. It's a factor, so 15% would be 1.15e18\\n     */\\n    function setLiquidationIncentive(uint256 _liquidationIncentive)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        liquidationIncentive = _liquidationIncentive;\\n    }\\n\\n    /**\\n     * @notice Set EXA speed for a single market\\n     * @param fixedLenderAddress The market whose EXA speed to update\\n     * @param exaSpeed New EXA speed for market\\n     */\\n    function setExaSpeed(address fixedLenderAddress, uint256 exaSpeed)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        MarketsLib.Market storage market = book.markets[fixedLenderAddress];\\n        if (market.isListed == false) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        if (\\n            rewardsState.setExaSpeed(\\n                block.number,\\n                fixedLenderAddress,\\n                exaSpeed\\n            ) == true\\n        ) {\\n            emit ExaSpeedUpdated(fixedLenderAddress, exaSpeed);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to enable a certain FixedLender market to be used as collateral\\n     * @param fixedLender address to add to the protocol\\n     * @param collateralFactor fixedLender's collateral factor for the underlying asset\\n     */\\n    function enableMarket(\\n        address fixedLender,\\n        uint256 collateralFactor,\\n        string memory symbol,\\n        string memory name,\\n        uint8 decimals\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        MarketsLib.Market storage market = book.markets[fixedLender];\\n\\n        if (market.isListed) {\\n            revert GenericError(ErrorCode.MARKET_ALREADY_LISTED);\\n        }\\n\\n        if (IFixedLender(fixedLender).getAuditor() != this) {\\n            revert GenericError(ErrorCode.AUDITOR_MISMATCH);\\n        }\\n\\n        market.isListed = true;\\n        market.collateralFactor = collateralFactor;\\n        market.symbol = symbol;\\n        market.name = name;\\n        market.decimals = decimals;\\n\\n        marketsAddresses.push(fixedLender);\\n\\n        emit MarketListed(fixedLender);\\n    }\\n\\n    /**\\n     * @dev Function to pause/unpause borrowing on a certain market\\n     * @param fixedLender address to pause\\n     * @param paused true/false\\n     */\\n    function pauseBorrow(address fixedLender, bool paused)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        returns (bool)\\n    {\\n        if (!book.markets[fixedLender].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        book.borrowPaused[address(fixedLender)] = paused;\\n        emit ActionPaused(fixedLender, \\\"Borrow\\\", paused);\\n        return paused;\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given fixedLender markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n     * @param fixedLenders The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n     */\\n    function setMarketBorrowCaps(\\n        address[] calldata fixedLenders,\\n        uint256[] calldata newBorrowCaps\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 numMarkets = fixedLenders.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        if (numMarkets == 0 || numMarkets != numBorrowCaps) {\\n            revert GenericError(ErrorCode.INVALID_SET_BORROW_CAP);\\n        }\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            if (!book.markets[fixedLenders[i]].isListed) {\\n                revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n            }\\n\\n            book.borrowCaps[fixedLenders[i]] = newBorrowCaps[i];\\n            emit NewBorrowCap(fixedLenders[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim all the EXA accrued by holder in all markets\\n     * @param holder The address to claim EXA for\\n     */\\n    function claimExaAll(address holder) external {\\n        claimExa(holder, marketsAddresses);\\n    }\\n\\n    /**\\n     * @dev Hook function to be called before someone supplies money to the smart pool\\n     *      This function basically checks if the address of the fixed Lender market is\\n     *      valid and makes sure to accrue EXA tokens to the market and the user.\\n     * @param fixedLenderAddress address of the fixed lender that will receive money in\\n     *                           it's smart pool\\n     * @param supplier address of the user that will supply money to the smart pool\\n     */\\n    function beforeSupplySP(address fixedLenderAddress, address supplier)\\n        external\\n        override\\n    {\\n        if (!book.markets[fixedLenderAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        rewardsState.updateExaSPSupplyIndex(block.number, fixedLenderAddress);\\n        rewardsState.distributeSPSupplierExa(fixedLenderAddress, supplier);\\n    }\\n\\n    /**\\n     * @dev Hook function to be called before someone withdraws money from the smart pool\\n     *      This function basically checks if the address of the fixed Lender market is\\n     *      valid and makes sure to accrue EXA tokens to the market and the user.\\n     * @param fixedLenderAddress address of the fixed lender that will receive money in\\n     *                           it's smart pool\\n     * @param supplier address of the user that will withdraw money from the smart pool\\n     */\\n    function beforeWithdrawSP(address fixedLenderAddress, address supplier)\\n        external\\n        override\\n    {\\n        if (!book.markets[fixedLenderAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        rewardsState.updateExaSPSupplyIndex(block.number, fixedLenderAddress);\\n        rewardsState.distributeSPSupplierExa(fixedLenderAddress, supplier);\\n    }\\n\\n    /**\\n     * @dev Hook function to be called before someone supplies money to a market/maturity.\\n     *      This function verifies if market is valid, maturity is valid, and accrues rewards accordingly.\\n     * @param fixedLenderAddress address of the fixedLender that will deposit money in a maturity\\n     * @param supplier address of the user that will supply money to a certain maturity (it can be later on\\n     *                 used as collater with _enterMarkets_ functions)\\n     * @param maturityDate timestamp for the maturity date that the user wants to supply money. It should\\n     *                     be in a VALID state (meaning that is not in the distant future, nor matured)\\n     */\\n    function beforeDepositMP(\\n        address fixedLenderAddress,\\n        address supplier,\\n        uint256 maturityDate\\n    ) external override {\\n        if (!book.markets[fixedLenderAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        _requirePoolState(maturityDate, TSUtils.State.VALID);\\n\\n        rewardsState.updateExaMPSupplyIndex(block.number, fixedLenderAddress);\\n        rewardsState.distributeMPSupplierExa(fixedLenderAddress, supplier);\\n    }\\n\\n    /**\\n     * @dev Hook function to be called before someone borrows money to a market/maturity.\\n     *      This function verifies if market is valid, maturity is valid, checks if the user has enough collateral\\n     *      and accrues rewards accordingly.\\n     * @param fixedLenderAddress address of the fixedLender that will lend money in a maturity\\n     * @param borrower address of the user that will borrow money from a maturity date\\n     * @param borrowAmount amount that will be lent out to the borrower (expressed with same precision as underlying)\\n     * @param maturityDate timestamp for the maturity date that the user wants to borrow money. It should\\n     *                     be in a VALID state (meaning that is not in the distant future, nor matured)\\n     */\\n    function beforeBorrowMP(\\n        address fixedLenderAddress,\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 maturityDate\\n    ) external override {\\n        if (book.borrowPaused[fixedLenderAddress]) {\\n            revert GenericError(ErrorCode.BORROW_PAUSED);\\n        }\\n\\n        _requirePoolState(maturityDate, TSUtils.State.VALID);\\n\\n        book.validateBorrow(\\n            fixedLenderAddress,\\n            borrower,\\n            borrowAmount,\\n            maturityDate\\n        );\\n\\n        (, uint256 shortfall) = book.accountLiquidity(\\n            oracle,\\n            borrower,\\n            maturityDate,\\n            fixedLenderAddress,\\n            0,\\n            borrowAmount\\n        );\\n\\n        if (shortfall > 0) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        rewardsState.updateExaMPBorrowIndex(block.number, fixedLenderAddress);\\n        rewardsState.distributeMPBorrowerExa(fixedLenderAddress, borrower);\\n    }\\n\\n    /**\\n     * @dev Hook function to be called before someone wants to receive its money back from a market/maturity.\\n     *      This function verifies if market is valid, maturity is MATURED, checks if the user has no outstanding\\n     *      debts and accrues rewards accordingly. This function is called from fixedLender contracts.\\n     * @param fixedLenderAddress address of the fixedLender that will lend money in a maturity\\n     * @param redeemer address of the user that wants to withdraw it's money\\n     * @param redeemAmount amount that the user wants to withdraw from the maturity\\n     * @param maturityDate timestamp for the maturity date that the user wants to get it's money from. It should\\n     *                     be in a MATURED state (meaning that the date is VALID + MATURED)\\n     */\\n    function beforeWithdrawMP(\\n        address fixedLenderAddress,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external override {\\n        _beforeWithdrawMP(\\n            fixedLenderAddress,\\n            redeemer,\\n            redeemAmount,\\n            maturityDate\\n        );\\n\\n        rewardsState.updateExaMPSupplyIndex(block.number, fixedLenderAddress);\\n        rewardsState.distributeMPSupplierExa(fixedLenderAddress, redeemer);\\n    }\\n\\n    /**\\n     * @dev Hook function to be called before someone wants to repay its debt in a market/maturity.\\n     *      This function verifies if market is valid, maturity is MATURED and accrues rewards accordingly.\\n     *      This function is called from fixedLender contracts.\\n     * @param fixedLenderAddress address of the fixedLender that will collect money in a maturity\\n     * @param borrower address of the user that wants to repay its debt\\n     */\\n    function beforeRepayMP(address fixedLenderAddress, address borrower)\\n        external\\n        override\\n    {\\n        if (!book.markets[fixedLenderAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        rewardsState.updateExaMPBorrowIndex(block.number, fixedLenderAddress);\\n        rewardsState.distributeMPBorrowerExa(fixedLenderAddress, borrower);\\n    }\\n\\n    /**\\n     * @dev Function to allow/reject liquidation of assets. This function can be called\\n     *      externally, but only will have effect when called from a fixedLender.\\n     * @param fixedLenderCollateral market where the assets will be liquidated (should be msg.sender on FixedLender.sol)\\n     * @param fixedLenderBorrowed market from where the debt is pending\\n     * @param liquidator address that is liquidating the assets\\n     * @param borrower address which the assets are being liquidated\\n     * @param repayAmount amount to be repaid from the debt (outstanding debt * close factor should be bigger than this value)\\n     * @param maturityDate maturity where the position has a shortfall in liquidity\\n     */\\n    function liquidateAllowed(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 maturityDate\\n    ) external view override {\\n        if (borrower == liquidator) {\\n            revert GenericError(ErrorCode.LIQUIDATOR_NOT_BORROWER);\\n        }\\n\\n        // if markets are listed, they have the same auditor\\n        if (\\n            !book.markets[fixedLenderBorrowed].isListed ||\\n            !book.markets[fixedLenderCollateral].isListed\\n        ) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidatable */\\n        (, uint256 shortfall) = book.accountLiquidity(\\n            oracle,\\n            borrower,\\n            maturityDate,\\n            address(0),\\n            0,\\n            0\\n        );\\n\\n        if (shortfall == 0) {\\n            revert GenericError(ErrorCode.UNSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        (, uint256 borrowBalance) = IFixedLender(fixedLenderBorrowed)\\n            .getAccountSnapshot(borrower, maturityDate);\\n        uint256 maxClose = closeFactor.mul_(borrowBalance);\\n        if (repayAmount > maxClose) {\\n            revert GenericError(ErrorCode.TOO_MUCH_REPAY);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to allow/reject seizing of assets. This function can be called\\n     *      externally, but only will have effect when called from a fixedLender.\\n     * @param fixedLenderCollateral market where the assets will be seized (should be msg.sender on FixedLender.sol)\\n     * @param fixedLenderBorrowed market from where the debt will be paid\\n     * @param liquidator address to validate where the seized assets will be received\\n     * @param borrower address to validate where the assets will be removed\\n     */\\n    function seizeAllowed(\\n        address fixedLenderCollateral,\\n        address fixedLenderBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) external view override {\\n        if (borrower == liquidator) {\\n            revert GenericError(ErrorCode.LIQUIDATOR_NOT_BORROWER);\\n        }\\n\\n        // If markets are listed, they have also the same Auditor\\n        if (\\n            !book.markets[fixedLenderCollateral].isListed ||\\n            !book.markets[fixedLenderBorrowed].isListed\\n        ) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n    }\\n\\n    /**\\n     * @dev Given a fixedLender address, it returns the corresponding market data\\n     * @param fixedLenderAddress Address of the contract where we are getting the data\\n     */\\n    function getMarketData(address fixedLenderAddress)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            bool,\\n            uint256,\\n            uint8,\\n            address\\n        )\\n    {\\n        if (!book.markets[fixedLenderAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n        MarketsLib.Market storage marketData = book.markets[fixedLenderAddress];\\n        return (\\n            marketData.symbol,\\n            marketData.name,\\n            marketData.isListed,\\n            marketData.collateralFactor,\\n            marketData.decimals,\\n            fixedLenderAddress\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to get account's liquidity for a certain maturity pool\\n     * @param account wallet to retrieve liquidity for a certain maturity date\\n     * @param maturityDate timestamp to calculate maturity's pool\\n     */\\n    function getAccountLiquidity(address account, uint256 maturityDate)\\n        external\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return\\n            book.accountLiquidity(\\n                oracle,\\n                account,\\n                maturityDate,\\n                address(0),\\n                0,\\n                0\\n            );\\n    }\\n\\n    /**\\n     * @dev Function to calculate the amount of assets to be seized\\n     *      - when a position is undercollaterized it should be repaid and this functions calculates the\\n     *        amount of collateral to be seized\\n     * @param fixedLenderCollateral market where the assets will be liquidated (should be msg.sender on FixedLender.sol)\\n     * @param fixedLenderBorrowed market from where the debt is pending\\n     * @param actualRepayAmount repay amount in the borrowed asset\\n     */\\n    function liquidateCalculateSeizeAmount(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        uint256 actualRepayAmount\\n    ) external view override returns (uint256) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint256 priceBorrowed = oracle.getAssetPrice(\\n            IFixedLender(fixedLenderBorrowed).underlyingTokenName()\\n        );\\n        uint256 priceCollateral = oracle.getAssetPrice(\\n            IFixedLender(fixedLenderCollateral).underlyingTokenName()\\n        );\\n\\n        uint256 amountInUSD = DecimalMath.getTokenAmountInUSD(\\n            actualRepayAmount,\\n            priceBorrowed,\\n            book.markets[fixedLenderBorrowed].decimals\\n        );\\n        // 10**18: usd amount decimals\\n        uint256 seizeTokens = DecimalMath.getTokenAmountFromUsd(\\n            amountInUSD,\\n            priceCollateral,\\n            book.markets[fixedLenderCollateral].decimals\\n        );\\n\\n        return seizeTokens.mul_(liquidationIncentive);\\n    }\\n\\n    /**\\n     * @dev Function to verify that a maturityDate is VALID, MATURED, NOT_READY or INVALID.\\n     *      If expected state doesn't match the calculated one, it reverts with a custom error \\\"UnmatchedPoolState\\\".\\n     * @param maturityDate timestamp of the maturity date to be verified\\n     * @param requiredState state required by the caller to be verified (see TSUtils.State() for description)\\n     */\\n    function requirePoolState(uint256 maturityDate, TSUtils.State requiredState)\\n        external\\n        view\\n        override\\n    {\\n        return _requirePoolState(maturityDate, requiredState);\\n    }\\n\\n    /**\\n     * @dev Function to retrieve valid future pools\\n     */\\n    function getFuturePools()\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return TSUtils.futurePools(block.timestamp, maxFuturePools);\\n    }\\n\\n    /**\\n     * @dev Function to retrieve all markets\\n     */\\n    function getMarketAddresses()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return marketsAddresses;\\n    }\\n\\n    /**\\n     * @notice Claim all the EXA accrued by holder in the specified markets\\n     * @param holder The address to claim EXA for\\n     * @param fixedLenders The list of markets to claim EXA in\\n     */\\n    function claimExa(address holder, address[] memory fixedLenders) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        rewardsState.claimExa(\\n            block.number,\\n            book.markets,\\n            holders,\\n            fixedLenders,\\n            true,\\n            true,\\n            true\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal Function to verify that a maturityDate is VALID, MATURED, NOT_READY or INVALID.\\n     *      If expected state doesn't match the calculated one, it reverts with a custom error \\\"UnmatchedPoolState\\\".\\n     * @param maturityDate timestamp of the maturity date to be verified\\n     * @param requiredState state required by the caller to be verified (see TSUtils.State() for description)\\n     */\\n    function _requirePoolState(\\n        uint256 maturityDate,\\n        TSUtils.State requiredState\\n    ) internal view {\\n        TSUtils.State poolState = TSUtils.getPoolState(\\n            block.timestamp,\\n            maturityDate,\\n            maxFuturePools\\n        );\\n        if (poolState != requiredState) {\\n            revert UnmatchedPoolState(poolState, requiredState);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to be called before someone wants to receive its money back from a market/maturity.\\n     *      This function verifies if market is valid, maturity is MATURED, checks if the user has no outstanding\\n     *      debts. This function is called indirectly from fixedLender contracts(redeem) and directly from this\\n     *      when the user wants to exit a market.\\n     * @param fixedLenderAddress address of the fixedLender that will lend money in a maturity\\n     * @param redeemer address of the user that wants to withdraw it's money\\n     * @param redeemAmount amount that the user wants to withdraw from the maturity\\n     * @param maturityDate timestamp for the maturity date that the user wants to get it's money from. It should\\n     *                     be in a MATURED state (meaning that the date is VALID + MATURED)\\n     */\\n    function _beforeWithdrawMP(\\n        address fixedLenderAddress,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) internal view {\\n        if (!book.markets[fixedLenderAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        _requirePoolState(maturityDate, TSUtils.State.MATURED);\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (\\n            !book.markets[fixedLenderAddress].accountMembership[redeemer][\\n                maturityDate\\n            ]\\n        ) {\\n            return;\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (, uint256 shortfall) = book.accountLiquidity(\\n            oracle,\\n            redeemer,\\n            maturityDate,\\n            fixedLenderAddress,\\n            redeemAmount,\\n            0\\n        );\\n        if (shortfall > 0) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_LIQUIDITY);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09e7075e366dacf949210c5e43b76f9e7e2246c4f98fddbf1e33d93d0ec04e70\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ExaToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\ncontract ExaToken is ERC20, ERC20Snapshot, AccessControl, ERC20Permit {\\n    constructor() ERC20(\\\"ExaToken\\\", \\\"EXA\\\") ERC20Permit(\\\"ExaToken\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _mint(msg.sender, 1000000000 * 10**decimals());\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20, ERC20Snapshot) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xfc0e80fc62bfead45dc15ce3f2129f6b0355b9ebd172375d1a54a18dce1bdd8c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAuditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\nimport \\\"../utils/TSUtils.sol\\\";\\n\\ninterface IAuditor {\\n    function beforeSupplySP(address fixedLenderAddress, address supplier)\\n        external;\\n\\n    function beforeWithdrawSP(address fixedLenderAddress, address supplier)\\n        external;\\n\\n    function beforeDepositMP(\\n        address fixedLenderAddress,\\n        address borrower,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function beforeBorrowMP(\\n        address fixedLenderAddress,\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function beforeWithdrawMP(\\n        address fixedLenderAddress,\\n        address redeemer,\\n        uint256 redeemTokens,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function beforeRepayMP(address fixedLenderAddress, address borrower)\\n        external;\\n\\n    function getAccountLiquidity(address account, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function liquidateAllowed(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 maturityDate\\n    ) external view;\\n\\n    function seizeAllowed(\\n        address fixedLenderCollateral,\\n        address fixedLenderBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) external view;\\n\\n    function liquidateCalculateSeizeAmount(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256);\\n\\n    function getFuturePools() external view returns (uint256[] memory);\\n\\n    function getMarketAddresses() external view returns (address[] memory);\\n\\n    function requirePoolState(uint256 maturityDate, TSUtils.State requiredState)\\n        external\\n        view;\\n}\\n\",\"keccak256\":\"0x0845018b6dc1fbdd57ddbd999a55a86c2c7dbdf4e3a770afdfda1c5d47b1f2ff\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IEToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IEToken is IERC20, IERC20Metadata {\\n    /**\\n     * @dev Emitted when `fixedLender` is set\\n     * - The FixedLender is where the eToken is used\\n     */\\n    event FixedLenderSet(address indexed fixedLender);\\n\\n    /**\\n     * @dev Emitted when `amount` is accrued as earnings\\n     */\\n    event EarningsAccrued(uint256 amount);\\n\\n    /**\\n     * @dev Mints `amount` eTokens to `user`\\n     * - Only callable by the FixedLender\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     */\\n    function mint(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Burns eTokens from `user`\\n     * - Only callable by the FixedLender\\n     * @param user The owner of the eTokens, getting them burned\\n     * @param amount The amount being burned\\n     */\\n    function burn(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Increases contract earnings\\n     * - Only callable by the FixedLender\\n     * @param amount The amount of underlying tokens deposited\\n     */\\n    function accrueEarnings(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x47c7d9677b639ee51e7242033ef77b7e3758e9627f1b7dfa61e32a4f861995fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAuditor.sol\\\";\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IFixedLender {\\n    function borrowFromMaturityPool(uint256 amount, uint256 maturityDate)\\n        external;\\n\\n    function depositToMaturityPool(uint256 amount, uint256 maturityDate)\\n        external;\\n\\n    function depositToSmartPool(uint256 amount) external;\\n\\n    function withdrawFromSmartPool(uint256 amount) external;\\n\\n    function withdrawFromMaturityPool(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function repayToMaturityPool(\\n        address borrower,\\n        uint256 maturityDate,\\n        uint256 repayAmount\\n    ) external;\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) external returns (uint256);\\n\\n    function underlyingTokenName() external view returns (string calldata);\\n\\n    function trustedUnderlying() external view returns (IERC20);\\n\\n    function getAccountSnapshot(address who, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAuditor() external view returns (IAuditor);\\n\\n    function eToken() external view returns (IEToken);\\n\\n    function totalMpBorrows() external view returns (uint256);\\n\\n    function totalMpDeposits() external view returns (uint256);\\n\\n    function totalMpBorrowsUser(address who) external view returns (uint256);\\n\\n    function totalMpDepositsUser(address who) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xceb6f6e2aad15b5711023ee01f2ec719cbdb958d58918dfb10c408b4a0fceb95\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IOracle interface\\n * @notice Interface for the Exactly oracle.\\n */\\ninterface IOracle {\\n    /**\\n     * @dev Returns the asset price\\n     * @param symbol The symbol of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(string memory symbol)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x6f4220f4a16226c85164c6dc4481878bb01b33a145ba4d4e4c8cf5fbb3f6cc52\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct Double {\\n    uint256 value;\\n}\\n\\nlibrary DecimalMath {\\n    uint256 private constant NUMBER_SCALE = 1e18;\\n    uint256 private constant DOUBLE_SCALE = 1e36;\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / NUMBER_SCALE;\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return (a * b.value) / DOUBLE_SCALE;\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * NUMBER_SCALE) / b;\\n    }\\n\\n    function add_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value + b.value});\\n    }\\n\\n    function sub_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value - b.value});\\n    }\\n\\n    function fraction(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: ((a * DOUBLE_SCALE) / b)});\\n    }\\n\\n    /**\\n     * @notice Converts an amount of a particular token into a normalized USD value\\n     * @dev it abstracts the decimals of the token, it's used to compute liquidity\\n     * @param tokenAmount the amount of the token to convert to USD\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param underlyingDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the amount of USD the asset represents, normalized to 18 decimals precision\\n     */\\n    function getTokenAmountInUSD(\\n        uint256 tokenAmount,\\n        uint256 oraclePrice,\\n        uint8 underlyingDecimals\\n    ) internal pure returns (uint256) {\\n        uint256 tokenScale = 10**underlyingDecimals;\\n        uint256 normalizedTokenAmount = (tokenAmount * NUMBER_SCALE) /\\n            tokenScale;\\n        return (normalizedTokenAmount * oraclePrice) / NUMBER_SCALE;\\n    }\\n\\n    /**\\n     * @notice Converts normalized USD value into an  amount of a particular token\\n     * @dev it abstracts the decimals of the token, it's used to get the seizable amount in a liquidation\\n     * @param usdAmount the amount of usd to convert to the token\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param tokenDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the raw amount of the token equivalent to the provided usd amount\\n     */\\n    function getTokenAmountFromUsd(\\n        uint256 usdAmount,\\n        uint256 oraclePrice,\\n        uint8 tokenDecimals\\n    ) internal pure returns (uint256) {\\n        return\\n            (((usdAmount * NUMBER_SCALE) / oraclePrice) * 10**tokenDecimals) /\\n            NUMBER_SCALE;\\n    }\\n}\\n\",\"keccak256\":\"0x5a95fa4807987dd862b1499c260d186b9aadefddeea4345ae6b51751a144717c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TSUtils.sol\\\";\\n\\nerror GenericError(ErrorCode error);\\nerror UnmatchedPoolState(TSUtils.State state, TSUtils.State requiredState);\\n\\nenum ErrorCode {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY,\\n    UNSUFFICIENT_SHORTFALL,\\n    AUDITOR_MISMATCH,\\n    TOO_MUCH_REPAY,\\n    REPAY_ZERO,\\n    TOKENS_MORE_THAN_BALANCE,\\n    INVALID_POOL_STATE,\\n    INVALID_POOL_ID,\\n    LIQUIDATOR_NOT_BORROWER,\\n    BORROW_PAUSED,\\n    NOT_A_FIXED_LENDER_SENDER,\\n    INVALID_SET_BORROW_CAP,\\n    MARKET_BORROW_CAP_REACHED,\\n    INCONSISTENT_PARAMS_LENGTH,\\n    REDEEM_CANT_BE_ZERO,\\n    EXIT_MARKET_BALANCE_OWED,\\n    CALLER_MUST_BE_FIXED_LENDER,\\n    FIXED_LENDER_ALREADY_SET,\\n    INSUFFICIENT_PROTOCOL_LIQUIDITY,\\n    TOO_MUCH_REPAY_TRANSFER,\\n    SMART_POOL_FUNDS_LOCKED\\n}\\n\",\"keccak256\":\"0x2a3e4abc7f2b66436aa15d2162a5827882c599178ef322cc18e4f9f8d9638f2d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/ExaLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interfaces/IFixedLender.sol\\\";\\nimport \\\"../interfaces/IEToken.sol\\\";\\nimport \\\"../utils/DecimalMath.sol\\\";\\nimport \\\"../utils/MarketsLib.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\nimport \\\"../ExaToken.sol\\\";\\n\\nstruct MarketRewardsState {\\n    uint224 index;\\n    uint32 block;\\n}\\n\\nlibrary ExaLib {\\n    using DecimalMath for uint256;\\n    using DecimalMath for Double;\\n    using SafeCast for uint256;\\n\\n    struct ExaState {\\n        uint256 exaSpeed;\\n        MarketRewardsState exaMPSupplyState;\\n        MarketRewardsState exaMPBorrowState;\\n        MarketRewardsState exaSPSupplyState;\\n        mapping(address => uint256) exaMPSupplierIndex;\\n        mapping(address => uint256) exaMPBorrowerIndex;\\n        mapping(address => uint256) exaSPSupplierIndex;\\n    }\\n\\n    struct RewardsState {\\n        address exaToken;\\n        mapping(address => ExaLib.ExaState) exaState;\\n        mapping(address => uint256) exaAccruedUser;\\n    }\\n\\n    // Double precision\\n    uint224 public constant EXA_INITIAL_INDEX = 1e36;\\n\\n    event DistributedMPSupplierExa(\\n        address indexed fixedLender,\\n        address indexed supplier,\\n        uint256 mpSupplierDelta,\\n        uint256 exaMPSupplyIndex\\n    );\\n    event DistributedMPBorrowerExa(\\n        address indexed fixedLender,\\n        address indexed borrower,\\n        uint256 mpBorrowerDelta,\\n        uint256 exaMPBorrowIndex\\n    );\\n    event DistributedSPSupplierExa(\\n        address indexed fixedLender,\\n        address indexed supplier,\\n        uint256 spSupplierDelta,\\n        uint256 exaSPSupplyIndex\\n    );\\n\\n    /**\\n     * @notice Calculate EXA accrued by a smart pool supplier and possibly transfer them to him\\n     * @param fixedLenderState RewardsState storage in Auditor\\n     * @param fixedLenderAddress The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute EXA to\\n     */\\n    function distributeSPSupplierExa(\\n        RewardsState storage fixedLenderState,\\n        address fixedLenderAddress,\\n        address supplier\\n    ) external {\\n        _distributeSPSupplierExa(\\n            fixedLenderState,\\n            fixedLenderAddress,\\n            supplier\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate EXA accrued by a maturity pool supplier and possibly transfer them to him\\n     * @param fixedLenderState RewardsState storage in Auditor\\n     * @param fixedLenderAddress The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute EXA to\\n     */\\n    function distributeMPSupplierExa(\\n        RewardsState storage fixedLenderState,\\n        address fixedLenderAddress,\\n        address supplier\\n    ) external {\\n        _distributeMPSupplierExa(\\n            fixedLenderState,\\n            fixedLenderAddress,\\n            supplier\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate EXA accrued by a maturity pool borrower\\n     * @dev Borrowers will not begin to accrue until the first interaction with the protocol.\\n     * @param fixedLenderAddress The market address in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute EXA to\\n     */\\n    function distributeMPBorrowerExa(\\n        RewardsState storage fixedLenderState,\\n        address fixedLenderAddress,\\n        address borrower\\n    ) external {\\n        _distributeMPBorrowerExa(\\n            fixedLenderState,\\n            fixedLenderAddress,\\n            borrower\\n        );\\n    }\\n\\n    /**\\n     * @notice Claim all EXA accrued by the holders\\n     * @param fixedLenderState RewardsState storage in Auditor\\n     * @param blockNumber current block number (injected for testing purpuses)\\n     * @param markets Valid markets in Auditor\\n     * @param holders The addresses to claim EXA for\\n     * @param fixedLenderAddresses The list of markets to claim EXA in\\n     * @param mpBorrowers Whether or not to claim EXA earned by maturity pool borrowing\\n     * @param mpSuppliers Whether or not to claim EXA earned by maturity pool supplying\\n     * @param spSuppliers Whether or not to claim EXA earned by smart pool supplying\\n     */\\n    function claimExa(\\n        RewardsState storage fixedLenderState,\\n        uint256 blockNumber,\\n        mapping(address => MarketsLib.Market) storage markets,\\n        address[] memory holders,\\n        address[] memory fixedLenderAddresses,\\n        bool mpBorrowers,\\n        bool mpSuppliers,\\n        bool spSuppliers\\n    ) external {\\n        for (uint256 i = 0; i < fixedLenderAddresses.length; i++) {\\n            address fixedLender = fixedLenderAddresses[i];\\n            MarketsLib.Market storage market = markets[fixedLender];\\n\\n            if (!market.isListed) {\\n                revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n            }\\n\\n            if (mpBorrowers == true) {\\n                updateExaMPBorrowIndex(\\n                    fixedLenderState,\\n                    blockNumber,\\n                    fixedLender\\n                );\\n                for (uint256 j = 0; j < holders.length; j++) {\\n                    _distributeMPBorrowerExa(\\n                        fixedLenderState,\\n                        fixedLender,\\n                        holders[j]\\n                    );\\n                    fixedLenderState.exaAccruedUser[holders[j]] = _grantExa(\\n                        fixedLenderState,\\n                        holders[j],\\n                        fixedLenderState.exaAccruedUser[holders[j]]\\n                    );\\n                }\\n            }\\n            if (mpSuppliers == true) {\\n                updateExaMPSupplyIndex(\\n                    fixedLenderState,\\n                    blockNumber,\\n                    fixedLender\\n                );\\n                for (uint256 j = 0; j < holders.length; j++) {\\n                    _distributeMPSupplierExa(\\n                        fixedLenderState,\\n                        fixedLender,\\n                        holders[j]\\n                    );\\n                    fixedLenderState.exaAccruedUser[holders[j]] = _grantExa(\\n                        fixedLenderState,\\n                        holders[j],\\n                        fixedLenderState.exaAccruedUser[holders[j]]\\n                    );\\n                }\\n            }\\n\\n            if (spSuppliers == true) {\\n                updateExaSPSupplyIndex(\\n                    fixedLenderState,\\n                    blockNumber,\\n                    fixedLender\\n                );\\n                for (uint256 j = 0; j < holders.length; j++) {\\n                    _distributeSPSupplierExa(\\n                        fixedLenderState,\\n                        fixedLender,\\n                        holders[j]\\n                    );\\n                    fixedLenderState.exaAccruedUser[holders[j]] = _grantExa(\\n                        fixedLenderState,\\n                        holders[j],\\n                        fixedLenderState.exaAccruedUser[holders[j]]\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer EXA to the user\\n     * @param fixedLenderState RewardsState storage in Auditor\\n     * @param user The address of the user to transfer EXA to\\n     * @param amount The amount of EXA to (possibly) transfer\\n     * @return The amount of EXA which was NOT transferred to the user\\n     */\\n    function grantExa(\\n        RewardsState storage fixedLenderState,\\n        address user,\\n        uint256 amount\\n    ) external returns (uint256) {\\n        return _grantExa(fixedLenderState, user, amount);\\n    }\\n\\n    /**\\n     * @notice Set EXA speed for a single market\\n     * @param fixedLenderState RewardsState storage in Auditor\\n     * @param blockNumber current block number (injected for testing purpuses)\\n     * @param fixedLenderAddress The market whose EXA speed to update\\n     * @param exaSpeed New EXA speed for market\\n     */\\n    function setExaSpeed(\\n        RewardsState storage fixedLenderState,\\n        uint256 blockNumber,\\n        address fixedLenderAddress,\\n        uint256 exaSpeed\\n    ) external returns (bool) {\\n        ExaState storage state = fixedLenderState.exaState[fixedLenderAddress];\\n        uint256 currentExaSpeed = state.exaSpeed;\\n        if (currentExaSpeed != 0) {\\n            updateExaMPSupplyIndex(\\n                fixedLenderState,\\n                blockNumber,\\n                fixedLenderAddress\\n            );\\n            updateExaMPBorrowIndex(\\n                fixedLenderState,\\n                blockNumber,\\n                fixedLenderAddress\\n            );\\n            updateExaSPSupplyIndex(\\n                fixedLenderState,\\n                blockNumber,\\n                fixedLenderAddress\\n            );\\n        } else if (exaSpeed != 0) {\\n            // what happens @ compound.finance if someone doesn't set the exaSpeed\\n            // but supply/borrow first? in that case, block number will be updated\\n            // hence the market can never be initialized with EXA_INITIAL_INDEX\\n            // if (state.exaMPSupplyState.index == 0 && state.exaMPSupplyState.block == 0) {\\n            if (state.exaMPSupplyState.index == 0) {\\n                state.exaMPSupplyState = MarketRewardsState({\\n                    index: EXA_INITIAL_INDEX,\\n                    block: blockNumber.toUint32()\\n                });\\n            }\\n\\n            if (state.exaMPBorrowState.index == 0) {\\n                state.exaMPBorrowState = MarketRewardsState({\\n                    index: EXA_INITIAL_INDEX,\\n                    block: blockNumber.toUint32()\\n                });\\n            }\\n\\n            if (state.exaSPSupplyState.index == 0) {\\n                state.exaSPSupplyState = MarketRewardsState({\\n                    index: EXA_INITIAL_INDEX,\\n                    block: blockNumber.toUint32()\\n                });\\n            }\\n        }\\n\\n        if (currentExaSpeed != exaSpeed) {\\n            state.exaSpeed = exaSpeed;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Accrue EXA to the market by updating the smart pool supply index\\n     * @param fixedLenderAddress The address of the smart pool\\n     * @param blockNumber current block number (injected for testing purpuses)\\n     * @param fixedLenderAddress The market whose supply index to update\\n     */\\n    function updateExaSPSupplyIndex(\\n        RewardsState storage fixedLenderState,\\n        uint256 blockNumber,\\n        address fixedLenderAddress\\n    ) public {\\n        ExaState storage exaState = fixedLenderState.exaState[\\n            fixedLenderAddress\\n        ];\\n        MarketRewardsState storage spSupplyState = exaState.exaSPSupplyState;\\n        uint256 supplySpeed = exaState.exaSpeed;\\n        uint256 deltaBlocks = (blockNumber - uint256(spSupplyState.block));\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint256 spTokens = IFixedLender(fixedLenderAddress)\\n                .eToken()\\n                .totalSupply();\\n            uint256 exaAccruedDelta = deltaBlocks * supplySpeed;\\n            Double memory ratio = spTokens > 0\\n                ? exaAccruedDelta.fraction(spTokens)\\n                : Double({value: 0});\\n            Double memory index = Double({value: spSupplyState.index}).add_(\\n                ratio\\n            );\\n            exaState.exaSPSupplyState = MarketRewardsState({\\n                index: index.value.toUint224(),\\n                block: blockNumber.toUint32()\\n            });\\n        } else if (deltaBlocks > 0) {\\n            spSupplyState.block = blockNumber.toUint32();\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue EXA to the market by updating the maturity pool supply index\\n     * @param fixedLenderAddress The market whose supply index to update\\n     * @param blockNumber current block number (injected for testing purpuses)\\n     * @param fixedLenderAddress The market whose supply index to update\\n     */\\n    function updateExaMPSupplyIndex(\\n        RewardsState storage fixedLenderState,\\n        uint256 blockNumber,\\n        address fixedLenderAddress\\n    ) public {\\n        ExaState storage exaState = fixedLenderState.exaState[\\n            fixedLenderAddress\\n        ];\\n        MarketRewardsState storage mpSupplyState = exaState.exaMPSupplyState;\\n        uint256 supplySpeed = exaState.exaSpeed;\\n        uint256 deltaBlocks = (blockNumber - uint256(mpSupplyState.block));\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint256 mpSupplyTokens = IFixedLender(fixedLenderAddress)\\n                .totalMpDeposits();\\n            uint256 exaAccruedDelta = deltaBlocks * supplySpeed;\\n            Double memory ratio = mpSupplyTokens > 0\\n                ? exaAccruedDelta.fraction(mpSupplyTokens)\\n                : Double({value: 0});\\n            Double memory index = Double({value: mpSupplyState.index}).add_(\\n                ratio\\n            );\\n            exaState.exaMPSupplyState = MarketRewardsState({\\n                index: index.value.toUint224(),\\n                block: blockNumber.toUint32()\\n            });\\n        } else if (deltaBlocks > 0) {\\n            mpSupplyState.block = blockNumber.toUint32();\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue EXA to the market by updating the maturity pool borrow index\\n     * @param fixedLenderState RewardsState storage in Auditor\\n     * @param blockNumber current block number (injected for testing purpuses)\\n     * @param fixedLenderAddress The market whose borrow index to update\\n     */\\n    function updateExaMPBorrowIndex(\\n        RewardsState storage fixedLenderState,\\n        uint256 blockNumber,\\n        address fixedLenderAddress\\n    ) public {\\n        ExaState storage exaState = fixedLenderState.exaState[\\n            fixedLenderAddress\\n        ];\\n        MarketRewardsState storage mpBorrowState = exaState.exaMPBorrowState;\\n        uint256 borrowSpeed = exaState.exaSpeed;\\n        uint256 deltaBlocks = blockNumber - uint256(mpBorrowState.block);\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint256 borrowAmount = IFixedLender(fixedLenderAddress)\\n                .totalMpBorrows();\\n            uint256 exaAccruedDelta = deltaBlocks * borrowSpeed;\\n\\n            Double memory ratio = borrowAmount > 0\\n                ? exaAccruedDelta.fraction(borrowAmount)\\n                : Double({value: 0});\\n            Double memory index = Double({value: mpBorrowState.index}).add_(\\n                ratio\\n            );\\n\\n            exaState.exaMPBorrowState = MarketRewardsState({\\n                index: index.value.toUint224(),\\n                block: blockNumber.toUint32()\\n            });\\n        } else if (deltaBlocks > 0) {\\n            mpBorrowState.block = blockNumber.toUint32();\\n        }\\n    }\\n\\n    /**\\n     * @notice INTERNAL Calculate EXA accrued by a smart pool supplier and possibly transfer them to him\\n     * @param fixedLenderState RewardsState storage in Auditor\\n     * @param fixedLenderAddress The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute EXA to\\n     */\\n    function _distributeSPSupplierExa(\\n        RewardsState storage fixedLenderState,\\n        address fixedLenderAddress,\\n        address supplier\\n    ) internal {\\n        ExaState storage exaState = fixedLenderState.exaState[\\n            fixedLenderAddress\\n        ];\\n        MarketRewardsState storage spSupplyState = exaState.exaSPSupplyState;\\n        Double memory spSupplyIndex = Double({value: spSupplyState.index});\\n        Double memory spSupplierIndex = Double({\\n            value: exaState.exaSPSupplierIndex[supplier]\\n        });\\n        exaState.exaSPSupplierIndex[supplier] = spSupplyIndex.value;\\n\\n        if (spSupplierIndex.value == 0 && spSupplyIndex.value > 0) {\\n            spSupplierIndex.value = EXA_INITIAL_INDEX;\\n        }\\n\\n        Double memory deltaIndex = spSupplyIndex.sub_(spSupplierIndex);\\n\\n        uint256 spSupplierTokens = IFixedLender(fixedLenderAddress)\\n            .eToken()\\n            .balanceOf(supplier);\\n        uint256 spSupplierDelta = spSupplierTokens.mul_(deltaIndex);\\n        uint256 spSupplierAccrued = fixedLenderState.exaAccruedUser[supplier] +\\n            spSupplierDelta;\\n        fixedLenderState.exaAccruedUser[supplier] = spSupplierAccrued;\\n        emit DistributedSPSupplierExa(\\n            fixedLenderAddress,\\n            supplier,\\n            spSupplierDelta,\\n            spSupplyIndex.value\\n        );\\n    }\\n\\n    /**\\n     * @notice INTERNAL Calculate EXA accrued by a maturity pool supplier and possibly transfer them to him\\n     * @param fixedLenderState RewardsState storage in Auditor\\n     * @param fixedLenderAddress The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute EXA to\\n     */\\n    function _distributeMPSupplierExa(\\n        RewardsState storage fixedLenderState,\\n        address fixedLenderAddress,\\n        address supplier\\n    ) internal {\\n        ExaState storage exaState = fixedLenderState.exaState[\\n            fixedLenderAddress\\n        ];\\n        MarketRewardsState storage mpSupplyState = exaState.exaMPSupplyState;\\n        Double memory mpSupplyIndex = Double({value: mpSupplyState.index});\\n        Double memory mpSupplierIndex = Double({\\n            value: exaState.exaMPSupplierIndex[supplier]\\n        });\\n        exaState.exaMPSupplierIndex[supplier] = mpSupplyIndex.value;\\n\\n        if (mpSupplierIndex.value == 0 && mpSupplyIndex.value > 0) {\\n            mpSupplierIndex.value = EXA_INITIAL_INDEX;\\n        }\\n\\n        Double memory deltaIndex = mpSupplyIndex.sub_(mpSupplierIndex);\\n\\n        uint256 mpSupplierTokens = IFixedLender(fixedLenderAddress)\\n            .totalMpDepositsUser(supplier);\\n        uint256 mpSupplierDelta = mpSupplierTokens.mul_(deltaIndex);\\n        uint256 mpSupplierAccrued = fixedLenderState.exaAccruedUser[supplier] +\\n            mpSupplierDelta;\\n        fixedLenderState.exaAccruedUser[supplier] = mpSupplierAccrued;\\n        emit DistributedMPSupplierExa(\\n            fixedLenderAddress,\\n            supplier,\\n            mpSupplierDelta,\\n            mpSupplyIndex.value\\n        );\\n    }\\n\\n    /**\\n     * @notice INTERNAL Calculate EXA accrued by a maturity pool borrower\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param fixedLenderAddress The market address in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute EXA to\\n     */\\n    function _distributeMPBorrowerExa(\\n        RewardsState storage fixedLenderState,\\n        address fixedLenderAddress,\\n        address borrower\\n    ) internal {\\n        ExaState storage exaState = fixedLenderState.exaState[\\n            fixedLenderAddress\\n        ];\\n        MarketRewardsState storage mpBorrowState = exaState.exaMPBorrowState;\\n\\n        Double memory mpBorrowIndex = Double({value: mpBorrowState.index});\\n        Double memory mpBorrowerIndex = Double({\\n            value: exaState.exaMPBorrowerIndex[borrower]\\n        });\\n        exaState.exaMPBorrowerIndex[borrower] = mpBorrowIndex.value;\\n\\n        if (mpBorrowerIndex.value > 0) {\\n            Double memory deltaIndex = mpBorrowIndex.sub_(mpBorrowerIndex);\\n            uint256 mpBorrowerAmount = IFixedLender(fixedLenderAddress)\\n                .totalMpBorrowsUser(borrower);\\n            uint256 mpBorrowerDelta = mpBorrowerAmount.mul_(deltaIndex);\\n            uint256 mpBorrowerAccrued = fixedLenderState.exaAccruedUser[\\n                borrower\\n            ] + mpBorrowerDelta;\\n            fixedLenderState.exaAccruedUser[borrower] = mpBorrowerAccrued;\\n            emit DistributedMPBorrowerExa(\\n                fixedLenderAddress,\\n                borrower,\\n                mpBorrowerDelta,\\n                mpBorrowIndex.value\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer EXA to the user\\n     * @param fixedLenderState RewardsState storage in Auditor\\n     * @param user The address of the user to transfer EXA to\\n     * @param amount The amount of EXA to (possibly) transfer\\n     * @return The amount of EXA which was NOT transferred to the user\\n     */\\n    function _grantExa(\\n        RewardsState storage fixedLenderState,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        ExaToken exa = ExaToken(fixedLenderState.exaToken);\\n        uint256 exaBalance = exa.balanceOf(address(this));\\n        if (amount > 0 && amount <= exaBalance) {\\n            exa.transfer(user, amount);\\n            return 0;\\n        }\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x902e8427bf9e2559702fe5d091f958b83b63a7daec6514330ccb982ad80c7df2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/MarketsLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IFixedLender.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"./TSUtils.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\nimport \\\"../utils/DecimalMath.sol\\\";\\n\\nlibrary MarketsLib {\\n    using DecimalMath for uint256;\\n\\n    // Struct to avoid stack too deep\\n    struct AccountLiquidity {\\n        uint256 balance;\\n        uint256 borrowBalance;\\n        uint256 collateralFactor;\\n        uint256 oraclePrice;\\n        uint256 sumCollateral;\\n        uint256 sumDebt;\\n    }\\n\\n    // Book-keeping\\n    struct Book {\\n        mapping(address => MarketsLib.Market) markets;\\n        mapping(address => bool) borrowPaused;\\n        mapping(address => uint256) borrowCaps;\\n        mapping(address => mapping(uint256 => IFixedLender[])) accountAssets;\\n    }\\n\\n    // Struct for FixedLender's markets\\n    struct Market {\\n        string symbol;\\n        string name;\\n        bool isListed;\\n        uint256 collateralFactor;\\n        uint8 decimals;\\n        mapping(address => mapping(uint256 => bool)) accountMembership;\\n    }\\n\\n    event MarketEntered(\\n        address fixedLender,\\n        address account,\\n        uint256 maturityDate\\n    );\\n    event MarketExited(\\n        address fixedLender,\\n        address account,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @dev Allows wallet to exit certain markets (fixedLenderDAI, fixedLenderETH, etc)\\n     *      By performing this action, the wallet's money stops being used as collateral\\n     * @param book book in which the addMarket function will be applied to\\n     * @param fixedLenderAddress market address used to retrieve the market data\\n     * @param who wallet that wants to exit a market/maturity\\n     * @param maturityDate poolID in which the wallet will stop using as collateral\\n     */\\n    function exitMarket(\\n        Book storage book,\\n        address fixedLenderAddress,\\n        address who,\\n        uint256 maturityDate\\n    ) external {\\n        MarketsLib.Market storage marketToExit = book.markets[\\n            fixedLenderAddress\\n        ];\\n\\n        if (marketToExit.accountMembership[who][maturityDate] == false) {\\n            return;\\n        }\\n\\n        delete marketToExit.accountMembership[who][maturityDate];\\n\\n        // load into memory for faster iteration\\n        IFixedLender[] memory userAssetList = book.accountAssets[who][\\n            maturityDate\\n        ];\\n        uint256 len = userAssetList.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (userAssetList[i] == IFixedLender(fixedLenderAddress)) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        IFixedLender[] storage storedList = book.accountAssets[who][\\n            maturityDate\\n        ];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.pop();\\n\\n        emit MarketExited(fixedLenderAddress, who, maturityDate);\\n    }\\n\\n    /**\\n     * @dev Function to validate if a borrow should be allowed based on the what the book says.\\n            if the user is not participating in a market, and the caller is a fixedLender, the function\\n            will subscribe the wallet to the market membership\\n     * @param book account book that it will be used to perform validation\\n     * @param fixedLenderAddress address of the market that the borrow will be validated. If this equals msg.sender\\n              then the wallet will be autosubscribed to the market membership,\\n     * @param borrower address which will be borrowing money from this market\\n     * @param borrowAmount amount to be valide the borrow action with\\n     * @param maturityDate of the market that the borrow will be validated.\\n     */\\n    function validateBorrow(\\n        Book storage book,\\n        address fixedLenderAddress,\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 maturityDate\\n    ) external {\\n        if (!book.markets[fixedLenderAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        if (\\n            !book.markets[fixedLenderAddress].accountMembership[borrower][\\n                maturityDate\\n            ]\\n        ) {\\n            // only fixedLenders may call borrowAllowed if borrower not in market\\n            if (msg.sender != fixedLenderAddress) {\\n                revert GenericError(ErrorCode.NOT_A_FIXED_LENDER_SENDER);\\n            }\\n\\n            // attempt to add borrower to the market // reverts if error\\n            addToMarket(book, fixedLenderAddress, borrower, maturityDate);\\n\\n            // it should be impossible to break the important invariant\\n            assert(\\n                book.markets[fixedLenderAddress].accountMembership[borrower][\\n                    maturityDate\\n                ]\\n            );\\n        }\\n\\n        uint256 borrowCap = book.borrowCaps[fixedLenderAddress];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = IFixedLender(fixedLenderAddress)\\n                .getTotalMpBorrows(maturityDate);\\n            uint256 nextTotalBorrows = totalBorrows + borrowAmount;\\n            if (nextTotalBorrows >= borrowCap) {\\n                revert GenericError(ErrorCode.MARKET_BORROW_CAP_REACHED);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get account's liquidity for a certain market/maturity pool\\n     * @param book account book that it will be used to calculate liquidity\\n     * @param oracle oracle used to perform all liquidity calculations\\n     * @param account wallet which the liquidity will be calculated\\n     * @param maturityDate timestamp to calculate maturity's pool\\n     * @param fixedLenderToSimulate fixedLender in which we want to simulate withdraw/borrow ops (see next two args)\\n     * @param withdrawAmount amount to simulate withdraw\\n     * @param borrowAmount amount to simulate borrow\\n     */\\n    function accountLiquidity(\\n        Book storage book,\\n        IOracle oracle,\\n        address account,\\n        uint256 maturityDate,\\n        address fixedLenderToSimulate,\\n        uint256 withdrawAmount,\\n        uint256 borrowAmount\\n    ) external view returns (uint256, uint256) {\\n        AccountLiquidity memory vars; // Holds all our calculation results\\n\\n        // For each asset the account is in\\n        IFixedLender[] memory assets = book.accountAssets[account][\\n            maturityDate\\n        ];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IFixedLender asset = assets[i];\\n            MarketsLib.Market storage market = book.markets[address(asset)];\\n\\n            // Read the balances\\n            (vars.balance, vars.borrowBalance) = asset.getAccountSnapshot(\\n                account,\\n                maturityDate\\n            );\\n            vars.collateralFactor = book\\n                .markets[address(asset)]\\n                .collateralFactor;\\n\\n            // Get the normalized price of the asset (18 decimals)\\n            vars.oraclePrice = oracle.getAssetPrice(\\n                asset.underlyingTokenName()\\n            );\\n\\n            // We sum all the collateral prices\\n            vars.sumCollateral += DecimalMath\\n                .getTokenAmountInUSD(\\n                    vars.balance,\\n                    vars.oraclePrice,\\n                    market.decimals\\n                )\\n                .mul_(vars.collateralFactor);\\n\\n            // We sum all the debt\\n            vars.sumDebt += DecimalMath.getTokenAmountInUSD(\\n                vars.borrowBalance,\\n                vars.oraclePrice,\\n                market.decimals\\n            );\\n\\n            // Simulate the effects of borrowing from/lending to a pool\\n            if (asset == IFixedLender(fixedLenderToSimulate)) {\\n                // Calculate the effects of borrowing fixedLenders\\n                if (borrowAmount != 0) {\\n                    vars.sumDebt += DecimalMath.getTokenAmountInUSD(\\n                        borrowAmount,\\n                        vars.oraclePrice,\\n                        market.decimals\\n                    );\\n                }\\n\\n                // Calculate the effects of redeeming fixedLenders\\n                // (having less collateral is the same as having more debt for this calculation)\\n                if (withdrawAmount != 0) {\\n                    vars.sumDebt += DecimalMath\\n                        .getTokenAmountInUSD(\\n                            withdrawAmount,\\n                            vars.oraclePrice,\\n                            market.decimals\\n                        )\\n                        .mul_(vars.collateralFactor);\\n                }\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumDebt) {\\n            return (vars.sumCollateral - vars.sumDebt, 0);\\n        } else {\\n            return (0, vars.sumDebt - vars.sumCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows a user to start participating in a market\\n     * @param book book in which the addMarket function will be applied to\\n     * @param fixedLenderAddress address used to retrieve the market data\\n     * @param who address of the user that it will start participating in a market/maturity\\n     * @param maturityDate poolID in which it will start participating\\n     */\\n    function addToMarket(\\n        Book storage book,\\n        address fixedLenderAddress,\\n        address who,\\n        uint256 maturityDate\\n    ) public {\\n        MarketsLib.Market storage marketToJoin = book.markets[\\n            fixedLenderAddress\\n        ];\\n        addToMaturity(marketToJoin, who, maturityDate);\\n        book.accountAssets[who][maturityDate].push(\\n            IFixedLender(fixedLenderAddress)\\n        );\\n        emit MarketEntered(fixedLenderAddress, who, maturityDate);\\n    }\\n\\n    /**\\n     * @dev Allows wallet to enter certain markets (fixedLenderDAI, fixedLenderETH, etc)\\n     *      By performing this action, the wallet's money could be used as collateral\\n     * @param market Market in which the user will be a added to a certain maturity\\n     * @param borrower wallet that wants to enter a market\\n     * @param maturityDate poolID in which the wallet will be added to\\n     */\\n    function addToMaturity(\\n        Market storage market,\\n        address borrower,\\n        uint256 maturityDate\\n    ) internal {\\n        if (!TSUtils.isPoolID(maturityDate)) {\\n            revert GenericError(ErrorCode.INVALID_POOL_ID);\\n        }\\n\\n        if (!market.isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        if (market.accountMembership[borrower][maturityDate] == true) {\\n            return;\\n        }\\n\\n        market.accountMembership[borrower][maturityDate] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xbc87464a558c3eb8a8fdc867547a4aa562fa4060e929e1a53be6534a5391cc71\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nlibrary TSUtils {\\n    enum State {\\n        INVALID,\\n        MATURED,\\n        VALID,\\n        NOT_READY\\n    }\\n\\n    uint32 public constant INTERVAL = 7 days;\\n\\n    /**\\n     * @notice Function to calculate how many days have passed since the end of the POOLID\\n     * @param timestamp to calculate the day difference\\n     */\\n    function daysPast(uint256 timestamp) public view returns (uint256) {\\n        uint256 trimmedNow = trimmedDay(block.timestamp);\\n        if (timestamp >= trimmedNow) {\\n            return 0;\\n        }\\n        return (trimmedNow - timestamp) / 1 days;\\n    }\\n\\n    /**\\n     * @notice Function to take a timestamp to it's 00:00 hours (beginning of day)\\n     * @param timestamp timestamp to calculate the beginning of the day with\\n     */\\n    function trimmedDay(uint256 timestamp) public pure returns (uint256) {\\n        return timestamp - (timestamp % 1 days);\\n    }\\n\\n    /**\\n     * @notice Function to return a pool _time_ state based on the current time,\\n     *         maxPools available, and the INTERVALS configured, all to return\\n     *         if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED\\n     * @param currentTimestamp timestamp of the current time\\n     * @param timestamp used as POOLID\\n     * @param maxPools number of pools available in the time horizon to be available\\n     */\\n    function getPoolState(\\n        uint256 currentTimestamp,\\n        uint256 timestamp,\\n        uint8 maxPools\\n    ) public pure returns (State) {\\n        if (timestamp % INTERVAL != 0) {\\n            return State.INVALID;\\n        }\\n\\n        if (timestamp < currentTimestamp) {\\n            return State.MATURED;\\n        }\\n\\n        uint256 totalSecondsForEnabledPools = INTERVAL * maxPools;\\n        if (\\n            timestamp >\\n            currentTimestamp -\\n                (currentTimestamp % INTERVAL) +\\n                totalSecondsForEnabledPools\\n        ) {\\n            return State.NOT_READY;\\n        }\\n\\n        return State.VALID;\\n    }\\n\\n    /**\\n     * @notice Function that validates if a certain timestamp is a POOLID based on the INTERVALS\\n     *         configured for this library\\n     * @param timestamp to validate if is a POOLID\\n     */\\n    function isPoolID(uint256 timestamp) public pure returns (bool) {\\n        return (timestamp % INTERVAL) == 0;\\n    }\\n\\n    /**\\n     * @notice Function to return all the future pool IDs give in a certain time horizon that\\n     *         gets calculated using a startTime, the amount of pools to returns, and the INTERVAL\\n     *         configured in this library\\n     * @param startingTimestamp initialTimestamp to start calculating poolIDs\\n     * @param maxPools number of pools to return\\n     */\\n    function futurePools(uint256 startingTimestamp, uint8 maxPools)\\n        public\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory poolIDs = new uint256[](maxPools);\\n        uint256 timestamp = startingTimestamp - (startingTimestamp % INTERVAL);\\n        for (uint256 i = 0; i < maxPools; i++) {\\n            timestamp += INTERVAL;\\n            poolIDs[i] = timestamp;\\n        }\\n        return poolIDs;\\n    }\\n}\\n\",\"keccak256\":\"0x76997e71e0e4e4b4dfdd108059756c8de271471fd9acbb70fd33f596afbe8319\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040526706f05b59d3b20000600555670f43fc2c04ee0000600655600c600760006101000a81548160ff021916908360ff1602179055503480156200004557600080fd5b50604051620059de380380620059de83398181016040528101906200006b91906200029d565b80600960000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001056000801b336200010d60201b60201c565b50506200032c565b6200011f82826200012360201b60201c565b5050565b6200013582826200021460201b60201c565b6200021057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001b56200027e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600081519050620002978162000312565b92915050565b60008060408385031215620002b157600080fd5b6000620002c18582860162000286565b9250506020620002d48582860162000286565b9150509250929050565b6000620002eb82620002f2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200031d81620002de565b81146200032957600080fd5b50565b6156a2806200033c6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c806363ae097a11610130578063a217fddf116100b8578063bb987aef1161007c578063bb987aef1461064c578063c7333f0414610668578063d547741f14610686578063dec481b8146106a2578063eafe967b146106d257610227565b8063a217fddf14610591578063a30c302d146105af578063a8431081146105e4578063b10ed76814610600578063b35dd5dd1461061c57610227565b80638c765e94116100ff5780638c765e94146104d857806391d14854146104f6578063924f6ced1461052657806397ce0d31146105425780639e35e1421461056057610227565b806363ae097a146104665780637adbf973146104825780637dc0d1d01461049e578063806a9f80146104bc57610227565b806321e23a98116101b35780632f2ff15d116101825780632f2ff15d146103c657806336568abe146103e25780635cf232e6146103fe5780635efadbd11461041a578063635f8fc21461044a57610227565b806321e23a9814610342578063248a9ca31461035e57806328bc83c11461038e5780632c7c0ae8146103aa57610227565b80630ac8f744116101fa5780630ac8f744146102b45780630e52dbec146102d0578063186db48f146102ee5780631d48f1d61461030a5780631e69d4301461032657610227565b806301ffc9a71461022c57806305308b9f1461025c578063055d32541461027a57806307219b0914610296575b600080fd5b61024660048036038101906102419190614241565b6106ee565b6040516102539190614854565b60405180910390f35b610264610768565b6040516102719190614cf9565b60405180910390f35b610294600480360381019061028f9190613d58565b61076e565b005b61029e6108e3565b6040516102ab9190614832565b60405180910390f35b6102ce60048036038101906102c99190613ecf565b610987565b005b6102d8610c7d565b6040516102e59190614d9d565b60405180910390f35b610308600480360381019061030391906140a5565b610c90565b005b610324600480360381019061031f919061411a565b610fbe565b005b610340600480360381019061033b9190613fc2565b6110b3565b005b61035c60048036038101906103579190613ecf565b611370565b005b610378600480360381019061037391906141dc565b61145e565b604051610385919061486f565b60405180910390f35b6103a860048036038101906103a39190613d58565b61147d565b005b6103c460048036038101906103bf9190613df7565b6115f2565b005b6103e060048036038101906103db9190614205565b611954565b005b6103fc60048036038101906103f79190614205565b61197d565b005b61041860048036038101906104139190613ffe565b611a00565b005b610434600480360381019061042f9190613e80565b611cb6565b6040516104419190614cf9565b60405180910390f35b610464600480360381019061045f9190613e80565b611ffd565b005b610480600480360381019061047b9190613f32565b61217e565b005b61049c60048036038101906104979190613d2f565b6122ea565b005b6104a661237b565b6040516104b3919061488a565b60405180910390f35b6104d660048036038101906104d1919061434f565b6123a1565b005b6104e06123af565b6040516104ed9190614cf9565b60405180910390f35b610510600480360381019061050b9190614205565b6123b5565b60405161051d9190614854565b60405180910390f35b610540600480360381019061053b9190613d58565b61241f565b005b61054a612594565b6040516105579190614810565b60405180910390f35b61057a60048036038101906105759190613fc2565b612622565b604051610588929190614d14565b60405180910390f35b6105996126e9565b6040516105a6919061486f565b60405180910390f35b6105c960048036038101906105c49190613d2f565b6126f0565b6040516105db9695949392919061490b565b60405180910390f35b6105fe60048036038101906105f991906142fd565b612934565b005b61061a60048036038101906106159190613d2f565b612954565b005b610636600480360381019061063191906142fd565b6129e7565b6040516106439190614790565b60405180910390f35b61066660048036038101906106619190613fc2565b612a26565b005b610670612bb9565b60405161067d9190614790565b60405180910390f35b6106a0600480360381019061069b9190614205565b612be5565b005b6106bc60048036038101906106b79190613f86565b612c0e565b6040516106c99190614854565b60405180910390f35b6106ec60048036038101906106e79190613d94565b612d56565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610761575061076082612ec0565b5b9050919050565b60055481565b600160000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166108035760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016107fa91906148a5565b60405180910390fd5b600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc763cfabf395909143856040518463ffffffff1660e01b815260040161084193929190614bd6565b60006040518083038186803b15801561085957600080fd5b505af415801561086d573d6000803e3d6000fd5b50505050600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc763eb5df71c909184846040518463ffffffff1660e01b81526004016108af93929190614b9f565b60006040518083038186803b1580156108c757600080fd5b505af41580156108db573d6000803e3d6000fd5b505050505050565b606073f6780c6eCFbF39CE58ac293dC2F00da27c91df4E63ee5c40d442600760009054906101000a900460ff166040518363ffffffff1660e01b815260040161092d929190614d74565b60006040518083038186803b15801561094557600080fd5b505af4158015610959573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109829190614172565b905090565b6001800160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a1957600e6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610a1091906148a5565b60405180910390fd5b610a24816002612f2a565b6001735F5A5531CF864FA2BB97A7d455E0850d8ea2792263ce41cb4c9091868686866040518663ffffffff1660e01b8152600401610a669594939291906149ff565b60006040518083038186803b158015610a7e57600080fd5b505af4158015610a92573d6000803e3d6000fd5b5050505060006001735F5A5531CF864FA2BB97A7d455E0850d8ea2792263bde290fb9091600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687868a60008a6040518863ffffffff1660e01b8152600401610b019796959493929190614ac1565b604080518083038186803b158015610b1857600080fd5b505af4158015610b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b50919061438b565b9150506000811115610b9a5760056040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610b9191906148a5565b60405180910390fd5b600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc763f54529ae909143886040518463ffffffff1660e01b8152600401610bd893929190614bd6565b60006040518083038186803b158015610bf057600080fd5b505af4158015610c04573d6000803e3d6000fd5b50505050600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc76303ef12f4909187876040518463ffffffff1660e01b8152600401610c4693929190614b9f565b60006040518083038186803b158015610c5e57600080fd5b505af4158015610c72573d6000803e3d6000fd5b505050505050505050565b600760009054906101000a900460ff1681565b6000801b610ca581610ca0613083565b61308b565b600085859050905060008484905090506000821480610cc45750808214155b15610d075760106040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610cfe91906148a5565b60405180910390fd5b60005b82811015610fb45760016000016000898984818110610d52577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610d679190613d2f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610df45760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610deb91906148a5565b60405180910390fd5b858582818110610e2d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135600160020160008a8a85818110610e74577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e899190613d2f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550878782818110610f00577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610f159190613d2f565b73ffffffffffffffffffffffffffffffffffffffff167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6878784818110610f85577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051610f999190614cf9565b60405180910390a28080610fac9061534e565b915050610d0a565b5050505050505050565b610fc9816002612f2a565b600083839050905060005b818110156110ac576001735F5A5531CF864FA2BB97A7d455E0850d8ea279226363a6cadd9091878785818110611033577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110489190613d2f565b33876040518563ffffffff1660e01b815260040161106994939291906149ba565b60006040518083038186803b15801561108157600080fd5b505af4158015611095573d6000803e3d6000fd5b5050505080806110a49061534e565b915050610fd4565b5050505050565b600160000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166111485760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161113f91906148a5565b60405180910390fd5b600082905073f6780c6eCFbF39CE58ac293dC2F00da27c91df4E63b142980a836040518263ffffffff1660e01b81526004016111849190614cde565b60206040518083038186803b15801561119c57600080fd5b505af41580156111b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d491906141b3565b61121657600c6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161120d91906148a5565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff166355a1ac2e33866040518363ffffffff1660e01b81526004016112549291906147e7565b604080518083038186803b15801561126b57600080fd5b505afa15801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a3919061438b565b91509150600081146112ed5760146040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016112e491906148a5565b60405180910390fd5b6112f985338487613128565b6001735F5A5531CF864FA2BB97A7d455E0850d8ea27922632c0636c790918733886040518563ffffffff1660e01b815260040161133994939291906149ba565b60006040518083038186803b15801561135157600080fd5b505af4158015611365573d6000803e3d6000fd5b505050505050505050565b61137c84848484613128565b600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc763a32ae44d909143876040518463ffffffff1660e01b81526004016113ba93929190614bd6565b60006040518083038186803b1580156113d257600080fd5b505af41580156113e6573d6000803e3d6000fd5b50505050600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc7633e9e174a909186866040518463ffffffff1660e01b815260040161142893929190614b9f565b60006040518083038186803b15801561144057600080fd5b505af4158015611454573d6000803e3d6000fd5b5050505050505050565b6000806000838152602001908152602001600020600101549050919050565b600160000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166115125760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161150991906148a5565b60405180910390fd5b600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc763cfabf395909143856040518463ffffffff1660e01b815260040161155093929190614bd6565b60006040518083038186803b15801561156857600080fd5b505af415801561157c573d6000803e3d6000fd5b50505050600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc763eb5df71c909184846040518463ffffffff1660e01b81526004016115be93929190614b9f565b60006040518083038186803b1580156115d657600080fd5b505af41580156115ea573d6000803e3d6000fd5b505050505050565b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561166457600d6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161165b91906148a5565b60405180910390fd5b600160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615806117135750600160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b156117565760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161174d91906148a5565b60405180910390fd5b60006001735F5A5531CF864FA2BB97A7d455E0850d8ea2792263bde290fb9091600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878660008060006040518863ffffffff1660e01b81526004016117c29796959493929190614a52565b604080518083038186803b1580156117d957600080fd5b505af41580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611811919061438b565b915050600081141561185b5760066040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161185291906148a5565b60405180910390fd5b60008773ffffffffffffffffffffffffffffffffffffffff166355a1ac2e86856040518363ffffffff1660e01b81526004016118989291906147e7565b604080518083038186803b1580156118af57600080fd5b505afa1580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e7919061438b565b91505060006119018260055461337e90919063ffffffff16565b9050808511156119495760086040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161194091906148a5565b60405180910390fd5b505050505050505050565b61195d8261145e565b61196e81611969613083565b61308b565b61197883836133a7565b505050565b611985613083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146119f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e99061499a565b60405180910390fd5b6119fc8282613487565b5050565b6000801b611a1581611a10613083565b61308b565b6000600160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff1615611ab05760026040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611aa791906148a5565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1663b72ddee96040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0d57600080fd5b505afa158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b45919061426a565b73ffffffffffffffffffffffffffffffffffffffff1614611b9e5760076040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611b9591906148a5565b60405180910390fd5b60018160020160006101000a81548160ff02191690831515021790555085816003018190555084816000019080519060200190611bdc929190613915565b5083816001019080519060200190611bf5929190613915565b50828160040160006101000a81548160ff021916908360ff1602179055506008879080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f87604051611ca59190614790565b60405180910390a150505050505050565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b158015611d3d57600080fd5b505afa158015611d51573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611d7a91906142bc565b6040518263ffffffff1660e01b8152600401611d9691906148e9565b60206040518083038186803b158015611dae57600080fd5b505afa158015611dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de69190614326565b90506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b158015611e6e57600080fd5b505afa158015611e82573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611eab91906142bc565b6040518263ffffffff1660e01b8152600401611ec791906148e9565b60206040518083038186803b158015611edf57600080fd5b505afa158015611ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f179190614326565b90506000611f788584600160000160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16613568565b90506000611fd98284600160000160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff166135c7565b9050611ff06006548261337e90919063ffffffff16565b9450505050509392505050565b600160000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166120925760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161208991906148a5565b60405180910390fd5b61209d816002612f2a565b600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc763a32ae44d909143866040518463ffffffff1660e01b81526004016120db93929190614bd6565b60006040518083038186803b1580156120f357600080fd5b505af4158015612107573d6000803e3d6000fd5b50505050600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc7633e9e174a909185856040518463ffffffff1660e01b815260040161214993929190614b9f565b60006040518083038186803b15801561216157600080fd5b505af4158015612175573d6000803e3d6000fd5b50505050505050565b6000600167ffffffffffffffff8111156121c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156121ef5781602001602082028036833780820191505090505b509050828160008151811061222d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc7633d00bbe59091436001600001858760018060016040518963ffffffff1660e01b81526004016122b5989796959493929190614c52565b60006040518083038186803b1580156122cd57600080fd5b505af41580156122e1573d6000803e3d6000fd5b50505050505050565b6000801b6122ff816122fa613083565b61308b565b81600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe4188260405161236f9190614790565b60405180910390a15050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6123ab8282612f2a565b5050565b60065481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600160000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166124b45760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016124ab91906148a5565b60405180910390fd5b600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc763f54529ae909143856040518463ffffffff1660e01b81526004016124f293929190614bd6565b60006040518083038186803b15801561250a57600080fd5b505af415801561251e573d6000803e3d6000fd5b50505050600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc76303ef12f4909184846040518463ffffffff1660e01b815260040161256093929190614b9f565b60006040518083038186803b15801561257857600080fd5b505af415801561258c573d6000803e3d6000fd5b505050505050565b6060600880548060200260200160405190810160405280929190818152602001828054801561261857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116125ce575b5050505050905090565b6000806001735F5A5531CF864FA2BB97A7d455E0850d8ea2792263bde290fb9091600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878760008060006040518863ffffffff1660e01b815260040161268f9796959493929190614a52565b604080518083038186803b1580156126a657600080fd5b505af41580156126ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126de919061438b565b915091509250929050565b6000801b81565b606080600080600080600160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1661278e5760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161278591906148a5565b60405180910390fd5b6000600160000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001816001018260020160009054906101000a900460ff1683600301548460040160009054906101000a900460ff168c858054612812906152eb565b80601f016020809104026020016040519081016040528092919081815260200182805461283e906152eb565b801561288b5780601f106128605761010080835404028352916020019161288b565b820191906000526020600020905b81548152906001019060200180831161286e57829003601f168201915b5050505050955084805461289e906152eb565b80601f01602080910402602001604051908101604052809291908181526020018280546128ca906152eb565b80156129175780601f106128ec57610100808354040283529160200191612917565b820191906000526020600020905b8154815290600101906020018083116128fa57829003601f168201915b505050505094509650965096509650965096505091939550919395565b6000801b61294981612944613083565b61308b565b816006819055505050565b6129e48160088054806020026020016040519081016040528092919081815260200182805480156129da57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612990575b505050505061217e565b50565b600881815481106129f757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b612a3b81612a36613083565b61308b565b6000600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160020160009054906101000a900460ff1615151415612add5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612ad491906148a5565b60405180910390fd5b60011515600973DD82cCC242A1F88EC2c02b0986E15E71897B7fc76353962db490914388886040518563ffffffff1660e01b8152600401612b219493929190614c0d565b60206040518083038186803b158015612b3957600080fd5b505af4158015612b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7191906141b3565b15151415612bb3577fdbe1acf0f191a9aecba27ad74b59bb70426fe3f6129596f53b0f03a230c083238484604051612baa9291906147e7565b60405180910390a15b50505050565b60098060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b612bee8261145e565b612bff81612bfa613083565b61308b565b612c098383613487565b505050565b60008060001b612c2581612c20613083565b61308b565b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16612cba5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612cb191906148a5565b60405180910390fd5b826001800160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b08484604051612d449291906147ab565b60405180910390a18291505092915050565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612dc857600d6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612dbf91906148a5565b60405180910390fd5b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161580612e775750600160000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b15612eba5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612eb191906148a5565b60405180910390fd5b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073f6780c6eCFbF39CE58ac293dC2F00da27c91df4E63da4b8a4c4285600760009054906101000a900460ff166040518463ffffffff1660e01b8152600401612f7693929190614d3d565b60206040518083038186803b158015612f8e57600080fd5b505af4158015612fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc69190614293565b9050816003811115613001577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600381111561303a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461307e5780826040517f34e2603a0000000000000000000000000000000000000000000000000000000081526004016130759291906148c0565b60405180910390fd5b505050565b600033905090565b61309582826123b5565b613124576130ba8173ffffffffffffffffffffffffffffffffffffffff16601461361b565b6130c88360001c602061361b565b6040516020016130d9929190614756565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161311b91906148e9565b60405180910390fd5b5050565b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166131bd5760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016131b491906148a5565b60405180910390fd5b6131c8816001612f2a565b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff1661327257613378565b60006001735F5A5531CF864FA2BB97A7d455E0850d8ea2792263bde290fb9091600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687868a8960006040518863ffffffff1660e01b81526004016132dd9796959493929190614b30565b604080518083038186803b1580156132f457600080fd5b505af4158015613308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332c919061438b565b91505060008111156133765760056040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161336d91906148a5565b60405180910390fd5b505b50505050565b6000670de0b6b3a764000082846133959190615108565b61339f9190614f66565b905092915050565b6133b182826123b5565b61348357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613428613083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61349182826123b5565b1561356457600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613509613083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008082600a6135789190614fea565b9050600081670de0b6b3a7640000876135919190615108565b61359b9190614f66565b9050670de0b6b3a764000085826135b29190615108565b6135bc9190614f66565b925050509392505050565b6000670de0b6b3a764000082600a6135df9190614fea565b84670de0b6b3a7640000876135f49190615108565b6135fe9190614f66565b6136089190615108565b6136129190614f66565b90509392505050565b60606000600283600261362e9190615108565b6136389190614f10565b67ffffffffffffffff811115613677577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156136a95781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613707577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613791577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026137d19190615108565b6137db9190614f10565b90505b60018111156138c7577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613843577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110613880577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806138c0906152c1565b90506137de565b506000841461390b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139029061497a565b60405180910390fd5b8091505092915050565b828054613921906152eb565b90600052602060002090601f016020900481019282613943576000855561398a565b82601f1061395c57805160ff191683800117855561398a565b8280016001018555821561398a579182015b8281111561398957825182559160200191906001019061396e565b5b509050613997919061399b565b5090565b5b808211156139b457600081600090555060010161399c565b5090565b60006139cb6139c684614ddd565b614db8565b905080838252602082019050828560208602820111156139ea57600080fd5b60005b85811015613a1a5781613a008882613b0c565b8452602084019350602083019250506001810190506139ed565b5050509392505050565b6000613a37613a3284614e09565b614db8565b90508083825260208201905082856020860282011115613a5657600080fd5b60005b85811015613a865781613a6c8882613d05565b845260208401935060208301925050600181019050613a59565b5050509392505050565b6000613aa3613a9e84614e35565b614db8565b905082815260208101848484011115613abb57600080fd5b613ac684828561527f565b509392505050565b6000613ae1613adc84614e35565b614db8565b905082815260208101848484011115613af957600080fd5b613b0484828561528e565b509392505050565b600081359050613b1b816155bb565b92915050565b60008083601f840112613b3357600080fd5b8235905067ffffffffffffffff811115613b4c57600080fd5b602083019150836020820283011115613b6457600080fd5b9250929050565b600082601f830112613b7c57600080fd5b8135613b8c8482602086016139b8565b91505092915050565b60008083601f840112613ba757600080fd5b8235905067ffffffffffffffff811115613bc057600080fd5b602083019150836020820283011115613bd857600080fd5b9250929050565b600082601f830112613bf057600080fd5b8151613c00848260208601613a24565b91505092915050565b600081359050613c18816155d2565b92915050565b600081519050613c2d816155d2565b92915050565b600081359050613c42816155e9565b92915050565b600081359050613c5781615600565b92915050565b600081519050613c6c81615617565b92915050565b600081359050613c818161562e565b92915050565b600081519050613c968161562e565b92915050565b600082601f830112613cad57600080fd5b8135613cbd848260208601613a90565b91505092915050565b600082601f830112613cd757600080fd5b8151613ce7848260208601613ace565b91505092915050565b600081359050613cff8161563e565b92915050565b600081519050613d148161563e565b92915050565b600081359050613d2981615655565b92915050565b600060208284031215613d4157600080fd5b6000613d4f84828501613b0c565b91505092915050565b60008060408385031215613d6b57600080fd5b6000613d7985828601613b0c565b9250506020613d8a85828601613b0c565b9150509250929050565b60008060008060808587031215613daa57600080fd5b6000613db887828801613b0c565b9450506020613dc987828801613b0c565b9350506040613dda87828801613b0c565b9250506060613deb87828801613b0c565b91505092959194509250565b60008060008060008060c08789031215613e1057600080fd5b6000613e1e89828a01613b0c565b9650506020613e2f89828a01613b0c565b9550506040613e4089828a01613b0c565b9450506060613e5189828a01613b0c565b9350506080613e6289828a01613cf0565b92505060a0613e7389828a01613cf0565b9150509295509295509295565b600080600060608486031215613e9557600080fd5b6000613ea386828701613b0c565b9350506020613eb486828701613b0c565b9250506040613ec586828701613cf0565b9150509250925092565b60008060008060808587031215613ee557600080fd5b6000613ef387828801613b0c565b9450506020613f0487828801613b0c565b9350506040613f1587828801613cf0565b9250506060613f2687828801613cf0565b91505092959194509250565b60008060408385031215613f4557600080fd5b6000613f5385828601613b0c565b925050602083013567ffffffffffffffff811115613f7057600080fd5b613f7c85828601613b6b565b9150509250929050565b60008060408385031215613f9957600080fd5b6000613fa785828601613b0c565b9250506020613fb885828601613c09565b9150509250929050565b60008060408385031215613fd557600080fd5b6000613fe385828601613b0c565b9250506020613ff485828601613cf0565b9150509250929050565b600080600080600060a0868803121561401657600080fd5b600061402488828901613b0c565b955050602061403588828901613cf0565b945050604086013567ffffffffffffffff81111561405257600080fd5b61405e88828901613c9c565b935050606086013567ffffffffffffffff81111561407b57600080fd5b61408788828901613c9c565b925050608061409888828901613d1a565b9150509295509295909350565b600080600080604085870312156140bb57600080fd5b600085013567ffffffffffffffff8111156140d557600080fd5b6140e187828801613b21565b9450945050602085013567ffffffffffffffff81111561410057600080fd5b61410c87828801613b95565b925092505092959194509250565b60008060006040848603121561412f57600080fd5b600084013567ffffffffffffffff81111561414957600080fd5b61415586828701613b21565b9350935050602061416886828701613cf0565b9150509250925092565b60006020828403121561418457600080fd5b600082015167ffffffffffffffff81111561419e57600080fd5b6141aa84828501613bdf565b91505092915050565b6000602082840312156141c557600080fd5b60006141d384828501613c1e565b91505092915050565b6000602082840312156141ee57600080fd5b60006141fc84828501613c33565b91505092915050565b6000806040838503121561421857600080fd5b600061422685828601613c33565b925050602061423785828601613b0c565b9150509250929050565b60006020828403121561425357600080fd5b600061426184828501613c48565b91505092915050565b60006020828403121561427c57600080fd5b600061428a84828501613c5d565b91505092915050565b6000602082840312156142a557600080fd5b60006142b384828501613c87565b91505092915050565b6000602082840312156142ce57600080fd5b600082015167ffffffffffffffff8111156142e857600080fd5b6142f484828501613cc6565b91505092915050565b60006020828403121561430f57600080fd5b600061431d84828501613cf0565b91505092915050565b60006020828403121561433857600080fd5b600061434684828501613d05565b91505092915050565b6000806040838503121561436257600080fd5b600061437085828601613cf0565b925050602061438185828601613c72565b9150509250929050565b6000806040838503121561439e57600080fd5b60006143ac85828601613d05565b92505060206143bd85828601613d05565b9150509250929050565b60006143d3838361440f565b60208301905092915050565b60006143eb838361443c565b60208301905092915050565b6000614403838361470b565b60208301905092915050565b61441881615162565b82525050565b61442781615162565b82525050565b61443681615162565b82525050565b61444581615162565b82525050565b600061445682614e86565b6144608185614ec1565b935061446b83614e66565b8060005b8381101561449c57815161448388826143c7565b975061448e83614ea7565b92505060018101905061446f565b5085935050505092915050565b60006144b482614e86565b6144be8185614ed2565b93506144c983614e66565b8060005b838110156144fa5781516144e188826143df565b97506144ec83614ea7565b9250506001810190506144cd565b5085935050505092915050565b600061451282614e91565b61451c8185614ee3565b935061452783614e76565b8060005b8381101561455857815161453f88826143f7565b975061454a83614eb4565b92505060018101905061452b565b5085935050505092915050565b61456e81615174565b82525050565b61457d81615174565b82525050565b61458c81615180565b82525050565b61459b81615225565b82525050565b6145aa81615225565b82525050565b6145b981615249565b82525050565b6145c88161525b565b82525050565b8082525050565b6145de8161526d565b82525050565b60006145ef82614e9c565b6145f98185614ef4565b935061460981856020860161528e565b61461281615482565b840191505092915050565b600061462882614e9c565b6146328185614f05565b935061464281856020860161528e565b80840191505092915050565b600061465b602083614ef4565b9150614666826154a0565b602082019050919050565b600061467e600683614ef4565b9150614689826154c9565b602082019050919050565b60006146a1601783614f05565b91506146ac826154f2565b601782019050919050565b60006146c4601183614f05565b91506146cf8261551b565b601182019050919050565b60006146e7602f83614ef4565b91506146f282615544565b604082019050919050565b8082525050565b8082525050565b6147148161520e565b82525050565b6147238161520e565b82525050565b6147328161520e565b82525050565b61474181615218565b82525050565b61475081615218565b82525050565b600061476182614694565b915061476d828561461d565b9150614778826146b7565b9150614784828461461d565b91508190509392505050565b60006020820190506147a5600083018461441e565b92915050565b60006060820190506147c0600083018561441e565b81810360208301526147d181614671565b90506147e06040830184614565565b9392505050565b60006040820190506147fc600083018561441e565b614809602083018461471a565b9392505050565b6000602082019050818103600083015261482a818461444b565b905092915050565b6000602082019050818103600083015261484c8184614507565b905092915050565b60006020820190506148696000830184614565565b92915050565b60006020820190506148846000830184614583565b92915050565b600060208201905061489f6000830184614592565b92915050565b60006020820190506148ba60008301846145b0565b92915050565b60006040820190506148d560008301856145bf565b6148e260208301846145bf565b9392505050565b6000602082019050818103600083015261490381846145e4565b905092915050565b600060c082019050818103600083015261492581896145e4565b9050818103602083015261493981886145e4565b90506149486040830187614565565b614955606083018661471a565b6149626080830185614738565b61496f60a083018461441e565b979650505050505050565b600060208201905081810360008301526149938161464e565b9050919050565b600060208201905081810360008301526149b3816146da565b9050919050565b60006080820190506149cf60008301876146fd565b6149dc602083018661442d565b6149e9604083018561442d565b6149f66060830184614729565b95945050505050565b600060a082019050614a1460008301886146fd565b614a21602083018761442d565b614a2e604083018661442d565b614a3b6060830185614729565b614a486080830184614729565b9695505050505050565b600060e082019050614a67600083018a6146fd565b614a7460208301896145a1565b614a81604083018861442d565b614a8e6060830187614729565b614a9b608083018661442d565b614aa860a08301856145d5565b614ab560c08301846145d5565b98975050505050505050565b600060e082019050614ad6600083018a6146fd565b614ae360208301896145a1565b614af0604083018861442d565b614afd6060830187614729565b614b0a608083018661442d565b614b1760a08301856145d5565b614b2460c0830184614729565b98975050505050505050565b600060e082019050614b45600083018a6146fd565b614b5260208301896145a1565b614b5f604083018861442d565b614b6c6060830187614729565b614b79608083018661442d565b614b8660a0830185614729565b614b9360c08301846145d5565b98975050505050505050565b6000606082019050614bb46000830186614704565b614bc1602083018561442d565b614bce604083018461442d565b949350505050565b6000606082019050614beb6000830186614704565b614bf86020830185614729565b614c05604083018461442d565b949350505050565b6000608082019050614c226000830187614704565b614c2f6020830186614729565b614c3c604083018561442d565b614c496060830184614729565b95945050505050565b600061010082019050614c68600083018b614704565b614c75602083018a614729565b614c8260408301896145ce565b8181036060830152614c9481886144a9565b90508181036080830152614ca881876144a9565b9050614cb760a0830186614574565b614cc460c0830185614574565b614cd160e0830184614574565b9998505050505050505050565b6000602082019050614cf36000830184614729565b92915050565b6000602082019050614d0e600083018461471a565b92915050565b6000604082019050614d29600083018561471a565b614d36602083018461471a565b9392505050565b6000606082019050614d526000830186614729565b614d5f6020830185614729565b614d6c6040830184614747565b949350505050565b6000604082019050614d896000830185614729565b614d966020830184614747565b9392505050565b6000602082019050614db26000830184614738565b92915050565b6000614dc2614dd3565b9050614dce828261531d565b919050565b6000604051905090565b600067ffffffffffffffff821115614df857614df7615453565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614e2457614e23615453565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614e5057614e4f615453565b5b614e5982615482565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614f1b8261520e565b9150614f268361520e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614f5b57614f5a615397565b5b828201905092915050565b6000614f718261520e565b9150614f7c8361520e565b925082614f8c57614f8b6153c6565b5b828204905092915050565b6000808291508390505b6001851115614fe157808604811115614fbd57614fbc615397565b5b6001851615614fcc5780820291505b8081029050614fda85615493565b9450614fa1565b94509492505050565b6000614ff58261520e565b915061500083615218565b925061502d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615035565b905092915050565b6000826150455760019050615101565b816150535760009050615101565b81600181146150695760028114615073576150a2565b6001915050615101565b60ff84111561508557615084615397565b5b8360020a91508482111561509c5761509b615397565b5b50615101565b5060208310610133831016604e8410600b84101617156150d75782820a9050838111156150d2576150d1615397565b5b615101565b6150e48484846001614f97565b925090508184048111156150fb576150fa615397565b5b81810290505b9392505050565b60006151138261520e565b915061511e8361520e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561515757615156615397565b5b828202905092915050565b600061516d826151ee565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006151c182615162565b9050919050565b60008190506151d682615593565b919050565b60008190506151e9826155a7565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061523082615237565b9050919050565b6000615242826151ee565b9050919050565b6000615254826151c8565b9050919050565b6000615266826151db565b9050919050565b60006152788261520e565b9050919050565b82818337600083830152505050565b60005b838110156152ac578082015181840152602081019050615291565b838111156152bb576000848401525b50505050565b60006152cc8261520e565b915060008214156152e0576152df615397565b5b600182039050919050565b6000600282049050600182168061530357607f821691505b6020821081141561531757615316615424565b5b50919050565b61532682615482565b810181811067ffffffffffffffff8211171561534557615344615453565b5b80604052505050565b60006153598261520e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561538c5761538b615397565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f426f72726f770000000000000000000000000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601a81106155a4576155a36153f5565b5b50565b600481106155b8576155b76153f5565b5b50565b6155c481615162565b81146155cf57600080fd5b50565b6155db81615174565b81146155e657600080fd5b50565b6155f281615180565b81146155fd57600080fd5b50565b6156098161518a565b811461561457600080fd5b50565b615620816151b6565b811461562b57600080fd5b50565b6004811061563b57600080fd5b50565b6156478161520e565b811461565257600080fd5b50565b61565e81615218565b811461566957600080fd5b5056fea2646970667358221220de183c143245bedf5aa454f58132d4a9ce73d29e054c81bcadab85dc13776c4664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c806363ae097a11610130578063a217fddf116100b8578063bb987aef1161007c578063bb987aef1461064c578063c7333f0414610668578063d547741f14610686578063dec481b8146106a2578063eafe967b146106d257610227565b8063a217fddf14610591578063a30c302d146105af578063a8431081146105e4578063b10ed76814610600578063b35dd5dd1461061c57610227565b80638c765e94116100ff5780638c765e94146104d857806391d14854146104f6578063924f6ced1461052657806397ce0d31146105425780639e35e1421461056057610227565b806363ae097a146104665780637adbf973146104825780637dc0d1d01461049e578063806a9f80146104bc57610227565b806321e23a98116101b35780632f2ff15d116101825780632f2ff15d146103c657806336568abe146103e25780635cf232e6146103fe5780635efadbd11461041a578063635f8fc21461044a57610227565b806321e23a9814610342578063248a9ca31461035e57806328bc83c11461038e5780632c7c0ae8146103aa57610227565b80630ac8f744116101fa5780630ac8f744146102b45780630e52dbec146102d0578063186db48f146102ee5780631d48f1d61461030a5780631e69d4301461032657610227565b806301ffc9a71461022c57806305308b9f1461025c578063055d32541461027a57806307219b0914610296575b600080fd5b61024660048036038101906102419190614241565b6106ee565b6040516102539190614854565b60405180910390f35b610264610768565b6040516102719190614cf9565b60405180910390f35b610294600480360381019061028f9190613d58565b61076e565b005b61029e6108e3565b6040516102ab9190614832565b60405180910390f35b6102ce60048036038101906102c99190613ecf565b610987565b005b6102d8610c7d565b6040516102e59190614d9d565b60405180910390f35b610308600480360381019061030391906140a5565b610c90565b005b610324600480360381019061031f919061411a565b610fbe565b005b610340600480360381019061033b9190613fc2565b6110b3565b005b61035c60048036038101906103579190613ecf565b611370565b005b610378600480360381019061037391906141dc565b61145e565b604051610385919061486f565b60405180910390f35b6103a860048036038101906103a39190613d58565b61147d565b005b6103c460048036038101906103bf9190613df7565b6115f2565b005b6103e060048036038101906103db9190614205565b611954565b005b6103fc60048036038101906103f79190614205565b61197d565b005b61041860048036038101906104139190613ffe565b611a00565b005b610434600480360381019061042f9190613e80565b611cb6565b6040516104419190614cf9565b60405180910390f35b610464600480360381019061045f9190613e80565b611ffd565b005b610480600480360381019061047b9190613f32565b61217e565b005b61049c60048036038101906104979190613d2f565b6122ea565b005b6104a661237b565b6040516104b3919061488a565b60405180910390f35b6104d660048036038101906104d1919061434f565b6123a1565b005b6104e06123af565b6040516104ed9190614cf9565b60405180910390f35b610510600480360381019061050b9190614205565b6123b5565b60405161051d9190614854565b60405180910390f35b610540600480360381019061053b9190613d58565b61241f565b005b61054a612594565b6040516105579190614810565b60405180910390f35b61057a60048036038101906105759190613fc2565b612622565b604051610588929190614d14565b60405180910390f35b6105996126e9565b6040516105a6919061486f565b60405180910390f35b6105c960048036038101906105c49190613d2f565b6126f0565b6040516105db9695949392919061490b565b60405180910390f35b6105fe60048036038101906105f991906142fd565b612934565b005b61061a60048036038101906106159190613d2f565b612954565b005b610636600480360381019061063191906142fd565b6129e7565b6040516106439190614790565b60405180910390f35b61066660048036038101906106619190613fc2565b612a26565b005b610670612bb9565b60405161067d9190614790565b60405180910390f35b6106a0600480360381019061069b9190614205565b612be5565b005b6106bc60048036038101906106b79190613f86565b612c0e565b6040516106c99190614854565b60405180910390f35b6106ec60048036038101906106e79190613d94565b612d56565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610761575061076082612ec0565b5b9050919050565b60055481565b600160000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166108035760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016107fa91906148a5565b60405180910390fd5b600973__$362cfe25f3e11228b53aea52cf811ef65a$__63cfabf395909143856040518463ffffffff1660e01b815260040161084193929190614bd6565b60006040518083038186803b15801561085957600080fd5b505af415801561086d573d6000803e3d6000fd5b50505050600973__$362cfe25f3e11228b53aea52cf811ef65a$__63eb5df71c909184846040518463ffffffff1660e01b81526004016108af93929190614b9f565b60006040518083038186803b1580156108c757600080fd5b505af41580156108db573d6000803e3d6000fd5b505050505050565b606073__$90f1fa1b3f91137ac60e95891d324fdd69$__63ee5c40d442600760009054906101000a900460ff166040518363ffffffff1660e01b815260040161092d929190614d74565b60006040518083038186803b15801561094557600080fd5b505af4158015610959573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109829190614172565b905090565b6001800160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a1957600e6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610a1091906148a5565b60405180910390fd5b610a24816002612f2a565b600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63ce41cb4c9091868686866040518663ffffffff1660e01b8152600401610a669594939291906149ff565b60006040518083038186803b158015610a7e57600080fd5b505af4158015610a92573d6000803e3d6000fd5b505050506000600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63bde290fb9091600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687868a60008a6040518863ffffffff1660e01b8152600401610b019796959493929190614ac1565b604080518083038186803b158015610b1857600080fd5b505af4158015610b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b50919061438b565b9150506000811115610b9a5760056040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610b9191906148a5565b60405180910390fd5b600973__$362cfe25f3e11228b53aea52cf811ef65a$__63f54529ae909143886040518463ffffffff1660e01b8152600401610bd893929190614bd6565b60006040518083038186803b158015610bf057600080fd5b505af4158015610c04573d6000803e3d6000fd5b50505050600973__$362cfe25f3e11228b53aea52cf811ef65a$__6303ef12f4909187876040518463ffffffff1660e01b8152600401610c4693929190614b9f565b60006040518083038186803b158015610c5e57600080fd5b505af4158015610c72573d6000803e3d6000fd5b505050505050505050565b600760009054906101000a900460ff1681565b6000801b610ca581610ca0613083565b61308b565b600085859050905060008484905090506000821480610cc45750808214155b15610d075760106040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610cfe91906148a5565b60405180910390fd5b60005b82811015610fb45760016000016000898984818110610d52577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610d679190613d2f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610df45760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610deb91906148a5565b60405180910390fd5b858582818110610e2d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135600160020160008a8a85818110610e74577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e899190613d2f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550878782818110610f00577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610f159190613d2f565b73ffffffffffffffffffffffffffffffffffffffff167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6878784818110610f85577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051610f999190614cf9565b60405180910390a28080610fac9061534e565b915050610d0a565b5050505050505050565b610fc9816002612f2a565b600083839050905060005b818110156110ac57600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__6363a6cadd9091878785818110611033577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110489190613d2f565b33876040518563ffffffff1660e01b815260040161106994939291906149ba565b60006040518083038186803b15801561108157600080fd5b505af4158015611095573d6000803e3d6000fd5b5050505080806110a49061534e565b915050610fd4565b5050505050565b600160000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166111485760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161113f91906148a5565b60405180910390fd5b600082905073__$90f1fa1b3f91137ac60e95891d324fdd69$__63b142980a836040518263ffffffff1660e01b81526004016111849190614cde565b60206040518083038186803b15801561119c57600080fd5b505af41580156111b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d491906141b3565b61121657600c6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161120d91906148a5565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff166355a1ac2e33866040518363ffffffff1660e01b81526004016112549291906147e7565b604080518083038186803b15801561126b57600080fd5b505afa15801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a3919061438b565b91509150600081146112ed5760146040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016112e491906148a5565b60405180910390fd5b6112f985338487613128565b600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__632c0636c790918733886040518563ffffffff1660e01b815260040161133994939291906149ba565b60006040518083038186803b15801561135157600080fd5b505af4158015611365573d6000803e3d6000fd5b505050505050505050565b61137c84848484613128565b600973__$362cfe25f3e11228b53aea52cf811ef65a$__63a32ae44d909143876040518463ffffffff1660e01b81526004016113ba93929190614bd6565b60006040518083038186803b1580156113d257600080fd5b505af41580156113e6573d6000803e3d6000fd5b50505050600973__$362cfe25f3e11228b53aea52cf811ef65a$__633e9e174a909186866040518463ffffffff1660e01b815260040161142893929190614b9f565b60006040518083038186803b15801561144057600080fd5b505af4158015611454573d6000803e3d6000fd5b5050505050505050565b6000806000838152602001908152602001600020600101549050919050565b600160000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166115125760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161150991906148a5565b60405180910390fd5b600973__$362cfe25f3e11228b53aea52cf811ef65a$__63cfabf395909143856040518463ffffffff1660e01b815260040161155093929190614bd6565b60006040518083038186803b15801561156857600080fd5b505af415801561157c573d6000803e3d6000fd5b50505050600973__$362cfe25f3e11228b53aea52cf811ef65a$__63eb5df71c909184846040518463ffffffff1660e01b81526004016115be93929190614b9f565b60006040518083038186803b1580156115d657600080fd5b505af41580156115ea573d6000803e3d6000fd5b505050505050565b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561166457600d6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161165b91906148a5565b60405180910390fd5b600160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615806117135750600160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b156117565760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161174d91906148a5565b60405180910390fd5b6000600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63bde290fb9091600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878660008060006040518863ffffffff1660e01b81526004016117c29796959493929190614a52565b604080518083038186803b1580156117d957600080fd5b505af41580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611811919061438b565b915050600081141561185b5760066040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161185291906148a5565b60405180910390fd5b60008773ffffffffffffffffffffffffffffffffffffffff166355a1ac2e86856040518363ffffffff1660e01b81526004016118989291906147e7565b604080518083038186803b1580156118af57600080fd5b505afa1580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e7919061438b565b91505060006119018260055461337e90919063ffffffff16565b9050808511156119495760086040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161194091906148a5565b60405180910390fd5b505050505050505050565b61195d8261145e565b61196e81611969613083565b61308b565b61197883836133a7565b505050565b611985613083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146119f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e99061499a565b60405180910390fd5b6119fc8282613487565b5050565b6000801b611a1581611a10613083565b61308b565b6000600160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff1615611ab05760026040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611aa791906148a5565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1663b72ddee96040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0d57600080fd5b505afa158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b45919061426a565b73ffffffffffffffffffffffffffffffffffffffff1614611b9e5760076040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611b9591906148a5565b60405180910390fd5b60018160020160006101000a81548160ff02191690831515021790555085816003018190555084816000019080519060200190611bdc929190613915565b5083816001019080519060200190611bf5929190613915565b50828160040160006101000a81548160ff021916908360ff1602179055506008879080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f87604051611ca59190614790565b60405180910390a150505050505050565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b158015611d3d57600080fd5b505afa158015611d51573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611d7a91906142bc565b6040518263ffffffff1660e01b8152600401611d9691906148e9565b60206040518083038186803b158015611dae57600080fd5b505afa158015611dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de69190614326565b90506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b158015611e6e57600080fd5b505afa158015611e82573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611eab91906142bc565b6040518263ffffffff1660e01b8152600401611ec791906148e9565b60206040518083038186803b158015611edf57600080fd5b505afa158015611ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f179190614326565b90506000611f788584600160000160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16613568565b90506000611fd98284600160000160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff166135c7565b9050611ff06006548261337e90919063ffffffff16565b9450505050509392505050565b600160000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166120925760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161208991906148a5565b60405180910390fd5b61209d816002612f2a565b600973__$362cfe25f3e11228b53aea52cf811ef65a$__63a32ae44d909143866040518463ffffffff1660e01b81526004016120db93929190614bd6565b60006040518083038186803b1580156120f357600080fd5b505af4158015612107573d6000803e3d6000fd5b50505050600973__$362cfe25f3e11228b53aea52cf811ef65a$__633e9e174a909185856040518463ffffffff1660e01b815260040161214993929190614b9f565b60006040518083038186803b15801561216157600080fd5b505af4158015612175573d6000803e3d6000fd5b50505050505050565b6000600167ffffffffffffffff8111156121c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156121ef5781602001602082028036833780820191505090505b509050828160008151811061222d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600973__$362cfe25f3e11228b53aea52cf811ef65a$__633d00bbe59091436001600001858760018060016040518963ffffffff1660e01b81526004016122b5989796959493929190614c52565b60006040518083038186803b1580156122cd57600080fd5b505af41580156122e1573d6000803e3d6000fd5b50505050505050565b6000801b6122ff816122fa613083565b61308b565b81600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe4188260405161236f9190614790565b60405180910390a15050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6123ab8282612f2a565b5050565b60065481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600160000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166124b45760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016124ab91906148a5565b60405180910390fd5b600973__$362cfe25f3e11228b53aea52cf811ef65a$__63f54529ae909143856040518463ffffffff1660e01b81526004016124f293929190614bd6565b60006040518083038186803b15801561250a57600080fd5b505af415801561251e573d6000803e3d6000fd5b50505050600973__$362cfe25f3e11228b53aea52cf811ef65a$__6303ef12f4909184846040518463ffffffff1660e01b815260040161256093929190614b9f565b60006040518083038186803b15801561257857600080fd5b505af415801561258c573d6000803e3d6000fd5b505050505050565b6060600880548060200260200160405190810160405280929190818152602001828054801561261857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116125ce575b5050505050905090565b600080600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63bde290fb9091600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878760008060006040518863ffffffff1660e01b815260040161268f9796959493929190614a52565b604080518083038186803b1580156126a657600080fd5b505af41580156126ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126de919061438b565b915091509250929050565b6000801b81565b606080600080600080600160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1661278e5760016040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161278591906148a5565b60405180910390fd5b6000600160000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001816001018260020160009054906101000a900460ff1683600301548460040160009054906101000a900460ff168c858054612812906152eb565b80601f016020809104026020016040519081016040528092919081815260200182805461283e906152eb565b801561288b5780601f106128605761010080835404028352916020019161288b565b820191906000526020600020905b81548152906001019060200180831161286e57829003601f168201915b5050505050955084805461289e906152eb565b80601f01602080910402602001604051908101604052809291908181526020018280546128ca906152eb565b80156129175780601f106128ec57610100808354040283529160200191612917565b820191906000526020600020905b8154815290600101906020018083116128fa57829003601f168201915b505050505094509650965096509650965096505091939550919395565b6000801b61294981612944613083565b61308b565b816006819055505050565b6129e48160088054806020026020016040519081016040528092919081815260200182805480156129da57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612990575b505050505061217e565b50565b600881815481106129f757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b612a3b81612a36613083565b61308b565b6000600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160020160009054906101000a900460ff1615151415612add5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612ad491906148a5565b60405180910390fd5b60011515600973__$362cfe25f3e11228b53aea52cf811ef65a$__6353962db490914388886040518563ffffffff1660e01b8152600401612b219493929190614c0d565b60206040518083038186803b158015612b3957600080fd5b505af4158015612b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7191906141b3565b15151415612bb3577fdbe1acf0f191a9aecba27ad74b59bb70426fe3f6129596f53b0f03a230c083238484604051612baa9291906147e7565b60405180910390a15b50505050565b60098060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b612bee8261145e565b612bff81612bfa613083565b61308b565b612c098383613487565b505050565b60008060001b612c2581612c20613083565b61308b565b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16612cba5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612cb191906148a5565b60405180910390fd5b826001800160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b08484604051612d449291906147ab565b60405180910390a18291505092915050565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612dc857600d6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612dbf91906148a5565b60405180910390fd5b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161580612e775750600160000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b15612eba5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612eb191906148a5565b60405180910390fd5b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073__$90f1fa1b3f91137ac60e95891d324fdd69$__63da4b8a4c4285600760009054906101000a900460ff166040518463ffffffff1660e01b8152600401612f7693929190614d3d565b60206040518083038186803b158015612f8e57600080fd5b505af4158015612fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc69190614293565b9050816003811115613001577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600381111561303a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461307e5780826040517f34e2603a0000000000000000000000000000000000000000000000000000000081526004016130759291906148c0565b60405180910390fd5b505050565b600033905090565b61309582826123b5565b613124576130ba8173ffffffffffffffffffffffffffffffffffffffff16601461361b565b6130c88360001c602061361b565b6040516020016130d9929190614756565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161311b91906148e9565b60405180910390fd5b5050565b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166131bd5760016040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016131b491906148a5565b60405180910390fd5b6131c8816001612f2a565b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff1661327257613378565b6000600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63bde290fb9091600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687868a8960006040518863ffffffff1660e01b81526004016132dd9796959493929190614b30565b604080518083038186803b1580156132f457600080fd5b505af4158015613308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332c919061438b565b91505060008111156133765760056040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161336d91906148a5565b60405180910390fd5b505b50505050565b6000670de0b6b3a764000082846133959190615108565b61339f9190614f66565b905092915050565b6133b182826123b5565b61348357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613428613083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61349182826123b5565b1561356457600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613509613083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008082600a6135789190614fea565b9050600081670de0b6b3a7640000876135919190615108565b61359b9190614f66565b9050670de0b6b3a764000085826135b29190615108565b6135bc9190614f66565b925050509392505050565b6000670de0b6b3a764000082600a6135df9190614fea565b84670de0b6b3a7640000876135f49190615108565b6135fe9190614f66565b6136089190615108565b6136129190614f66565b90509392505050565b60606000600283600261362e9190615108565b6136389190614f10565b67ffffffffffffffff811115613677577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156136a95781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613707577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613791577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026137d19190615108565b6137db9190614f10565b90505b60018111156138c7577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613843577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110613880577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806138c0906152c1565b90506137de565b506000841461390b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139029061497a565b60405180910390fd5b8091505092915050565b828054613921906152eb565b90600052602060002090601f016020900481019282613943576000855561398a565b82601f1061395c57805160ff191683800117855561398a565b8280016001018555821561398a579182015b8281111561398957825182559160200191906001019061396e565b5b509050613997919061399b565b5090565b5b808211156139b457600081600090555060010161399c565b5090565b60006139cb6139c684614ddd565b614db8565b905080838252602082019050828560208602820111156139ea57600080fd5b60005b85811015613a1a5781613a008882613b0c565b8452602084019350602083019250506001810190506139ed565b5050509392505050565b6000613a37613a3284614e09565b614db8565b90508083825260208201905082856020860282011115613a5657600080fd5b60005b85811015613a865781613a6c8882613d05565b845260208401935060208301925050600181019050613a59565b5050509392505050565b6000613aa3613a9e84614e35565b614db8565b905082815260208101848484011115613abb57600080fd5b613ac684828561527f565b509392505050565b6000613ae1613adc84614e35565b614db8565b905082815260208101848484011115613af957600080fd5b613b0484828561528e565b509392505050565b600081359050613b1b816155bb565b92915050565b60008083601f840112613b3357600080fd5b8235905067ffffffffffffffff811115613b4c57600080fd5b602083019150836020820283011115613b6457600080fd5b9250929050565b600082601f830112613b7c57600080fd5b8135613b8c8482602086016139b8565b91505092915050565b60008083601f840112613ba757600080fd5b8235905067ffffffffffffffff811115613bc057600080fd5b602083019150836020820283011115613bd857600080fd5b9250929050565b600082601f830112613bf057600080fd5b8151613c00848260208601613a24565b91505092915050565b600081359050613c18816155d2565b92915050565b600081519050613c2d816155d2565b92915050565b600081359050613c42816155e9565b92915050565b600081359050613c5781615600565b92915050565b600081519050613c6c81615617565b92915050565b600081359050613c818161562e565b92915050565b600081519050613c968161562e565b92915050565b600082601f830112613cad57600080fd5b8135613cbd848260208601613a90565b91505092915050565b600082601f830112613cd757600080fd5b8151613ce7848260208601613ace565b91505092915050565b600081359050613cff8161563e565b92915050565b600081519050613d148161563e565b92915050565b600081359050613d2981615655565b92915050565b600060208284031215613d4157600080fd5b6000613d4f84828501613b0c565b91505092915050565b60008060408385031215613d6b57600080fd5b6000613d7985828601613b0c565b9250506020613d8a85828601613b0c565b9150509250929050565b60008060008060808587031215613daa57600080fd5b6000613db887828801613b0c565b9450506020613dc987828801613b0c565b9350506040613dda87828801613b0c565b9250506060613deb87828801613b0c565b91505092959194509250565b60008060008060008060c08789031215613e1057600080fd5b6000613e1e89828a01613b0c565b9650506020613e2f89828a01613b0c565b9550506040613e4089828a01613b0c565b9450506060613e5189828a01613b0c565b9350506080613e6289828a01613cf0565b92505060a0613e7389828a01613cf0565b9150509295509295509295565b600080600060608486031215613e9557600080fd5b6000613ea386828701613b0c565b9350506020613eb486828701613b0c565b9250506040613ec586828701613cf0565b9150509250925092565b60008060008060808587031215613ee557600080fd5b6000613ef387828801613b0c565b9450506020613f0487828801613b0c565b9350506040613f1587828801613cf0565b9250506060613f2687828801613cf0565b91505092959194509250565b60008060408385031215613f4557600080fd5b6000613f5385828601613b0c565b925050602083013567ffffffffffffffff811115613f7057600080fd5b613f7c85828601613b6b565b9150509250929050565b60008060408385031215613f9957600080fd5b6000613fa785828601613b0c565b9250506020613fb885828601613c09565b9150509250929050565b60008060408385031215613fd557600080fd5b6000613fe385828601613b0c565b9250506020613ff485828601613cf0565b9150509250929050565b600080600080600060a0868803121561401657600080fd5b600061402488828901613b0c565b955050602061403588828901613cf0565b945050604086013567ffffffffffffffff81111561405257600080fd5b61405e88828901613c9c565b935050606086013567ffffffffffffffff81111561407b57600080fd5b61408788828901613c9c565b925050608061409888828901613d1a565b9150509295509295909350565b600080600080604085870312156140bb57600080fd5b600085013567ffffffffffffffff8111156140d557600080fd5b6140e187828801613b21565b9450945050602085013567ffffffffffffffff81111561410057600080fd5b61410c87828801613b95565b925092505092959194509250565b60008060006040848603121561412f57600080fd5b600084013567ffffffffffffffff81111561414957600080fd5b61415586828701613b21565b9350935050602061416886828701613cf0565b9150509250925092565b60006020828403121561418457600080fd5b600082015167ffffffffffffffff81111561419e57600080fd5b6141aa84828501613bdf565b91505092915050565b6000602082840312156141c557600080fd5b60006141d384828501613c1e565b91505092915050565b6000602082840312156141ee57600080fd5b60006141fc84828501613c33565b91505092915050565b6000806040838503121561421857600080fd5b600061422685828601613c33565b925050602061423785828601613b0c565b9150509250929050565b60006020828403121561425357600080fd5b600061426184828501613c48565b91505092915050565b60006020828403121561427c57600080fd5b600061428a84828501613c5d565b91505092915050565b6000602082840312156142a557600080fd5b60006142b384828501613c87565b91505092915050565b6000602082840312156142ce57600080fd5b600082015167ffffffffffffffff8111156142e857600080fd5b6142f484828501613cc6565b91505092915050565b60006020828403121561430f57600080fd5b600061431d84828501613cf0565b91505092915050565b60006020828403121561433857600080fd5b600061434684828501613d05565b91505092915050565b6000806040838503121561436257600080fd5b600061437085828601613cf0565b925050602061438185828601613c72565b9150509250929050565b6000806040838503121561439e57600080fd5b60006143ac85828601613d05565b92505060206143bd85828601613d05565b9150509250929050565b60006143d3838361440f565b60208301905092915050565b60006143eb838361443c565b60208301905092915050565b6000614403838361470b565b60208301905092915050565b61441881615162565b82525050565b61442781615162565b82525050565b61443681615162565b82525050565b61444581615162565b82525050565b600061445682614e86565b6144608185614ec1565b935061446b83614e66565b8060005b8381101561449c57815161448388826143c7565b975061448e83614ea7565b92505060018101905061446f565b5085935050505092915050565b60006144b482614e86565b6144be8185614ed2565b93506144c983614e66565b8060005b838110156144fa5781516144e188826143df565b97506144ec83614ea7565b9250506001810190506144cd565b5085935050505092915050565b600061451282614e91565b61451c8185614ee3565b935061452783614e76565b8060005b8381101561455857815161453f88826143f7565b975061454a83614eb4565b92505060018101905061452b565b5085935050505092915050565b61456e81615174565b82525050565b61457d81615174565b82525050565b61458c81615180565b82525050565b61459b81615225565b82525050565b6145aa81615225565b82525050565b6145b981615249565b82525050565b6145c88161525b565b82525050565b8082525050565b6145de8161526d565b82525050565b60006145ef82614e9c565b6145f98185614ef4565b935061460981856020860161528e565b61461281615482565b840191505092915050565b600061462882614e9c565b6146328185614f05565b935061464281856020860161528e565b80840191505092915050565b600061465b602083614ef4565b9150614666826154a0565b602082019050919050565b600061467e600683614ef4565b9150614689826154c9565b602082019050919050565b60006146a1601783614f05565b91506146ac826154f2565b601782019050919050565b60006146c4601183614f05565b91506146cf8261551b565b601182019050919050565b60006146e7602f83614ef4565b91506146f282615544565b604082019050919050565b8082525050565b8082525050565b6147148161520e565b82525050565b6147238161520e565b82525050565b6147328161520e565b82525050565b61474181615218565b82525050565b61475081615218565b82525050565b600061476182614694565b915061476d828561461d565b9150614778826146b7565b9150614784828461461d565b91508190509392505050565b60006020820190506147a5600083018461441e565b92915050565b60006060820190506147c0600083018561441e565b81810360208301526147d181614671565b90506147e06040830184614565565b9392505050565b60006040820190506147fc600083018561441e565b614809602083018461471a565b9392505050565b6000602082019050818103600083015261482a818461444b565b905092915050565b6000602082019050818103600083015261484c8184614507565b905092915050565b60006020820190506148696000830184614565565b92915050565b60006020820190506148846000830184614583565b92915050565b600060208201905061489f6000830184614592565b92915050565b60006020820190506148ba60008301846145b0565b92915050565b60006040820190506148d560008301856145bf565b6148e260208301846145bf565b9392505050565b6000602082019050818103600083015261490381846145e4565b905092915050565b600060c082019050818103600083015261492581896145e4565b9050818103602083015261493981886145e4565b90506149486040830187614565565b614955606083018661471a565b6149626080830185614738565b61496f60a083018461441e565b979650505050505050565b600060208201905081810360008301526149938161464e565b9050919050565b600060208201905081810360008301526149b3816146da565b9050919050565b60006080820190506149cf60008301876146fd565b6149dc602083018661442d565b6149e9604083018561442d565b6149f66060830184614729565b95945050505050565b600060a082019050614a1460008301886146fd565b614a21602083018761442d565b614a2e604083018661442d565b614a3b6060830185614729565b614a486080830184614729565b9695505050505050565b600060e082019050614a67600083018a6146fd565b614a7460208301896145a1565b614a81604083018861442d565b614a8e6060830187614729565b614a9b608083018661442d565b614aa860a08301856145d5565b614ab560c08301846145d5565b98975050505050505050565b600060e082019050614ad6600083018a6146fd565b614ae360208301896145a1565b614af0604083018861442d565b614afd6060830187614729565b614b0a608083018661442d565b614b1760a08301856145d5565b614b2460c0830184614729565b98975050505050505050565b600060e082019050614b45600083018a6146fd565b614b5260208301896145a1565b614b5f604083018861442d565b614b6c6060830187614729565b614b79608083018661442d565b614b8660a0830185614729565b614b9360c08301846145d5565b98975050505050505050565b6000606082019050614bb46000830186614704565b614bc1602083018561442d565b614bce604083018461442d565b949350505050565b6000606082019050614beb6000830186614704565b614bf86020830185614729565b614c05604083018461442d565b949350505050565b6000608082019050614c226000830187614704565b614c2f6020830186614729565b614c3c604083018561442d565b614c496060830184614729565b95945050505050565b600061010082019050614c68600083018b614704565b614c75602083018a614729565b614c8260408301896145ce565b8181036060830152614c9481886144a9565b90508181036080830152614ca881876144a9565b9050614cb760a0830186614574565b614cc460c0830185614574565b614cd160e0830184614574565b9998505050505050505050565b6000602082019050614cf36000830184614729565b92915050565b6000602082019050614d0e600083018461471a565b92915050565b6000604082019050614d29600083018561471a565b614d36602083018461471a565b9392505050565b6000606082019050614d526000830186614729565b614d5f6020830185614729565b614d6c6040830184614747565b949350505050565b6000604082019050614d896000830185614729565b614d966020830184614747565b9392505050565b6000602082019050614db26000830184614738565b92915050565b6000614dc2614dd3565b9050614dce828261531d565b919050565b6000604051905090565b600067ffffffffffffffff821115614df857614df7615453565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614e2457614e23615453565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614e5057614e4f615453565b5b614e5982615482565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614f1b8261520e565b9150614f268361520e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614f5b57614f5a615397565b5b828201905092915050565b6000614f718261520e565b9150614f7c8361520e565b925082614f8c57614f8b6153c6565b5b828204905092915050565b6000808291508390505b6001851115614fe157808604811115614fbd57614fbc615397565b5b6001851615614fcc5780820291505b8081029050614fda85615493565b9450614fa1565b94509492505050565b6000614ff58261520e565b915061500083615218565b925061502d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615035565b905092915050565b6000826150455760019050615101565b816150535760009050615101565b81600181146150695760028114615073576150a2565b6001915050615101565b60ff84111561508557615084615397565b5b8360020a91508482111561509c5761509b615397565b5b50615101565b5060208310610133831016604e8410600b84101617156150d75782820a9050838111156150d2576150d1615397565b5b615101565b6150e48484846001614f97565b925090508184048111156150fb576150fa615397565b5b81810290505b9392505050565b60006151138261520e565b915061511e8361520e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561515757615156615397565b5b828202905092915050565b600061516d826151ee565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006151c182615162565b9050919050565b60008190506151d682615593565b919050565b60008190506151e9826155a7565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061523082615237565b9050919050565b6000615242826151ee565b9050919050565b6000615254826151c8565b9050919050565b6000615266826151db565b9050919050565b60006152788261520e565b9050919050565b82818337600083830152505050565b60005b838110156152ac578082015181840152602081019050615291565b838111156152bb576000848401525b50505050565b60006152cc8261520e565b915060008214156152e0576152df615397565b5b600182039050919050565b6000600282049050600182168061530357607f821691505b6020821081141561531757615316615424565b5b50919050565b61532682615482565b810181811067ffffffffffffffff8211171561534557615344615453565b5b80604052505050565b60006153598261520e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561538c5761538b615397565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f426f72726f770000000000000000000000000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601a81106155a4576155a36153f5565b5b50565b600481106155b8576155b76153f5565b5b50565b6155c481615162565b81146155cf57600080fd5b50565b6155db81615174565b81146155e657600080fd5b50565b6155f281615180565b81146155fd57600080fd5b50565b6156098161518a565b811461561457600080fd5b50565b615620816151b6565b811461562b57600080fd5b50565b6004811061563b57600080fd5b50565b6156478161520e565b811461565257600080fd5b50565b61565e81615218565b811461566957600080fd5b5056fea2646970667358221220de183c143245bedf5aa454f58132d4a9ce73d29e054c81bcadab85dc13776c4664736f6c63430008040033",
  "libraries": {
    "TSUtils": "0xf6780c6eCFbF39CE58ac293dC2F00da27c91df4E",
    "DecimalMath": "0x687Daa40FEc9A0Bad9a4153787cd1F295f4abc33",
    "ExaLib": "0xDD82cCC242A1F88EC2c02b0986E15E71897B7fc7",
    "MarketsLib": "0x5F5A5531CF864FA2BB97A7d455E0850d8ea27922"
  },
  "devdoc": {
    "events": {
      "ActionPaused(address,string,bool)": {
        "params": {
          "action": "string describing the action that has been paused/re-enabled",
          "fixedLender": "address of the market that a certain feature has been paused/re-enabled",
          "paused": "boolean describing if the action has been paused or re-enabled"
        }
      },
      "DistributedMPBorrowerExa(address,address,uint256,uint256)": {
        "params": {
          "borrower": "address of the borrower that have received rewards in a given fixedLender space",
          "exaMPBorrowIndex": "index of the given market that was used to update user rewards",
          "fixedLender": "address of the fixed lender market in which a user has received rewards",
          "mpBorrowerDelta": "delta blocks that have been processed"
        }
      },
      "DistributedMPSupplierExa(address,address,uint256,uint256)": {
        "params": {
          "exaMPSupplyIndex": "index of the given market that was used to update user rewards",
          "fixedLender": "address of the fixed lender market in which a user has received rewards",
          "mpSupplierDelta": "delta blocks that have been processed",
          "supplier": "address of the supplier that have received rewards in a given lender space"
        }
      },
      "DistributedSPSupplierExa(address,address,uint256,uint256)": {
        "params": {
          "exaSPSupplyIndex": "index of the given market that was used to update user rewards",
          "fixedLender": "address of the fixed lender market in which a user has received rewards",
          "spSupplierDelta": "delta blocks that have been processed",
          "supplier": "address of the supplier that have received rewards in a given lender space"
        }
      },
      "ExaSpeedUpdated(address,uint256)": {
        "params": {
          "fixedLenderAddress": "address of the lender that has a new borrow cap",
          "newSpeed": "new borrow cap expressed with 1e18 precision for the given market."
        }
      },
      "MarketEntered(address,address,uint256)": {
        "params": {
          "account": "address of the user that just entered a market",
          "fixedLender": "address of the market that the user entered",
          "maturityDate": "dateID/poolID/maturity that the user just entered"
        }
      },
      "MarketExited(address,address,uint256)": {
        "params": {
          "account": "address of the user that just left a market",
          "fixedLender": "address of the market that the user just left",
          "maturityDate": "dateID/poolID/maturity that the user just left"
        }
      },
      "MarketListed(address)": {
        "params": {
          "fixedLender": "address of the fixedLender market that it was listed"
        }
      },
      "NewBorrowCap(address,uint256)": {
        "params": {
          "fixedLender": "address of the lender that has a new borrow cap",
          "newBorrowCap": "new borrow cap expressed with 1e18 precision for the given market.                     0 = means no cap"
        }
      },
      "OracleChanged(address)": {
        "params": {
          "newOracle": "address of the new oracle that is used to calculate liquidity"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "beforeBorrowMP(address,address,uint256,uint256)": {
        "details": "Hook function to be called before someone borrows money to a market/maturity.      This function verifies if market is valid, maturity is valid, checks if the user has enough collateral      and accrues rewards accordingly.",
        "params": {
          "borrowAmount": "amount that will be lent out to the borrower (expressed with same precision as underlying)",
          "borrower": "address of the user that will borrow money from a maturity date",
          "fixedLenderAddress": "address of the fixedLender that will lend money in a maturity",
          "maturityDate": "timestamp for the maturity date that the user wants to borrow money. It should                     be in a VALID state (meaning that is not in the distant future, nor matured)"
        }
      },
      "beforeDepositMP(address,address,uint256)": {
        "details": "Hook function to be called before someone supplies money to a market/maturity.      This function verifies if market is valid, maturity is valid, and accrues rewards accordingly.",
        "params": {
          "fixedLenderAddress": "address of the fixedLender that will deposit money in a maturity",
          "maturityDate": "timestamp for the maturity date that the user wants to supply money. It should                     be in a VALID state (meaning that is not in the distant future, nor matured)",
          "supplier": "address of the user that will supply money to a certain maturity (it can be later on                 used as collater with _enterMarkets_ functions)"
        }
      },
      "beforeRepayMP(address,address)": {
        "details": "Hook function to be called before someone wants to repay its debt in a market/maturity.      This function verifies if market is valid, maturity is MATURED and accrues rewards accordingly.      This function is called from fixedLender contracts.",
        "params": {
          "borrower": "address of the user that wants to repay its debt",
          "fixedLenderAddress": "address of the fixedLender that will collect money in a maturity"
        }
      },
      "beforeSupplySP(address,address)": {
        "details": "Hook function to be called before someone supplies money to the smart pool      This function basically checks if the address of the fixed Lender market is      valid and makes sure to accrue EXA tokens to the market and the user.",
        "params": {
          "fixedLenderAddress": "address of the fixed lender that will receive money in                           it's smart pool",
          "supplier": "address of the user that will supply money to the smart pool"
        }
      },
      "beforeWithdrawMP(address,address,uint256,uint256)": {
        "details": "Hook function to be called before someone wants to receive its money back from a market/maturity.      This function verifies if market is valid, maturity is MATURED, checks if the user has no outstanding      debts and accrues rewards accordingly. This function is called from fixedLender contracts.",
        "params": {
          "fixedLenderAddress": "address of the fixedLender that will lend money in a maturity",
          "maturityDate": "timestamp for the maturity date that the user wants to get it's money from. It should                     be in a MATURED state (meaning that the date is VALID + MATURED)",
          "redeemAmount": "amount that the user wants to withdraw from the maturity",
          "redeemer": "address of the user that wants to withdraw it's money"
        }
      },
      "beforeWithdrawSP(address,address)": {
        "details": "Hook function to be called before someone withdraws money from the smart pool      This function basically checks if the address of the fixed Lender market is      valid and makes sure to accrue EXA tokens to the market and the user.",
        "params": {
          "fixedLenderAddress": "address of the fixed lender that will receive money in                           it's smart pool",
          "supplier": "address of the user that will withdraw money from the smart pool"
        }
      },
      "claimExa(address,address[])": {
        "params": {
          "fixedLenders": "The list of markets to claim EXA in",
          "holder": "The address to claim EXA for"
        }
      },
      "claimExaAll(address)": {
        "params": {
          "holder": "The address to claim EXA for"
        }
      },
      "enableMarket(address,uint256,string,string,uint8)": {
        "details": "Function to enable a certain FixedLender market to be used as collateral",
        "params": {
          "collateralFactor": "fixedLender's collateral factor for the underlying asset",
          "fixedLender": "address to add to the protocol"
        }
      },
      "enterMarkets(address[],uint256)": {
        "details": "Allows wallet to enter certain markets (fixedLenderDAI, fixedLenderETH, etc)      By performing this action, the wallet's money could be used as collateral",
        "params": {
          "fixedLenders": "contracts addresses to enable for `msg.sender` for a certain maturity",
          "maturityDate": "poolID in which the fixedLenders will be enabled"
        }
      },
      "exitMarket(address,uint256)": {
        "details": "Sender must not have an outstanding borrow balance in the asset,      or be providing necessary collateral for an outstanding borrow.",
        "params": {
          "fixedLenderAddress": "The address of the asset to be removed",
          "maturityDate": "The timestamp/poolID where the user wants to stop providing collateral"
        }
      },
      "getAccountLiquidity(address,uint256)": {
        "details": "Function to get account's liquidity for a certain maturity pool",
        "params": {
          "account": "wallet to retrieve liquidity for a certain maturity date",
          "maturityDate": "timestamp to calculate maturity's pool"
        }
      },
      "getFuturePools()": {
        "details": "Function to retrieve valid future pools"
      },
      "getMarketAddresses()": {
        "details": "Function to retrieve all markets"
      },
      "getMarketData(address)": {
        "details": "Given a fixedLender address, it returns the corresponding market data",
        "params": {
          "fixedLenderAddress": "Address of the contract where we are getting the data"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidateAllowed(address,address,address,address,uint256,uint256)": {
        "details": "Function to allow/reject liquidation of assets. This function can be called      externally, but only will have effect when called from a fixedLender.",
        "params": {
          "borrower": "address which the assets are being liquidated",
          "fixedLenderBorrowed": "market from where the debt is pending",
          "fixedLenderCollateral": "market where the assets will be liquidated (should be msg.sender on FixedLender.sol)",
          "liquidator": "address that is liquidating the assets",
          "maturityDate": "maturity where the position has a shortfall in liquidity",
          "repayAmount": "amount to be repaid from the debt (outstanding debt * close factor should be bigger than this value)"
        }
      },
      "liquidateCalculateSeizeAmount(address,address,uint256)": {
        "details": "Function to calculate the amount of assets to be seized      - when a position is undercollaterized it should be repaid and this functions calculates the        amount of collateral to be seized",
        "params": {
          "actualRepayAmount": "repay amount in the borrowed asset",
          "fixedLenderBorrowed": "market from where the debt is pending",
          "fixedLenderCollateral": "market where the assets will be liquidated (should be msg.sender on FixedLender.sol)"
        }
      },
      "pauseBorrow(address,bool)": {
        "details": "Function to pause/unpause borrowing on a certain market",
        "params": {
          "fixedLender": "address to pause",
          "paused": "true/false"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "requirePoolState(uint256,uint8)": {
        "details": "Function to verify that a maturityDate is VALID, MATURED, NOT_READY or INVALID.      If expected state doesn't match the calculated one, it reverts with a custom error \"UnmatchedPoolState\".",
        "params": {
          "maturityDate": "timestamp of the maturity date to be verified",
          "requiredState": "state required by the caller to be verified (see TSUtils.State() for description)"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "seizeAllowed(address,address,address,address)": {
        "details": "Function to allow/reject seizing of assets. This function can be called      externally, but only will have effect when called from a fixedLender.",
        "params": {
          "borrower": "address to validate where the assets will be removed",
          "fixedLenderBorrowed": "market from where the debt will be paid",
          "fixedLenderCollateral": "market where the assets will be seized (should be msg.sender on FixedLender.sol)",
          "liquidator": "address to validate where the seized assets will be received"
        }
      },
      "setExaSpeed(address,uint256)": {
        "params": {
          "exaSpeed": "New EXA speed for market",
          "fixedLenderAddress": "The market whose EXA speed to update"
        }
      },
      "setLiquidationIncentive(uint256)": {
        "params": {
          "_liquidationIncentive": "new liquidation incentive. It's a factor, so 15% would be 1.15e18"
        }
      },
      "setMarketBorrowCaps(address[],uint256[])": {
        "params": {
          "fixedLenders": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "setOracle(address)": {
        "details": "Function to set Oracle's to be used",
        "params": {
          "_priceOracleAddress": "address of the new oracle"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ActionPaused(address,string,bool)": {
        "notice": "Event emitted when a certain action has been paused by the protocol"
      },
      "DistributedMPBorrowerExa(address,address,uint256,uint256)": {
        "notice": "Event emitted each time EXA has been distributed to a certain user as a maturity pool borrower"
      },
      "DistributedMPSupplierExa(address,address,uint256,uint256)": {
        "notice": "Event emitted each time EXA has been distributed to a certain user as a maturity pool supplier"
      },
      "DistributedSPSupplierExa(address,address,uint256,uint256)": {
        "notice": "Event emitted each time EXA has been distributed to a certain user as a smart pool supplier"
      },
      "ExaSpeedUpdated(address,uint256)": {
        "notice": "Event emitted when a new ExaSpeed has been set for a given fixedLender.         The speed is the amount of EXA tokens that it will be given to         suppliers/borrowers/lenders on each block. Amount distributed accordingly         to their contributions"
      },
      "MarketEntered(address,address,uint256)": {
        "notice": "Event emitted when a user enters a market to use his deposit as collateral         for a loan. Notice that the market entered is the pair fixedLender/maturityDate"
      },
      "MarketExited(address,address,uint256)": {
        "notice": "Event emitted when a user leaves a market. This means that he would stop using         his deposit as collateral and it won't ask for any loans in this market"
      },
      "MarketListed(address)": {
        "notice": "Event emitted when a new market is listed for borrow/lending"
      },
      "NewBorrowCap(address,uint256)": {
        "notice": "Event emitted when a new borrow cap has been set for a certain fixedLender         If newBorrowCap is 0, that means that there's no cap"
      },
      "OracleChanged(address)": {
        "notice": "Event emitted when a new Oracle has been set"
      }
    },
    "kind": "user",
    "methods": {
      "claimExa(address,address[])": {
        "notice": "Claim all the EXA accrued by holder in the specified markets"
      },
      "claimExaAll(address)": {
        "notice": "Claim all the EXA accrued by holder in all markets"
      },
      "exitMarket(address,uint256)": {
        "notice": "Removes fixedLender from sender's account liquidity calculation"
      },
      "setExaSpeed(address,uint256)": {
        "notice": "Set EXA speed for a single market"
      },
      "setLiquidationIncentive(uint256)": {
        "notice": "Set liquidation incentive for the whole ecosystem"
      },
      "setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given fixedLender markets. Borrowing that brings total borrows to or above borrow cap will revert."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3872,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "book",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Book)10975_storage"
      },
      {
        "astId": 3875,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "closeFactor",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3880,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "liquidationIncentive",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3883,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "maxFuturePools",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 3886,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "marketsAddresses",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3889,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "rewardsState",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(RewardsState)9716_storage"
      },
      {
        "astId": 3892,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "oracle",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IOracle)9420"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IFixedLender)9374)dyn_storage": {
        "base": "t_contract(IFixedLender)9374",
        "encoding": "dynamic_array",
        "label": "contract IFixedLender[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFixedLender)9374": {
        "encoding": "inplace",
        "label": "contract IFixedLender",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)9420": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_contract(IFixedLender)9374)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => contract IFixedLender[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_contract(IFixedLender)9374)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(ExaState)9704_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ExaLib.ExaState)",
        "numberOfBytes": "32",
        "value": "t_struct(ExaState)9704_storage"
      },
      "t_mapping(t_address,t_struct(Market)10992_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MarketsLib.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)10992_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_array(t_contract(IFixedLender)9374)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IFixedLender[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IFixedLender)9374)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Book)10975_storage": {
        "encoding": "inplace",
        "label": "struct MarketsLib.Book",
        "members": [
          {
            "astId": 10958,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "markets",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Market)10992_storage)"
          },
          {
            "astId": 10962,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "borrowPaused",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 10966,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "borrowCaps",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 10974,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "accountAssets",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_contract(IFixedLender)9374)dyn_storage))"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ExaState)9704_storage": {
        "encoding": "inplace",
        "label": "struct ExaLib.ExaState",
        "members": [
          {
            "astId": 9682,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaSpeed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9685,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaMPSupplyState",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(MarketRewardsState)9670_storage"
          },
          {
            "astId": 9688,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaMPBorrowState",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(MarketRewardsState)9670_storage"
          },
          {
            "astId": 9691,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaSPSupplyState",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(MarketRewardsState)9670_storage"
          },
          {
            "astId": 9695,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaMPSupplierIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9699,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaMPBorrowerIndex",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9703,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaSPSupplierIndex",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Market)10992_storage": {
        "encoding": "inplace",
        "label": "struct MarketsLib.Market",
        "members": [
          {
            "astId": 10977,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10979,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10981,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "isListed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 10983,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "collateralFactor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10985,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "decimals",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 10991,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "accountMembership",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(MarketRewardsState)9670_storage": {
        "encoding": "inplace",
        "label": "struct MarketRewardsState",
        "members": [
          {
            "astId": 9667,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 9669,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RewardsState)9716_storage": {
        "encoding": "inplace",
        "label": "struct ExaLib.RewardsState",
        "members": [
          {
            "astId": 9706,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9711,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaState",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(ExaState)9704_storage)"
          },
          {
            "astId": 9715,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "exaAccruedUser",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
