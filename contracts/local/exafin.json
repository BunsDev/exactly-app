{
  "address": "0xb390eAFa0fbA07bC2B49643683501584C33a709a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_underlyingTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_eTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_auditorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateModelAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "GenericError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        }
      ],
      "name": "AddReserves",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "BorrowFromMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "DepositToMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositToSmartPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtCovered",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "RepayToMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "SeizeAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromSmartPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auditor",
      "outputs": [
        {
          "internalType": "contract IAuditor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "borrowFromMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "depositToMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToSmartPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eToken",
      "outputs": [
        {
          "internalType": "contract IEToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "getAccountSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuditor",
      "outputs": [
        {
          "internalType": "contract IAuditor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "getTotalMpBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateModel",
      "outputs": [
        {
          "internalType": "contract IInterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IFixedLender",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maturityPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplied",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mpUserBorrowedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mpUserSuppliedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayToMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationFee",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplied",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMpBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalMpBorrowsUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMpDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalMpDepositsUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedUnderlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingTokenName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromSmartPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b8e415bd5f2c4502b6d89a4f7daa54811541f077b4af8d29c55f23e28b0dbd9",
  "receipt": {
    "to": null,
    "from": "0xEB1E881fc67987646597838d18fDF173691F25E7",
    "contractAddress": "0xb390eAFa0fbA07bC2B49643683501584C33a709a",
    "transactionIndex": 0,
    "gasUsed": "4700826",
    "logsBloom": "0x
    "blockHash": "0x0c040e545c171d75c9ee46bd11092892423aa7d4ac4486d9ce978368eb339826",
    "transactionHash": "0x6b8e415bd5f2c4502b6d89a4f7daa54811541f077b4af8d29c55f23e28b0dbd9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13757356,
        "transactionHash": "0x6b8e415bd5f2c4502b6d89a4f7daa54811541f077b4af8d29c55f23e28b0dbd9",
        "address": "0xb390eAFa0fbA07bC2B49643683501584C33a709a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eb1e881fc67987646597838d18fdf173691f25e7",
          "0x000000000000000000000000eb1e881fc67987646597838d18fdf173691f25e7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0c040e545c171d75c9ee46bd11092892423aa7d4ac4486d9ce978368eb339826"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13757356,
        "transactionHash": "0x6b8e415bd5f2c4502b6d89a4f7daa54811541f077b4af8d29c55f23e28b0dbd9",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b390eafa0fba07bc2b49643683501584c33a709a",
          "0x000000000000000000000000b390eafa0fba07bc2b49643683501584c33a709a"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x0c040e545c171d75c9ee46bd11092892423aa7d4ac4486d9ce978368eb339826"
      }
    ],
    "blockNumber": 13757356,
    "cumulativeGasUsed": "4700826",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "ETH",
    "0x37ef4ad938E01640156AC0d5D4e7656891949F04",
    "0xDC891752642e1e98C9e4b5060045FD7C8Db4fD92",
    "0xfdD353090EEb947bC6d75570F8B1288b9fe032aD"
  ],
  "solcInputHash": "5c87df12e29dc2079cea619578365c10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_underlyingTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_eTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auditorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateModelAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"GenericError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"AddReserves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"BorrowFromMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"DepositToMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToSmartPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtCovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"RepayToMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"SeizeAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromSmartPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"internalType\":\"contract IAuditor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"borrowFromMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"depositToMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToSmartPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eToken\",\"outputs\":[{\"internalType\":\"contract IEToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuditor\",\"outputs\":[{\"internalType\":\"contract IAuditor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"getTotalMpBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IFixedLender\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maturityPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mpUserBorrowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mpUserSuppliedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayToMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplied\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMpBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMpBorrowsUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMpDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMpDepositsUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedUnderlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"withdrawFromMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSmartPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AddReserves(address,uint256)\":{\"params\":{\"addAmount\":\"amount added as reserves as part of the liquidation event\",\"benefactor\":\"address added a certain amount to its reserves\"}},\"BorrowFromMaturityPool(address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"of the asset that it was borrowed\",\"commission\":\"is the amount extra that it will need to be paid at                   maturity\",\"maturityDate\":\"dateID/poolID/maturity in which the user will have                     to repay the loan\",\"to\":\"address which borrowed the asset\"}},\"DepositToMaturityPool(address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"of the asset that it was deposited\",\"commission\":\"is the amount extra that it will be collected at maturity\",\"from\":\"address which deposited the asset\",\"maturityDate\":\"dateID/poolID/maturity in which the user will be able                     to collect his deposit + his commission\"}},\"DepositToSmartPool(address,uint256)\":{\"params\":{\"amount\":\"amount added to the smart pool\",\"user\":\"address that added a certain amount to the smart pool\"}},\"LiquidateBorrow(address,address,uint256,address,uint256,uint256)\":{\"params\":{\"borrower\":\"address which had the original debt\",\"fixedLenderCollateral\":\"address of the asset that it was seized                              by the liquidator\",\"liquidator\":\"address which repaid the previously borrowed amount\",\"maturityDate\":\"poolID where the borrower had an uncollaterized position\",\"repayAmount\":\"amount of the asset that it was repaid\",\"seizedAmount\":\"amount seized of the collateral\"}},\"RepayToMaturityPool(address,address,uint256,uint256,uint256)\":{\"params\":{\"borrower\":\"address which had the original debt\",\"debtCovered\":\"amount of the debt that it was covered in this repayment\",\"maturityDate\":\"poolID where the user repaid its borrowed amounts\",\"payer\":\"address which repaid the previously borrowed amount\",\"penalty\":\"amount paid for penalties\"}},\"SeizeAsset(address,address,uint256,uint256)\":{\"params\":{\"borrower\":\"address which had the original debt\",\"liquidator\":\"address which seized this collateral\",\"maturityDate\":\"poolID where the borrower lost the amount of collateral\",\"seizedAmount\":\"amount seized of the collateral\"}},\"WithdrawFromMaturityPool(address,uint256,uint256)\":{\"params\":{\"amount\":\"of the asset that it was deposited\",\"from\":\"address which will be collecting the asset\",\"maturityDate\":\"poolID where the user collected its deposits\"}},\"WithdrawFromSmartPool(address,uint256)\":{\"params\":{\"amount\":\"amount withdrawn to the smart pool\",\"user\":\"address that withdrew a certain amount from the smart pool\"}}},\"kind\":\"dev\",\"methods\":{\"borrowFromMaturityPool(uint256,uint256)\":{\"details\":\"Lends to a wallet for a certain maturity date/pool\",\"params\":{\"amount\":\"amount to send to the msg.sender\",\"maturityDate\":\"maturity date for repayment\"}},\"depositToMaturityPool(uint256,uint256)\":{\"details\":\"Deposits a certain amount to the protocol for      a certain maturity date/pool\",\"params\":{\"amount\":\"amount to receive from the msg.sender\",\"maturityDate\":\"maturity date / pool ID\"}},\"depositToSmartPool(uint256)\":{\"details\":\"Deposits an `amount` of underlying asset into the smart pool, receiving in return overlying eTokens. - E.g. User deposits 100 USDC and gets in return 100 eUSDC\",\"params\":{\"amount\":\"The amount to be deposited\"}},\"getAccountSnapshot(address,uint256)\":{\"details\":\"Gets current snapshot for a wallet in a certain maturity\",\"params\":{\"maturityDate\":\"maturity date\",\"who\":\"wallet to return status snapshot in the specified maturity date\"}},\"getAuditor()\":{\"details\":\"Gets the auditor contract interface being used to validate positions\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalMpBorrows(uint256)\":{\"details\":\"Gets the total amount of borrowed money for a maturityDate\",\"params\":{\"maturityDate\":\"maturity date\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidate(address,uint256,address,uint256)\":{\"details\":\"Msg.sender liquidates a borrower's position and repays a certain amount of collateral      for a maturity date, seizing a part of borrower's collateral\",\"params\":{\"borrower\":\"wallet that has an outstanding debt for a certain maturity date\",\"fixedLenderCollateral\":\"address of fixedLender from which the collateral will be seized to give the liquidator\",\"maturityDate\":\"maturity date for which the position will be liquidated\",\"repayAmount\":\"amount to be repaid by liquidator(msg.sender)\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"repayToMaturityPool(address,uint256,uint256)\":{\"details\":\"The pool that the user is trying to repay to should be matured\",\"params\":{\"borrower\":\"The address of the account that has the debt\",\"maturityDate\":\"The matured date where the debt is located\",\"repayAmount\":\"amount to be paid for the borrower's debt\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"seize(address,address,uint256,uint256)\":{\"details\":\"Public function for liquidator to seize borrowers tokens in a certain maturity date.      This function will only be called from another FixedLender, on `liquidation` calls.      That's why msg.sender needs to be passed to the private function (to be validated as a market)\",\"params\":{\"borrower\":\"address from which the tokens will be seized\",\"liquidator\":\"address which will receive the seized tokens\",\"maturityDate\":\"maturity date from where the tokens will be removed. Used to remove liquidity.\",\"seizeAmount\":\"amount to be removed from borrower's posession\"}},\"setLiquidationFee(uint256)\":{\"details\":\"Sets the protocol's liquidation fee for the underlying asset of this fixedLender\",\"params\":{\"_liquidationFee\":\"fee that the protocol earns when position is liquidated\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawFromMaturityPool(address,uint256,uint256)\":{\"details\":\"The pool that the user is trying to retrieve the money should be matured\",\"params\":{\"maturityDate\":\"The matured date for which we're trying to retrieve the funds\",\"redeemAmount\":\"The number of underlying tokens to receive\",\"redeemer\":\"The address of the account which is redeeming the tokens\"}},\"withdrawFromSmartPool(uint256)\":{\"details\":\"Withdraws an `amount` of underlying asset from the smart pool, burning the equivalent eTokens owned - E.g. User has 100 eUSDC, calls withdraw() and receives 100 USDC, burning the 100 eUSDC\",\"params\":{\"amount\":\"The underlying amount to be withdrawn - Send the value type(uint256).max in order to withdraw the whole eToken balance\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AddReserves(address,uint256)\":{\"notice\":\"Event emitted reserves have been added to the protocol\"},\"BorrowFromMaturityPool(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a user borrows amount of an asset from a         certain maturity date\"},\"DepositToMaturityPool(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a user deposits an amount of an asset to a         certain maturity date collecting a commission at the end of the         period\"},\"DepositToSmartPool(address,uint256)\":{\"notice\":\"Event emitted when a user contributed to the smart pool\"},\"LiquidateBorrow(address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Event emitted when a user's position had a liquidation\"},\"RepayToMaturityPool(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a user repays its borrows after maturity\"},\"SeizeAsset(address,address,uint256,uint256)\":{\"notice\":\"Event emitted when a user's collateral has been seized\"},\"WithdrawFromMaturityPool(address,uint256,uint256)\":{\"notice\":\"Event emitted when a user collects its deposits after maturity\"},\"WithdrawFromSmartPool(address,uint256)\":{\"notice\":\"Event emitted when a user contributed to the smart pool\"}},\"kind\":\"user\",\"methods\":{\"liquidate(address,uint256,address,uint256)\":{\"notice\":\"Function to liquidate an uncollaterized position\"},\"repayToMaturityPool(address,uint256,uint256)\":{\"notice\":\"Sender repays an amount of borrower's debt for a maturity date\"},\"seize(address,address,uint256,uint256)\":{\"notice\":\"Public function to seize a certain amount of tokens\"},\"withdrawFromMaturityPool(address,uint256,uint256)\":{\"notice\":\"User collects a certain amount of underlying asset after having         supplied tokens until a certain maturity date\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FixedLender.sol\":\"FixedLender\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/EToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IEToken.sol\\\";\\nimport \\\"./interfaces/IFixedLender.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\n\\ncontract EToken is IEToken, AccessControl {\\n    using DecimalMath for uint256;\\n\\n    // totalSupply = smart pool's balance\\n    uint256 public override totalSupply;\\n    // index = totalSupply / totalScaledBalance\\n    uint256 private totalScaledBalance;\\n    // userBalance = userScaledBalance * index\\n    mapping(address => uint256) private userScaledBalance;\\n    mapping(address => uint256) private lastBalanceIncrease;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    string public override name;\\n    string public override symbol;\\n    uint8 public override decimals;\\n\\n    IFixedLender private fixedLender;\\n\\n    modifier onlyFixedLender() {\\n        if (msg.sender != address(fixedLender)) {\\n            revert GenericError(ErrorCode.CALLER_MUST_BE_FIXED_LENDER);\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev Mints `amount` eTokens to `user`\\n     * - Only callable by the FixedLender\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     */\\n    function mint(address user, uint256 amount)\\n        external\\n        override\\n        onlyFixedLender\\n    {\\n        require(user != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        uint256 scaledBalance = amount;\\n        if (totalSupply != 0) {\\n            scaledBalance = (scaledBalance * totalScaledBalance) / totalSupply;\\n        }\\n\\n        userScaledBalance[user] += scaledBalance;\\n        totalScaledBalance += scaledBalance;\\n        totalSupply += amount;\\n        lastBalanceIncrease[user] = block.number;\\n\\n        emit Transfer(address(0), user, amount);\\n    }\\n\\n    /**\\n     * @dev Increases contract earnings\\n     * - Only callable by the FixedLender\\n     * @param amount The amount of underlying tokens deposited\\n     */\\n    function accrueEarnings(uint256 amount) external override onlyFixedLender {\\n        totalSupply += amount;\\n        emit EarningsAccrued(amount);\\n    }\\n\\n    /**\\n     * @dev Burns eTokens from `user`\\n     * - Only callable by the FixedLender\\n     * @param user The owner of the eTokens, getting them burned\\n     * @param amount The amount being burned\\n     */\\n    function burn(address user, uint256 amount)\\n        external\\n        override\\n        onlyFixedLender\\n    {\\n        require(user != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        if (lastBalanceIncrease[user] >= block.number) {\\n            revert GenericError(ErrorCode.SMART_POOL_FUNDS_LOCKED);\\n        }\\n\\n        require(\\n            balanceOf(user) >= amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n\\n        uint256 scaledWithdrawAmount = (amount * totalScaledBalance) /\\n            totalSupply;\\n\\n        totalScaledBalance -= scaledWithdrawAmount;\\n        userScaledBalance[user] -= scaledWithdrawAmount;\\n        totalSupply -= amount;\\n\\n        emit Transfer(user, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets the FixedLender where this eToken is used\\n     * - Only able to set the FixedLender once\\n     * @param fixedLenderAddress The address of the FixedLender that uses this eToken\\n     */\\n    function setFixedLender(address fixedLenderAddress)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (address(fixedLender) != address(0)) {\\n            revert GenericError(ErrorCode.FIXED_LENDER_ALREADY_SET);\\n        }\\n        fixedLender = IFixedLender(fixedLenderAddress);\\n\\n        emit FixedLenderSet(fixedLenderAddress);\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of tokens from msg.sender to recipient\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, reverts otherwise\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\\n     * @param sender The owner of the tokens\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, reverts otherwise\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allows `spender` to spend the tokens owned by msg.sender\\n     * @param spender The user allowed to spend msg.sender tokens\\n     * @param amount The amount of tokens spender is allowed to spend\\n     * @return `true` if the reverts succeeds, reverts otherwise\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increases the allowance of spender to spend msg.sender tokens\\n     * @param spender The user allowed to spend on behalf of msg.sender\\n     * @param addedValue The amount being added to the allowance\\n     * @return `true` if the increase allowance succeeds, reverts otherwise\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decreases the allowance of spender to spend msg.sender tokens\\n     * @param spender The user allowed to spend on behalf of msg.sender\\n     * @param subtractedValue The amount being subtracted to the allowance\\n     * @return `true` if the decrease allowance succeeds, reverts otherwise\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param account The user whose balance is calculated\\n     * @return The balance of the user\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (userScaledBalance[account] == 0) {\\n            return 0;\\n        }\\n\\n        return (userScaledBalance[account] * totalSupply) / totalScaledBalance;\\n    }\\n\\n    /**\\n     * @dev Returns the allowance of spender on the tokens owned by owner\\n     * @param owner The owner of the tokens\\n     * @param spender The user allowed to spend the owner's tokens\\n     * @return The amount of owner's tokens spender is allowed to spend\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     * @param sender The sender of the tokens\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        uint256 senderRemainingBalance = senderBalance - amount;\\n        userScaledBalance[sender] =\\n            (senderRemainingBalance * totalScaledBalance) /\\n            totalSupply;\\n        userScaledBalance[recipient] =\\n            ((balanceOf(recipient) + amount) * totalScaledBalance) /\\n            totalSupply;\\n        lastBalanceIncrease[recipient] = block.number;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     * @param owner The owner of the tokens\\n     * @param spender The user allowed to spend owner tokens\\n     * @param amount The amount of owner's tokens spender is allowed to spend\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x12816b981855d51aaefe2e28e8da580e7c0aceb859462d657d9b827c20b3ecb7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/FixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./EToken.sol\\\";\\nimport \\\"./interfaces/IFixedLender.sol\\\";\\nimport \\\"./interfaces/IAuditor.sol\\\";\\nimport \\\"./interfaces/IEToken.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./utils/TSUtils.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\ncontract FixedLender is IFixedLender, ReentrancyGuard, AccessControl {\\n    using SafeERC20 for IERC20;\\n    using DecimalMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) public mpUserSuppliedAmount;\\n    mapping(uint256 => mapping(address => uint256)) public mpUserBorrowedAmount;\\n    mapping(uint256 => PoolLib.MaturityPool) public maturityPools;\\n    PoolLib.SmartPool public smartPool;\\n\\n    uint256 private liquidationFee = 2.8e16; //2.8%\\n\\n    IERC20 public override trustedUnderlying;\\n    IEToken public override eToken;\\n    string public override underlyingTokenName;\\n\\n    IAuditor public auditor;\\n    IInterestRateModel public interestRateModel;\\n\\n    // Total deposits in all maturities\\n    uint256 public override totalMpDeposits;\\n    mapping(address => uint256) public override totalMpDepositsUser;\\n\\n    // Total borrows in all maturities\\n    uint256 public override totalMpBorrows;\\n    mapping(address => uint256) public override totalMpBorrowsUser;\\n\\n    /**\\n     * @notice Event emitted when a user borrows amount of an asset from a\\n     *         certain maturity date\\n     * @param to address which borrowed the asset\\n     * @param amount of the asset that it was borrowed\\n     * @param commission is the amount extra that it will need to be paid at\\n     *                   maturity\\n     * @param maturityDate dateID/poolID/maturity in which the user will have\\n     *                     to repay the loan\\n     */\\n    event BorrowFromMaturityPool(\\n        address indexed to,\\n        uint256 amount,\\n        uint256 commission,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user deposits an amount of an asset to a\\n     *         certain maturity date collecting a commission at the end of the\\n     *         period\\n     * @param from address which deposited the asset\\n     * @param amount of the asset that it was deposited\\n     * @param commission is the amount extra that it will be collected at maturity\\n     * @param maturityDate dateID/poolID/maturity in which the user will be able\\n     *                     to collect his deposit + his commission\\n     */\\n    event DepositToMaturityPool(\\n        address indexed from,\\n        uint256 amount,\\n        uint256 commission,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user collects its deposits after maturity\\n     * @param from address which will be collecting the asset\\n     * @param amount of the asset that it was deposited\\n     * @param maturityDate poolID where the user collected its deposits\\n     */\\n    event WithdrawFromMaturityPool(\\n        address indexed from,\\n        uint256 amount,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user repays its borrows after maturity\\n     * @param payer address which repaid the previously borrowed amount\\n     * @param borrower address which had the original debt\\n     * @param penalty amount paid for penalties\\n     * @param debtCovered amount of the debt that it was covered in this repayment\\n     * @param maturityDate poolID where the user repaid its borrowed amounts\\n     */\\n    event RepayToMaturityPool(\\n        address indexed payer,\\n        address indexed borrower,\\n        uint256 penalty,\\n        uint256 debtCovered,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user's position had a liquidation\\n     * @param liquidator address which repaid the previously borrowed amount\\n     * @param borrower address which had the original debt\\n     * @param repayAmount amount of the asset that it was repaid\\n     * @param fixedLenderCollateral address of the asset that it was seized\\n     *                              by the liquidator\\n     * @param seizedAmount amount seized of the collateral\\n     * @param maturityDate poolID where the borrower had an uncollaterized position\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        address fixedLenderCollateral,\\n        uint256 seizedAmount,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user's collateral has been seized\\n     * @param liquidator address which seized this collateral\\n     * @param borrower address which had the original debt\\n     * @param seizedAmount amount seized of the collateral\\n     * @param maturityDate poolID where the borrower lost the amount of collateral\\n     */\\n    event SeizeAsset(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizedAmount,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted reserves have been added to the protocol\\n     * @param benefactor address added a certain amount to its reserves\\n     * @param addAmount amount added as reserves as part of the liquidation event\\n     */\\n    event AddReserves(address benefactor, uint256 addAmount);\\n\\n    /**\\n     * @notice Event emitted when a user contributed to the smart pool\\n     * @param user address that added a certain amount to the smart pool\\n     * @param amount amount added to the smart pool\\n     */\\n    event DepositToSmartPool(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when a user contributed to the smart pool\\n     * @param user address that withdrew a certain amount from the smart pool\\n     * @param amount amount withdrawn to the smart pool\\n     */\\n    event WithdrawFromSmartPool(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _tokenAddress,\\n        string memory _underlyingTokenName,\\n        address _eTokenAddress,\\n        address _auditorAddress,\\n        address _interestRateModelAddress\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        trustedUnderlying = IERC20(_tokenAddress);\\n        trustedUnderlying.safeApprove(address(this), type(uint256).max);\\n        underlyingTokenName = _underlyingTokenName;\\n\\n        auditor = IAuditor(_auditorAddress);\\n        eToken = IEToken(_eTokenAddress);\\n        interestRateModel = IInterestRateModel(_interestRateModelAddress);\\n    }\\n\\n    /**\\n     * @dev Lends to a wallet for a certain maturity date/pool\\n     * @param amount amount to send to the msg.sender\\n     * @param maturityDate maturity date for repayment\\n     */\\n    function borrowFromMaturityPool(uint256 amount, uint256 maturityDate)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        bool newDebt = false;\\n\\n        if (!TSUtils.isPoolID(maturityDate)) {\\n            revert GenericError(ErrorCode.INVALID_POOL_ID);\\n        }\\n\\n        auditor.requirePoolState(maturityDate, TSUtils.State.VALID);\\n        PoolLib.MaturityPool memory pool = maturityPools[maturityDate];\\n\\n        pool.borrowed = pool.borrowed + amount;\\n        if (amount > pool.available) {\\n            uint256 smartPoolAvailable = smartPool.supplied -\\n                smartPool.borrowed;\\n\\n            if (amount - pool.available > smartPoolAvailable) {\\n                revert GenericError(ErrorCode.INSUFFICIENT_PROTOCOL_LIQUIDITY);\\n            }\\n\\n            smartPool.borrowed = smartPool.borrowed + amount - pool.available;\\n            pool.debt = pool.debt + amount - pool.available;\\n            pool.supplied = pool.supplied + amount - pool.available;\\n            pool.available = 0;\\n            newDebt = true;\\n        } else {\\n            pool.available = pool.available - amount;\\n        }\\n\\n        uint256 commissionRate = interestRateModel.getRateToBorrow(\\n            maturityDate,\\n            pool,\\n            smartPool,\\n            newDebt\\n        );\\n        uint256 commission = amount.mul_(commissionRate);\\n        uint256 totalBorrow = amount + commission;\\n        // reverts on failure\\n        auditor.beforeBorrowMP(\\n            address(this),\\n            msg.sender,\\n            totalBorrow,\\n            maturityDate\\n        );\\n\\n        pool.borrowed = pool.borrowed + commission;\\n        maturityPools[maturityDate] = pool;\\n\\n        uint256 currentTotalBorrow = amount + commission;\\n        mpUserBorrowedAmount[maturityDate][msg.sender] += currentTotalBorrow;\\n\\n        totalMpBorrows += currentTotalBorrow;\\n        totalMpBorrowsUser[msg.sender] += currentTotalBorrow;\\n\\n        trustedUnderlying.safeTransferFrom(address(this), msg.sender, amount);\\n\\n        emit BorrowFromMaturityPool(\\n            msg.sender,\\n            amount,\\n            commission,\\n            maturityDate\\n        );\\n    }\\n\\n    /**\\n     * @dev Deposits a certain amount to the protocol for\\n     *      a certain maturity date/pool\\n     * @param amount amount to receive from the msg.sender\\n     * @param maturityDate maturity date / pool ID\\n     */\\n    function depositToMaturityPool(uint256 amount, uint256 maturityDate)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        if (!TSUtils.isPoolID(maturityDate)) {\\n            revert GenericError(ErrorCode.INVALID_POOL_ID);\\n        }\\n\\n        amount = doTransferIn(msg.sender, amount);\\n\\n        PoolLib.MaturityPool memory pool = maturityPools[maturityDate];\\n\\n        // reverts on failure\\n        auditor.beforeDepositMP(address(this), msg.sender, maturityDate);\\n\\n        if (pool.debt > 0) {\\n            if (amount >= pool.debt) {\\n                pool.debt = 0;\\n                pool.supplied = pool.supplied + amount;\\n                pool.available = amount;\\n            } else {\\n                pool.debt = pool.debt - amount;\\n                smartPool.supplied = smartPool.supplied + amount;\\n            }\\n        } else {\\n            pool.supplied = pool.supplied + amount;\\n            pool.available = pool.available + amount;\\n        }\\n\\n        maturityPools[maturityDate] = pool;\\n\\n        uint256 commissionRate = interestRateModel.getRateToSupply(\\n            maturityDate,\\n            pool\\n        );\\n\\n        uint256 commission = amount.mul_(commissionRate);\\n        uint256 currentTotalDeposit = amount + commission;\\n        mpUserSuppliedAmount[maturityDate][msg.sender] += currentTotalDeposit;\\n\\n        totalMpDeposits += currentTotalDeposit;\\n        totalMpDepositsUser[msg.sender] += currentTotalDeposit;\\n\\n        emit DepositToMaturityPool(\\n            msg.sender,\\n            amount,\\n            commission,\\n            maturityDate\\n        );\\n    }\\n\\n    /**\\n     * @notice User collects a certain amount of underlying asset after having\\n     *         supplied tokens until a certain maturity date\\n     * @dev The pool that the user is trying to retrieve the money should be matured\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemAmount The number of underlying tokens to receive\\n     * @param maturityDate The matured date for which we're trying to retrieve the funds\\n     */\\n    function withdrawFromMaturityPool(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external override nonReentrant {\\n        if (redeemAmount == 0) {\\n            revert GenericError(ErrorCode.REDEEM_CANT_BE_ZERO);\\n        }\\n\\n        // reverts on failure\\n        auditor.beforeWithdrawMP(\\n            address(this),\\n            redeemer,\\n            redeemAmount,\\n            maturityDate\\n        );\\n\\n        mpUserSuppliedAmount[maturityDate][redeemer] -= redeemAmount;\\n        totalMpDeposits -= redeemAmount;\\n        totalMpDepositsUser[redeemer] -= redeemAmount;\\n\\n        require(\\n            trustedUnderlying.balanceOf(address(this)) >= redeemAmount,\\n            \\\"Not enough liquidity\\\"\\n        );\\n\\n        trustedUnderlying.safeTransferFrom(\\n            address(this),\\n            redeemer,\\n            redeemAmount\\n        );\\n\\n        emit WithdrawFromMaturityPool(redeemer, redeemAmount, maturityDate);\\n    }\\n\\n    /**\\n     * @notice Sender repays an amount of borrower's debt for a maturity date\\n     * @dev The pool that the user is trying to repay to should be matured\\n     * @param borrower The address of the account that has the debt\\n     * @param maturityDate The matured date where the debt is located\\n     * @param repayAmount amount to be paid for the borrower's debt\\n     */\\n    function repayToMaturityPool(\\n        address borrower,\\n        uint256 maturityDate,\\n        uint256 repayAmount\\n    ) external override nonReentrant {\\n        // reverts on failure\\n        auditor.beforeRepayMP(address(this), borrower);\\n\\n        _repay(msg.sender, borrower, repayAmount, maturityDate);\\n    }\\n\\n    /**\\n     * @notice Function to liquidate an uncollaterized position\\n     * @dev Msg.sender liquidates a borrower's position and repays a certain amount of collateral\\n     *      for a maturity date, seizing a part of borrower's collateral\\n     * @param borrower wallet that has an outstanding debt for a certain maturity date\\n     * @param repayAmount amount to be repaid by liquidator(msg.sender)\\n     * @param fixedLenderCollateral address of fixedLender from which the collateral will be seized to give the liquidator\\n     * @param maturityDate maturity date for which the position will be liquidated\\n     */\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) external override nonReentrant returns (uint256) {\\n        return\\n            _liquidate(\\n                msg.sender,\\n                borrower,\\n                repayAmount,\\n                fixedLenderCollateral,\\n                maturityDate\\n            );\\n    }\\n\\n    /**\\n     * @notice Public function to seize a certain amount of tokens\\n     * @dev Public function for liquidator to seize borrowers tokens in a certain maturity date.\\n     *      This function will only be called from another FixedLender, on `liquidation` calls.\\n     *      That's why msg.sender needs to be passed to the private function (to be validated as a market)\\n     * @param liquidator address which will receive the seized tokens\\n     * @param borrower address from which the tokens will be seized\\n     * @param seizeAmount amount to be removed from borrower's posession\\n     * @param maturityDate maturity date from where the tokens will be removed. Used to remove liquidity.\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeAmount,\\n        uint256 maturityDate\\n    ) external override nonReentrant {\\n        _seize(msg.sender, liquidator, borrower, seizeAmount, maturityDate);\\n    }\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the smart pool, receiving in return overlying eTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 eUSDC\\n     * @param amount The amount to be deposited\\n     */\\n    function depositToSmartPool(uint256 amount) external override {\\n        auditor.beforeSupplySP(address(this), msg.sender);\\n        amount = doTransferIn(msg.sender, amount);\\n        eToken.mint(msg.sender, amount);\\n        smartPool.supplied += amount;\\n        emit DepositToSmartPool(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the smart pool, burning the equivalent eTokens owned\\n     * - E.g. User has 100 eUSDC, calls withdraw() and receives 100 USDC, burning the 100 eUSDC\\n     * @param amount The underlying amount to be withdrawn\\n     * - Send the value type(uint256).max in order to withdraw the whole eToken balance\\n     */\\n    function withdrawFromSmartPool(uint256 amount) external override {\\n        auditor.beforeWithdrawSP(address(this), msg.sender);\\n\\n        uint256 userBalance = eToken.balanceOf(msg.sender);\\n        uint256 amountToWithdraw = amount;\\n        if (amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n\\n        if (smartPool.supplied - amountToWithdraw < smartPool.borrowed) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_PROTOCOL_LIQUIDITY);\\n        }\\n\\n        eToken.burn(msg.sender, amountToWithdraw);\\n        trustedUnderlying.safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            amountToWithdraw\\n        );\\n\\n        smartPool.supplied -= amountToWithdraw;\\n        emit WithdrawFromSmartPool(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets the protocol's liquidation fee for the underlying asset of this fixedLender\\n     * @param _liquidationFee fee that the protocol earns when position is liquidated\\n     */\\n    function setLiquidationFee(uint256 _liquidationFee)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        liquidationFee = _liquidationFee;\\n    }\\n\\n    /**\\n     * @dev Gets current snapshot for a wallet in a certain maturity\\n     * @param who wallet to return status snapshot in the specified maturity date\\n     * @param maturityDate maturity date\\n     */\\n    function getAccountSnapshot(address who, uint256 maturityDate)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        if (!TSUtils.isPoolID(maturityDate)) {\\n            revert GenericError(ErrorCode.INVALID_POOL_ID);\\n        }\\n\\n        uint256 debt = mpUserBorrowedAmount[maturityDate][who];\\n        uint256 daysDelayed = TSUtils.daysPast(maturityDate);\\n        if (daysDelayed > 0) {\\n            debt += debt.mul_(daysDelayed * interestRateModel.penaltyRate());\\n        }\\n\\n        return (mpUserSuppliedAmount[maturityDate][who], debt);\\n    }\\n\\n    /**\\n     * @dev Gets the total amount of borrowed money for a maturityDate\\n     * @param maturityDate maturity date\\n     */\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (!TSUtils.isPoolID(maturityDate)) {\\n            revert GenericError(ErrorCode.INVALID_POOL_ID);\\n        }\\n        return maturityPools[maturityDate].borrowed;\\n    }\\n\\n    /**\\n     * @dev Gets the auditor contract interface being used to validate positions\\n     */\\n    function getAuditor() public view override returns (IAuditor) {\\n        return IAuditor(auditor);\\n    }\\n\\n    /**\\n     * @notice This function allows to (partially) repay a position\\n     * @dev Internal repay function, it allows to partially pay debt and it\\n     *      should be called after `beforeRepayMP` or `liquidateAllowed`\\n     *      on the auditor\\n     * @param payer the address of the account that will pay the debt\\n     * @param borrower the address of the account that has the debt\\n     * @param repayAmount the amount of debt of the pool that should be paid\\n     * @param maturityDate the maturityDate to access the pool\\n     * @return the actual amount that it was transferred in to the protocol\\n     */\\n    function _repay(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 maturityDate\\n    ) internal returns (uint256) {\\n        if (repayAmount == 0) {\\n            revert GenericError(ErrorCode.REPAY_ZERO);\\n        }\\n\\n        repayAmount = doTransferIn(payer, repayAmount);\\n        (, uint256 amountOwed) = getAccountSnapshot(borrower, maturityDate);\\n\\n        if (repayAmount > amountOwed) {\\n            revert GenericError(ErrorCode.TOO_MUCH_REPAY_TRANSFER);\\n        }\\n\\n        uint256 amountBorrowed = mpUserBorrowedAmount[maturityDate][borrower];\\n\\n        // We calculate the amount of the debt this covers, paying proportionally\\n        // the amount of interests on the overdue debt. If repay amount = amount owed,\\n        // then amountBorrowed is what should be discounted to the users account\\n        uint256 debtCovered = (repayAmount * amountBorrowed) / amountOwed;\\n        uint256 penalties = repayAmount - debtCovered;\\n        eToken.accrueEarnings(penalties);\\n        mpUserBorrowedAmount[maturityDate][borrower] =\\n            amountBorrowed -\\n            debtCovered;\\n\\n        // That repayment diminishes debt in the pool\\n        PoolLib.MaturityPool memory pool = maturityPools[maturityDate];\\n        pool.borrowed -= debtCovered;\\n        maturityPools[maturityDate] = pool;\\n\\n        totalMpBorrows -= debtCovered;\\n        totalMpBorrowsUser[borrower] -= debtCovered;\\n\\n        emit RepayToMaturityPool(\\n            payer,\\n            borrower,\\n            penalties,\\n            debtCovered,\\n            maturityDate\\n        );\\n\\n        return repayAmount;\\n    }\\n\\n    /**\\n     * @notice Internal Function to liquidate an uncollaterized position\\n     * @dev Liquidator liquidates a borrower's position and repays a certain amount of collateral\\n     *      for a maturity date, seizing a part of borrower's collateral\\n     * @param borrower wallet that has an outstanding debt for a certain maturity date\\n     * @param repayAmount amount to be repaid by liquidator(msg.sender)\\n     * @param fixedLenderCollateral address of fixedLender from which the collateral will be seized to give the liquidator\\n     * @param maturityDate maturity date for which the position will be liquidated\\n     */\\n    function _liquidate(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) internal returns (uint256) {\\n        // reverts on failure\\n        auditor.liquidateAllowed(\\n            address(this),\\n            address(fixedLenderCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount,\\n            maturityDate\\n        );\\n\\n        repayAmount = _repay(liquidator, borrower, repayAmount, maturityDate);\\n\\n        // reverts on failure\\n        uint256 seizeTokens = auditor.liquidateCalculateSeizeAmount(\\n            address(this),\\n            address(fixedLenderCollateral),\\n            repayAmount\\n        );\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        (uint256 balance, ) = fixedLenderCollateral.getAccountSnapshot(\\n            borrower,\\n            maturityDate\\n        );\\n        if (balance < seizeTokens) {\\n            revert GenericError(ErrorCode.TOKENS_MORE_THAN_BALANCE);\\n        }\\n\\n        // If this is also the collateral\\n        // run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        // both revert on failure\\n        if (address(fixedLenderCollateral) == address(this)) {\\n            _seize(\\n                address(this),\\n                liquidator,\\n                borrower,\\n                seizeTokens,\\n                maturityDate\\n            );\\n        } else {\\n            fixedLenderCollateral.seize(\\n                liquidator,\\n                borrower,\\n                seizeTokens,\\n                maturityDate\\n            );\\n        }\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(\\n            liquidator,\\n            borrower,\\n            repayAmount,\\n            address(fixedLenderCollateral),\\n            seizeTokens,\\n            maturityDate\\n        );\\n\\n        return repayAmount;\\n    }\\n\\n    /**\\n     * @notice Private function to seize a certain amount of tokens\\n     * @dev Private function for liquidator to seize borrowers tokens in a certain maturity date.\\n     *      This function will only be called from this FixedLender, on `liquidation` or through `seize` calls from another FixedLender.\\n     *      That's why msg.sender needs to be passed to the private function (to be validated as a market)\\n     * @param seizerFixedLender address which is calling the seize function (see `seize` public function)\\n     * @param liquidator address which will receive the seized tokens\\n     * @param borrower address from which the tokens will be seized\\n     * @param seizeAmount amount to be removed from borrower's posession\\n     * @param maturityDate maturity date from where the tokens will be removed. Used to remove liquidity.\\n     */\\n    function _seize(\\n        address seizerFixedLender,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeAmount,\\n        uint256 maturityDate\\n    ) internal {\\n        // reverts on failure\\n        auditor.seizeAllowed(\\n            address(this),\\n            seizerFixedLender,\\n            liquidator,\\n            borrower\\n        );\\n\\n        uint256 protocolAmount = seizeAmount.mul_(liquidationFee);\\n        uint256 amountToTransfer = seizeAmount - protocolAmount;\\n\\n        mpUserSuppliedAmount[maturityDate][borrower] -= seizeAmount;\\n\\n        // That seize amount diminishes liquidity in the pool\\n        PoolLib.MaturityPool memory pool = maturityPools[maturityDate];\\n        pool.supplied -= seizeAmount;\\n        maturityPools[maturityDate] = pool;\\n\\n        totalMpDeposits -= seizeAmount;\\n        totalMpDepositsUser[borrower] -= seizeAmount;\\n\\n        trustedUnderlying.safeTransfer(liquidator, amountToTransfer);\\n\\n        emit SeizeAsset(liquidator, borrower, seizeAmount, maturityDate);\\n        emit AddReserves(address(this), protocolAmount);\\n    }\\n\\n    /**\\n     * @notice Private function to safely transfer funds into this contract\\n     * @dev Some underlying token implementations can alter the transfer function to\\n     *      transfer less of the initial amount (ie: take a commission out).\\n     *      This function takes into account this scenario\\n     * @param from address which will transfer funds in (approve needed on underlying token)\\n     * @param amount amount to be transfered\\n     * @return amount actually transferred by the protocol\\n     */\\n    function doTransferIn(address from, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 balanceBefore = trustedUnderlying.balanceOf(address(this));\\n        trustedUnderlying.safeTransferFrom(from, address(this), amount);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = trustedUnderlying.balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n}\\n\",\"keccak256\":\"0xbadae44317ce45eb2ef1358ac095e6486a4fb83f5bcc9b1341d3d39a839883d6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAuditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\nimport \\\"../utils/TSUtils.sol\\\";\\n\\ninterface IAuditor {\\n    function beforeSupplySP(address fixedLenderAddress, address supplier)\\n        external;\\n\\n    function beforeWithdrawSP(address fixedLenderAddress, address supplier)\\n        external;\\n\\n    function beforeDepositMP(\\n        address fixedLenderAddress,\\n        address borrower,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function beforeBorrowMP(\\n        address fixedLenderAddress,\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function beforeWithdrawMP(\\n        address fixedLenderAddress,\\n        address redeemer,\\n        uint256 redeemTokens,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function beforeRepayMP(address fixedLenderAddress, address borrower)\\n        external;\\n\\n    function getAccountLiquidity(address account, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function liquidateAllowed(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 maturityDate\\n    ) external view;\\n\\n    function seizeAllowed(\\n        address fixedLenderCollateral,\\n        address fixedLenderBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) external view;\\n\\n    function liquidateCalculateSeizeAmount(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256);\\n\\n    function getFuturePools() external view returns (uint256[] memory);\\n\\n    function getMarketAddresses() external view returns (address[] memory);\\n\\n    function requirePoolState(uint256 maturityDate, TSUtils.State requiredState)\\n        external\\n        view;\\n}\\n\",\"keccak256\":\"0x0845018b6dc1fbdd57ddbd999a55a86c2c7dbdf4e3a770afdfda1c5d47b1f2ff\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IEToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IEToken is IERC20, IERC20Metadata {\\n    /**\\n     * @dev Emitted when `fixedLender` is set\\n     * - The FixedLender is where the eToken is used\\n     */\\n    event FixedLenderSet(address indexed fixedLender);\\n\\n    /**\\n     * @dev Emitted when `amount` is accrued as earnings\\n     */\\n    event EarningsAccrued(uint256 amount);\\n\\n    /**\\n     * @dev Mints `amount` eTokens to `user`\\n     * - Only callable by the FixedLender\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     */\\n    function mint(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Burns eTokens from `user`\\n     * - Only callable by the FixedLender\\n     * @param user The owner of the eTokens, getting them burned\\n     * @param amount The amount being burned\\n     */\\n    function burn(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Increases contract earnings\\n     * - Only callable by the FixedLender\\n     * @param amount The amount of underlying tokens deposited\\n     */\\n    function accrueEarnings(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x47c7d9677b639ee51e7242033ef77b7e3758e9627f1b7dfa61e32a4f861995fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAuditor.sol\\\";\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IFixedLender {\\n    function borrowFromMaturityPool(uint256 amount, uint256 maturityDate)\\n        external;\\n\\n    function depositToMaturityPool(uint256 amount, uint256 maturityDate)\\n        external;\\n\\n    function depositToSmartPool(uint256 amount) external;\\n\\n    function withdrawFromSmartPool(uint256 amount) external;\\n\\n    function withdrawFromMaturityPool(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function repayToMaturityPool(\\n        address borrower,\\n        uint256 maturityDate,\\n        uint256 repayAmount\\n    ) external;\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) external returns (uint256);\\n\\n    function underlyingTokenName() external view returns (string calldata);\\n\\n    function trustedUnderlying() external view returns (IERC20);\\n\\n    function getAccountSnapshot(address who, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAuditor() external view returns (IAuditor);\\n\\n    function eToken() external view returns (IEToken);\\n\\n    function totalMpBorrows() external view returns (uint256);\\n\\n    function totalMpDeposits() external view returns (uint256);\\n\\n    function totalMpBorrowsUser(address who) external view returns (uint256);\\n\\n    function totalMpDepositsUser(address who) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xceb6f6e2aad15b5711023ee01f2ec719cbdb958d58918dfb10c408b4a0fceb95\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/PoolLib.sol\\\";\\n\\ninterface IInterestRateModel {\\n    function getRateToBorrow(\\n        uint256 maturityDate,\\n        PoolLib.MaturityPool memory poolMaturity,\\n        PoolLib.SmartPool memory smartPool,\\n        bool newDebt\\n    ) external view returns (uint256);\\n\\n    function getRateToSupply(\\n        uint256 maturityDate,\\n        PoolLib.MaturityPool memory poolMaturity\\n    ) external view returns (uint256);\\n\\n    function penaltyRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd22356b9e4dbd9816216a43c176bdd0f77ae188f19dd54af0cf07e2136669f3c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct Double {\\n    uint256 value;\\n}\\n\\nlibrary DecimalMath {\\n    uint256 private constant NUMBER_SCALE = 1e18;\\n    uint256 private constant DOUBLE_SCALE = 1e36;\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / NUMBER_SCALE;\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return (a * b.value) / DOUBLE_SCALE;\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * NUMBER_SCALE) / b;\\n    }\\n\\n    function add_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value + b.value});\\n    }\\n\\n    function sub_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value - b.value});\\n    }\\n\\n    function fraction(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: ((a * DOUBLE_SCALE) / b)});\\n    }\\n\\n    /**\\n     * @notice Converts an amount of a particular token into a normalized USD value\\n     * @dev it abstracts the decimals of the token, it's used to compute liquidity\\n     * @param tokenAmount the amount of the token to convert to USD\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param underlyingDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the amount of USD the asset represents, normalized to 18 decimals precision\\n     */\\n    function getTokenAmountInUSD(\\n        uint256 tokenAmount,\\n        uint256 oraclePrice,\\n        uint8 underlyingDecimals\\n    ) internal pure returns (uint256) {\\n        uint256 tokenScale = 10**underlyingDecimals;\\n        uint256 normalizedTokenAmount = (tokenAmount * NUMBER_SCALE) /\\n            tokenScale;\\n        return (normalizedTokenAmount * oraclePrice) / NUMBER_SCALE;\\n    }\\n\\n    /**\\n     * @notice Converts normalized USD value into an  amount of a particular token\\n     * @dev it abstracts the decimals of the token, it's used to get the seizable amount in a liquidation\\n     * @param usdAmount the amount of usd to convert to the token\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param tokenDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the raw amount of the token equivalent to the provided usd amount\\n     */\\n    function getTokenAmountFromUsd(\\n        uint256 usdAmount,\\n        uint256 oraclePrice,\\n        uint8 tokenDecimals\\n    ) internal pure returns (uint256) {\\n        return\\n            (((usdAmount * NUMBER_SCALE) / oraclePrice) * 10**tokenDecimals) /\\n            NUMBER_SCALE;\\n    }\\n}\\n\",\"keccak256\":\"0x5a95fa4807987dd862b1499c260d186b9aadefddeea4345ae6b51751a144717c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TSUtils.sol\\\";\\n\\nerror GenericError(ErrorCode error);\\nerror UnmatchedPoolState(TSUtils.State state, TSUtils.State requiredState);\\n\\nenum ErrorCode {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY,\\n    UNSUFFICIENT_SHORTFALL,\\n    AUDITOR_MISMATCH,\\n    TOO_MUCH_REPAY,\\n    REPAY_ZERO,\\n    TOKENS_MORE_THAN_BALANCE,\\n    INVALID_POOL_STATE,\\n    INVALID_POOL_ID,\\n    LIQUIDATOR_NOT_BORROWER,\\n    BORROW_PAUSED,\\n    NOT_A_FIXED_LENDER_SENDER,\\n    INVALID_SET_BORROW_CAP,\\n    MARKET_BORROW_CAP_REACHED,\\n    INCONSISTENT_PARAMS_LENGTH,\\n    REDEEM_CANT_BE_ZERO,\\n    EXIT_MARKET_BALANCE_OWED,\\n    CALLER_MUST_BE_FIXED_LENDER,\\n    FIXED_LENDER_ALREADY_SET,\\n    INSUFFICIENT_PROTOCOL_LIQUIDITY,\\n    TOO_MUCH_REPAY_TRANSFER,\\n    SMART_POOL_FUNDS_LOCKED\\n}\\n\",\"keccak256\":\"0x2a3e4abc7f2b66436aa15d2162a5827882c599178ef322cc18e4f9f8d9638f2d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/PoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PoolLib {\\n    struct MaturityPool {\\n        uint256 borrowed;\\n        uint256 supplied;\\n        uint256 debt;\\n        uint256 available;\\n    }\\n\\n    struct SmartPool {\\n        uint256 borrowed;\\n        uint256 supplied;\\n    }\\n}\\n\",\"keccak256\":\"0x2100c46763c3652943735e8cc3c6b53229928c0c76d4516cb6476801cf48dc76\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nlibrary TSUtils {\\n    enum State {\\n        INVALID,\\n        MATURED,\\n        VALID,\\n        NOT_READY\\n    }\\n\\n    uint32 public constant INTERVAL = 7 days;\\n\\n    /**\\n     * @notice Function to calculate how many days have passed since the end of the POOLID\\n     * @param timestamp to calculate the day difference\\n     */\\n    function daysPast(uint256 timestamp) public view returns (uint256) {\\n        uint256 trimmedNow = trimmedDay(block.timestamp);\\n        if (timestamp >= trimmedNow) {\\n            return 0;\\n        }\\n        return (trimmedNow - timestamp) / 1 days;\\n    }\\n\\n    /**\\n     * @notice Function to take a timestamp to it's 00:00 hours (beginning of day)\\n     * @param timestamp timestamp to calculate the beginning of the day with\\n     */\\n    function trimmedDay(uint256 timestamp) public pure returns (uint256) {\\n        return timestamp - (timestamp % 1 days);\\n    }\\n\\n    /**\\n     * @notice Function to return a pool _time_ state based on the current time,\\n     *         maxPools available, and the INTERVALS configured, all to return\\n     *         if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED\\n     * @param currentTimestamp timestamp of the current time\\n     * @param timestamp used as POOLID\\n     * @param maxPools number of pools available in the time horizon to be available\\n     */\\n    function getPoolState(\\n        uint256 currentTimestamp,\\n        uint256 timestamp,\\n        uint8 maxPools\\n    ) public pure returns (State) {\\n        if (timestamp % INTERVAL != 0) {\\n            return State.INVALID;\\n        }\\n\\n        if (timestamp < currentTimestamp) {\\n            return State.MATURED;\\n        }\\n\\n        uint256 totalSecondsForEnabledPools = INTERVAL * maxPools;\\n        if (\\n            timestamp >\\n            currentTimestamp -\\n                (currentTimestamp % INTERVAL) +\\n                totalSecondsForEnabledPools\\n        ) {\\n            return State.NOT_READY;\\n        }\\n\\n        return State.VALID;\\n    }\\n\\n    /**\\n     * @notice Function that validates if a certain timestamp is a POOLID based on the INTERVALS\\n     *         configured for this library\\n     * @param timestamp to validate if is a POOLID\\n     */\\n    function isPoolID(uint256 timestamp) public pure returns (bool) {\\n        return (timestamp % INTERVAL) == 0;\\n    }\\n\\n    /**\\n     * @notice Function to return all the future pool IDs give in a certain time horizon that\\n     *         gets calculated using a startTime, the amount of pools to returns, and the INTERVAL\\n     *         configured in this library\\n     * @param startingTimestamp initialTimestamp to start calculating poolIDs\\n     * @param maxPools number of pools to return\\n     */\\n    function futurePools(uint256 startingTimestamp, uint8 maxPools)\\n        public\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory poolIDs = new uint256[](maxPools);\\n        uint256 timestamp = startingTimestamp - (startingTimestamp % INTERVAL);\\n        for (uint256 i = 0; i < maxPools; i++) {\\n            timestamp += INTERVAL;\\n            poolIDs[i] = timestamp;\\n        }\\n        return poolIDs;\\n    }\\n}\\n\",\"keccak256\":\"0x76997e71e0e4e4b4dfdd108059756c8de271471fd9acbb70fd33f596afbe8319\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052666379da05b600006007553480156200001c57600080fd5b5060405162005f0d38038062005f0d8339818101604052810190620000429190620008ef565b60016000819055506200005f6000801b33620001fb60201b60201c565b84600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000114307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166200021160201b620023f1179092919060201c565b83600a90805190602001906200012c92919062000788565b5081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000f87565b6200020d82826200038360201b60201c565b5050565b6000811480620002b1575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016200025b92919062000b31565b60206040518083038186803b1580156200027457600080fd5b505afa15801562000289573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002af9190620009b6565b145b620002f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002ea9062000c15565b60405180910390fd5b6200037e8363095ea7b360e01b84846040516024016200031592919062000b5e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200047460201b60201c565b505050565b6200039582826200054860201b60201c565b6200047057600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000415620005b360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620004dd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16620005bb60201b6200254f179092919060201c565b90506000815111156200054357808060200190518101906200050091906200098a565b62000542576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005399062000bf3565b60405180910390fd5b5b505050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6060620005d28484600085620005db60201b60201c565b90509392505050565b60608247101562000623576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200061a9062000baf565b60405180910390fd5b62000634856200070960201b60201c565b62000676576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200066d9062000bd1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051620006a1919062000b18565b60006040518083038185875af1925050503d8060008114620006e0576040519150601f19603f3d011682016040523d82523d6000602084013e620006e5565b606091505b5091509150620006fd8282866200071c60201b60201c565b92505050949350505050565b600080823b905060008111915050919050565b606083156200072e5782905062000781565b600083511115620007425782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000778919062000b8b565b60405180910390fd5b9392505050565b828054620007969062000d48565b90600052602060002090601f016020900481019282620007ba576000855562000806565b82601f10620007d557805160ff191683800117855562000806565b8280016001018555821562000806579182015b8281111562000805578251825591602001919060010190620007e8565b5b50905062000815919062000819565b5090565b5b80821115620008345760008160009055506001016200081a565b5090565b60006200084f620008498462000c60565b62000c37565b9050828152602081018484840111156200086857600080fd5b6200087584828562000d12565b509392505050565b6000815190506200088e8162000f39565b92915050565b600081519050620008a58162000f53565b92915050565b600082601f830112620008bd57600080fd5b8151620008cf84826020860162000838565b91505092915050565b600081519050620008e98162000f6d565b92915050565b600080600080600060a086880312156200090857600080fd5b600062000918888289016200087d565b955050602086015167ffffffffffffffff8111156200093657600080fd5b6200094488828901620008ab565b945050604062000957888289016200087d565b93505060606200096a888289016200087d565b92505060806200097d888289016200087d565b9150509295509295909350565b6000602082840312156200099d57600080fd5b6000620009ad8482850162000894565b91505092915050565b600060208284031215620009c957600080fd5b6000620009d984828501620008d8565b91505092915050565b620009ed8162000cc8565b82525050565b600062000a008262000c96565b62000a0c818562000cac565b935062000a1e81856020860162000d12565b80840191505092915050565b600062000a378262000ca1565b62000a43818562000cb7565b935062000a5581856020860162000d12565b62000a608162000e12565b840191505092915050565b600062000a7a60268362000cb7565b915062000a878262000e23565b604082019050919050565b600062000aa1601d8362000cb7565b915062000aae8262000e72565b602082019050919050565b600062000ac8602a8362000cb7565b915062000ad58262000e9b565b604082019050919050565b600062000aef60368362000cb7565b915062000afc8262000eea565b604082019050919050565b62000b128162000d08565b82525050565b600062000b268284620009f3565b915081905092915050565b600060408201905062000b486000830185620009e2565b62000b576020830184620009e2565b9392505050565b600060408201905062000b756000830185620009e2565b62000b84602083018462000b07565b9392505050565b6000602082019050818103600083015262000ba7818462000a2a565b905092915050565b6000602082019050818103600083015262000bca8162000a6b565b9050919050565b6000602082019050818103600083015262000bec8162000a92565b9050919050565b6000602082019050818103600083015262000c0e8162000ab9565b9050919050565b6000602082019050818103600083015262000c308162000ae0565b9050919050565b600062000c4362000c56565b905062000c51828262000d7e565b919050565b6000604051905090565b600067ffffffffffffffff82111562000c7e5762000c7d62000de3565b5b62000c898262000e12565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600062000cd58262000ce8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101562000d3257808201518184015260208101905062000d15565b8381111562000d42576000848401525b50505050565b6000600282049050600182168062000d6157607f821691505b6020821081141562000d785762000d7762000db4565b5b50919050565b62000d898262000e12565b810181811067ffffffffffffffff8211171562000dab5762000daa62000de3565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b62000f448162000cc8565b811462000f5057600080fd5b50565b62000f5e8162000cdc565b811462000f6a57600080fd5b50565b62000f788162000d08565b811462000f8457600080fd5b50565b614f768062000f976000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638988b9b81161010f578063b72ddee9116100a2578063d547741f11610071578063d547741f146105f8578063dea9e87914610614578063f3fdb15a14610630578063fef0bec81461064e576101f0565b8063b72ddee914610584578063b7f394c0146105a2578063c0107f81146105be578063d2c6d0dc146105dc576101f0565b8063953d9cf1116100de578063953d9cf1146104e5578063a217fddf14610503578063a29cb7e114610521578063a3456a1014610554576101f0565b80638988b9b81461044957806391d148541461046757806391f3e472146104975780639457be23146104b5576101f0565b80634b728f89116101875780636c296b00116101565780636c296b001461039d57806375e1d781146103cd578063821993ec146103fd578063887463ab1461042d576101f0565b80634b728f89146103135780634bf2ee391461033257806355a1ac2e146103505780636135600f14610381576101f0565b80632f2ff15d116101c35780632f2ff15d1461028d57806336568abe146102a95780633ec045a6146102c557806345227d5f146102e3576101f0565b806301ffc9a7146101f55780630bda514e14610225578063248a9ca31461024157806327f1a88414610271575b600080fd5b61020f600480360381019061020a9190613d55565b61066a565b60405161021c9190614462565b60405180910390f35b61023f600480360381019061023a9190613c78565b6106e4565b005b61025b60048036038101906102569190613cf0565b6107db565b604051610268919061447d565b60405180910390f35b61028b60048036038101906102869190613b27565b6107fb565b005b6102a760048036038101906102a29190613d19565b610b92565b005b6102c360048036038101906102be9190613d19565b610bbb565b005b6102cd610c3e565b6040516102da9190614498565b60405180910390f35b6102fd60048036038101906102f89190613dd0565b610c64565b60405161030a919061465c565b60405180910390f35b61031b610c89565b60405161032992919061470f565b60405180910390f35b61033a610c9b565b60405161034791906144b3565b60405180910390f35b61036a60048036038101906103659190613bd9565b610cc1565b60405161037892919061470f565b60405180910390f35b61039b60048036038101906103969190613d7e565b610fa0565b005b6103b760048036038101906103b29190613afe565b611137565b6040516103c4919061465c565b60405180910390f35b6103e760048036038101906103e29190613d7e565b61114f565b6040516103f4919061465c565b60405180910390f35b61041760048036038101906104129190613dd0565b611238565b604051610424919061465c565b60405180910390f35b61044760048036038101906104429190613e0c565b61125d565b005b610451611761565b60405161045e919061465c565b60405180910390f35b610481600480360381019061047c9190613d19565b611767565b60405161048e9190614462565b60405180910390f35b61049f6117d2565b6040516104ac919061451f565b60405180910390f35b6104cf60048036038101906104ca9190613c15565b611860565b6040516104dc919061465c565b60405180910390f35b6104ed6118cf565b6040516104fa91906144ce565b60405180910390f35b61050b6118f5565b604051610518919061447d565b60405180910390f35b61053b60048036038101906105369190613d7e565b6118fc565b60405161054b949392919061476f565b60405180910390f35b61056e60048036038101906105699190613afe565b61192c565b60405161057b919061465c565b60405180910390f35b61058c611944565b6040516105999190614498565b60405180910390f35b6105bc60048036038101906105b79190613d7e565b61196e565b005b6105c6611c85565b6040516105d3919061465c565b60405180910390f35b6105f660048036038101906105f19190613b76565b611c8b565b005b610612600480360381019061060d9190613d19565b611cf4565b005b61062e60048036038101906106299190613e0c565b611d1d565b005b6106386123ab565b60405161064591906144e9565b60405180910390f35b61066860048036038101906106639190613d7e565b6123d1565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106dd57506106dc82612567565b5b9050919050565b6002600054141561072a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610721906145e1565b60405180910390fd5b6002600081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663924f6ced30856040518363ffffffff1660e01b815260040161078f929190614248565b600060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505050506107cd338483856125d1565b506001600081905550505050565b600060016000838152602001908152602001600020600101549050919050565b60026000541415610841576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610838906145e1565b60405180910390fd5b600260008190555060008214156108905760136040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016108879190614504565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e23a98308585856040518563ffffffff1660e01b81526004016108f19493929190614271565b600060405180830381600087803b15801561090b57600080fd5b505af115801561091f573d6000803e3d6000fd5b50505050816002600083815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461098391906148d2565b9250508190555081600d600082825461099c91906148d2565b9250508190555081600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109f291906148d2565b9250508190555081600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a55919061422d565b60206040518083038186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa59190613da7565b1015610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add906145a1565b60405180910390fd5b610b35308484600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612971909392919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167fac44b7cd8d864cbf99c4acc9c9787f54f5a4ac089349fecf3de4ce2ddff7b7bb8383604051610b7d92919061470f565b60405180910390a26001600081905550505050565b610b9b826107db565b610bac81610ba76129fa565b612a02565b610bb68383612a9f565b505050565b610bc36129fa565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2790614621565b60405180910390fd5b610c3a8282612b7f565b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052816000526040600020602052806000526040600020600091509150505481565b60058060000154908060010154905082565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073f6780c6eCFbF39CE58ac293dC2F00da27c91df4E63b142980a846040518263ffffffff1660e01b8152600401610cfb9190614641565b60206040518083038186803b158015610d1357600080fd5b505af4158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190613cc7565b610d8d57600c6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610d849190614504565b60405180910390fd5b60006003600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600073f6780c6eCFbF39CE58ac293dC2F00da27c91df4E6328845ff0866040518263ffffffff1660e01b8152600401610e1b9190614641565b60206040518083038186803b158015610e3357600080fd5b505af4158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190613da7565b90506000811115610f4157610f33600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6b7494f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ee157600080fd5b505afa158015610ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f199190613da7565b82610f249190614878565b83612c6190919063ffffffff16565b82610f3e91906147f1565b91505b6002600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054829350935050509250929050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328bc83c130336040518363ffffffff1660e01b8152600401610ffd929190614248565b600060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b505050506110393382612c8a565b9050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401611098929190614439565b600060405180830381600087803b1580156110b257600080fd5b505af11580156110c6573d6000803e3d6000fd5b5050505080600560010160008282546110df91906147f1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fd5656bd5348ef71585f018f0e1310274a6c223cc991afb5c5c2ee9f42313ad448260405161112c919061465c565b60405180910390a250565b600e6020528060005260406000206000915090505481565b600073f6780c6eCFbF39CE58ac293dC2F00da27c91df4E63b142980a836040518263ffffffff1660e01b81526004016111889190614641565b60206040518083038186803b1580156111a057600080fd5b505af41580156111b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d89190613cc7565b61121a57600c6040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016112119190614504565b60405180910390fd5b60046000838152602001908152602001600020600001549050919050565b6003602052816000526040600020602052806000526040600020600091509150505481565b600260005414156112a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129a906145e1565b60405180910390fd5b600260008190555073f6780c6eCFbF39CE58ac293dC2F00da27c91df4E63b142980a826040518263ffffffff1660e01b81526004016112e29190614641565b60206040518083038186803b1580156112fa57600080fd5b505af415801561130e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113329190613cc7565b61137457600c6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161136b9190614504565b60405180910390fd5b61137e3383612c8a565b91506000600460008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663635f8fc23033856040518463ffffffff1660e01b81526004016114299392919061435c565b600060405180830381600087803b15801561144357600080fd5b505af1158015611457573d6000803e3d6000fd5b505050506000816040015111156114df57806040015183106114a657600081604001818152505082816020015161148e91906147f1565b816020018181525050828160600181815250506114da565b8281604001516114b691906148d2565b816040018181525050826005600101546114d091906147f1565b6005600101819055505b611512565b8281602001516114ef91906147f1565b81602001818152505082816060015161150891906147f1565b8160600181815250505b8060046000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed4ba59d84846040518363ffffffff1660e01b81526004016115b09291906146a0565b60206040518083038186803b1580156115c857600080fd5b505afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116009190613da7565b905060006116178286612c6190919063ffffffff16565b90506000818661162791906147f1565b9050806002600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461168991906147f1565b9250508190555080600d60008282546116a291906147f1565b9250508190555080600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116f891906147f1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe983baebb65a77750c6277cf1d19a6a07b25a472b789a59005944cb59b91425a87848860405161174993929190614738565b60405180910390a25050505060016000819055505050565b600d5481565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600a80546117df90614b1f565b80601f016020809104026020016040519081016040528092919081815260200182805461180b90614b1f565b80156118585780601f1061182d57610100808354040283529160200191611858565b820191906000526020600020905b81548152906001019060200180831161183b57829003601f168201915b505050505081565b6000600260005414156118a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189f906145e1565b60405180910390fd5b60026000819055506118bd3386868686612e4e565b90506001600081905550949350505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60106020528060005260406000206000915090505481565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663055d325430336040518363ffffffff1660e01b81526004016119cb929190614248565b600060405180830381600087803b1580156119e557600080fd5b505af11580156119f9573d6000803e3d6000fd5b505050506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611a5a919061422d565b60206040518083038186803b158015611a7257600080fd5b505afa158015611a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaa9190613da7565b905060008290507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831415611add578190505b60056000015481600560010154611af491906148d2565b1015611b385760176040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611b2f9190614504565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401611b95929190614439565b600060405180830381600087803b158015611baf57600080fd5b505af1158015611bc3573d6000803e3d6000fd5b50505050611c16303383600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612971909392919063ffffffff16565b8060056001016000828254611c2b91906148d2565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f2326675290def598d0fd820ee11f06c58c01b80230ab369044cf0b17dbfdc57f84604051611c78919061465c565b60405180910390a2505050565b600f5481565b60026000541415611cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc8906145e1565b60405180910390fd5b6002600081905550611ce63385858585613182565b600160008190555050505050565b611cfd826107db565b611d0e81611d096129fa565b612a02565b611d188383612b7f565b505050565b60026000541415611d63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5a906145e1565b60405180910390fd5b6002600081905550600073f6780c6eCFbF39CE58ac293dC2F00da27c91df4E63b142980a836040518263ffffffff1660e01b8152600401611da49190614641565b60206040518083038186803b158015611dbc57600080fd5b505af4158015611dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df49190613cc7565b611e3657600c6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611e2d9190614504565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663806a9f808360026040518363ffffffff1660e01b8152600401611e94929190614677565b60006040518083038186803b158015611eac57600080fd5b505afa158015611ec0573d6000803e3d6000fd5b505050506000600460008481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050838160000151611f1e91906147f1565b8160000181815250508060600151841115612030576000600560000154600560010154611f4b91906148d2565b905080826060015186611f5e91906148d2565b1115611fa25760176040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611f999190614504565b60405180910390fd5b816060015185600560000154611fb891906147f1565b611fc291906148d2565b6005600001819055508160600151858360400151611fe091906147f1565b611fea91906148d2565b826040018181525050816060015185836020015161200891906147f1565b61201291906148d2565b8260200181815250506000826060018181525050600192505061204a565b83816060015161204091906148d2565b8160600181815250505b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b949d9c85846005876040518563ffffffff1660e01b81526004016120ae94939291906146c9565b60206040518083038186803b1580156120c657600080fd5b505afa1580156120da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fe9190613da7565b905060006121158287612c6190919063ffffffff16565b90506000818761212591906147f1565b9050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ac8f7443033848a6040518563ffffffff1660e01b815260040161218894939291906143f4565b600060405180830381600087803b1580156121a257600080fd5b505af11580156121b6573d6000803e3d6000fd5b505050508184600001516121ca91906147f1565b8460000181815250508360046000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050506000828861222091906147f1565b9050806003600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461228291906147f1565b9250508190555080600f600082825461229b91906147f1565b9250508190555080601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122f191906147f1565b9250508190555061234730338a600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612971909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fee72e8c8b6eca9a0d0d7e3769f539ba283595748fe87a842d8d64d5d825173a889858a60405161239193929190614738565b60405180910390a250505050505060016000819055505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b6123e6816123e16129fa565b612a02565b816007819055505050565b600081148061248a575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401612438929190614248565b60206040518083038186803b15801561245057600080fd5b505afa158015612464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124889190613da7565b145b6124c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c090614601565b60405180910390fd5b61254a8363095ea7b360e01b84846040516024016124e8929190614439565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613481565b505050565b606061255e8484600085613548565b90509392505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000808314156126195760096040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016126109190614504565b60405180910390fd5b6126238584612c8a565b925060006126318584610cc1565b9150508084111561267a5760186040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016126719190614504565b60405180910390fd5b60006003600085815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008282876126de9190614878565b6126e89190614847565b9050600081876126f891906148d2565b9050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fa467c4826040518263ffffffff1660e01b8152600401612755919061465c565b600060405180830381600087803b15801561276f57600080fd5b505af1158015612783573d6000803e3d6000fd5b50505050818361279391906148d2565b6003600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460008881526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050828160000181815161284391906148d2565b9150818152505080600460008981526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505082600f600082825461289b91906148d2565b9250508190555082601060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128f191906148d2565b925050819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f29c098a0b2f51718bfec23f9b7f06f8d3a257d44b55f33fb0ccf606e7104820c84868b60405161295993929190614738565b60405180910390a38795505050505050949350505050565b6129f4846323b872dd60e01b8585856040516024016129929392919061435c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613481565b50505050565b600033905090565b612a0c8282611767565b612a9b57612a318173ffffffffffffffffffffffffffffffffffffffff16601461365c565b612a3f8360001c602061365c565b604051602001612a509291906141f3565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a92919061451f565b60405180910390fd5b5050565b612aa98282611767565b612b7b57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612b206129fa565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612b898282611767565b15612c5d5760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612c026129fa565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000670de0b6b3a76400008284612c789190614878565b612c829190614847565b905092915050565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612ce8919061422d565b60206040518083038186803b158015612d0057600080fd5b505afa158015612d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d389190613da7565b9050612d89843085600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612971909392919063ffffffff16565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612de6919061422d565b60206040518083038186803b158015612dfe57600080fd5b505afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190613da7565b90508181612e4491906148d2565b9250505092915050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c7c0ae83085898989886040518763ffffffff1660e01b8152600401612eb5969594939291906142fb565b60006040518083038186803b158015612ecd57600080fd5b505afa158015612ee1573d6000803e3d6000fd5b50505050612ef1868686856125d1565b93506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635efadbd13086886040518463ffffffff1660e01b8152600401612f549392919061435c565b60206040518083038186803b158015612f6c57600080fd5b505afa158015612f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa49190613da7565b905060008473ffffffffffffffffffffffffffffffffffffffff166355a1ac2e88866040518363ffffffff1660e01b8152600401612fe3929190614439565b604080518083038186803b158015612ffa57600080fd5b505afa15801561300e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130329190613e48565b5090508181101561307b57600a6040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016130729190614504565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156130c1576130bc3089898588613182565b613133565b8473ffffffffffffffffffffffffffffffffffffffff1663d2c6d0dc898985886040518563ffffffff1660e01b815260040161310094939291906143f4565b600060405180830381600087803b15801561311a57600080fd5b505af115801561312e573d6000803e3d6000fd5b505050505b7f9e76a01ba2e51393f58ccc22c0afc9520815e0cc3f301f7b5d7442fcaee9fdc188888888868960405161316c96959493929190614393565b60405180910390a1859250505095945050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eafe967b308787876040518563ffffffff1660e01b81526004016131e394939291906142b6565b60006040518083038186803b1580156131fb57600080fd5b505afa15801561320f573d6000803e3d6000fd5b50505050600061322a60075484612c6190919063ffffffff16565b90506000818461323a91906148d2565b9050836002600085815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461329c91906148d2565b92505081905550600060046000858152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905084816020018181516132ff91906148d2565b9150818152505080600460008681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505084600d600082825461335791906148d2565b9250508190555084600e60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133ad91906148d2565b925050819055506134018783600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166139569092919063ffffffff16565b7f3a9ce1fec5ebf7e61a4965c55f20ec0a88e791282568d736a19d878223d10d908787878760405161343694939291906143f4565b60405180910390a17f77c97459a115e74ba5adced182b076766b1b9825e785d85b5f0f06d444bef211308460405161346f929190614439565b60405180910390a15050505050505050565b60006134e3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661254f9092919063ffffffff16565b905060008151111561354357808060200190518101906135039190613cc7565b613542576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613539906145c1565b60405180910390fd5b5b505050565b60608247101561358d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161358490614561565b60405180910390fd5b613596856139dc565b6135d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135cc90614581565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516135fe91906141dc565b60006040518083038185875af1925050503d806000811461363b576040519150601f19603f3d011682016040523d82523d6000602084013e613640565b606091505b50915091506136508282866139ef565b92505050949350505050565b60606000600283600261366f9190614878565b61367991906147f1565b67ffffffffffffffff8111156136b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156136ea5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613748577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106137d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026138129190614878565b61381c91906147f1565b90505b6001811115613908577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613884577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106138c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061390190614af5565b905061381f565b506000841461394c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161394390614541565b60405180910390fd5b8091505092915050565b6139d78363a9059cbb60e01b8484604051602401613975929190614439565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613481565b505050565b600080823b905060008111915050919050565b606083156139ff57829050613a4f565b600083511115613a125782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a46919061451f565b60405180910390fd5b9392505050565b600081359050613a6581614e9f565b92915050565b600081359050613a7a81614eb6565b92915050565b600081519050613a8f81614ecd565b92915050565b600081359050613aa481614ee4565b92915050565b600081359050613ab981614efb565b92915050565b600081359050613ace81614f12565b92915050565b600081359050613ae381614f29565b92915050565b600081519050613af881614f29565b92915050565b600060208284031215613b1057600080fd5b6000613b1e84828501613a56565b91505092915050565b600080600060608486031215613b3c57600080fd5b6000613b4a86828701613a6b565b9350506020613b5b86828701613ad4565b9250506040613b6c86828701613ad4565b9150509250925092565b60008060008060808587031215613b8c57600080fd5b6000613b9a87828801613a56565b9450506020613bab87828801613a56565b9350506040613bbc87828801613ad4565b9250506060613bcd87828801613ad4565b91505092959194509250565b60008060408385031215613bec57600080fd5b6000613bfa85828601613a56565b9250506020613c0b85828601613ad4565b9150509250929050565b60008060008060808587031215613c2b57600080fd5b6000613c3987828801613a56565b9450506020613c4a87828801613ad4565b9350506040613c5b87828801613abf565b9250506060613c6c87828801613ad4565b91505092959194509250565b600080600060608486031215613c8d57600080fd5b6000613c9b86828701613a56565b9350506020613cac86828701613ad4565b9250506040613cbd86828701613ad4565b9150509250925092565b600060208284031215613cd957600080fd5b6000613ce784828501613a80565b91505092915050565b600060208284031215613d0257600080fd5b6000613d1084828501613a95565b91505092915050565b60008060408385031215613d2c57600080fd5b6000613d3a85828601613a95565b9250506020613d4b85828601613a56565b9150509250929050565b600060208284031215613d6757600080fd5b6000613d7584828501613aaa565b91505092915050565b600060208284031215613d9057600080fd5b6000613d9e84828501613ad4565b91505092915050565b600060208284031215613db957600080fd5b6000613dc784828501613ae9565b91505092915050565b60008060408385031215613de357600080fd5b6000613df185828601613ad4565b9250506020613e0285828601613a56565b9150509250929050565b60008060408385031215613e1f57600080fd5b6000613e2d85828601613ad4565b9250506020613e3e85828601613ad4565b9150509250929050565b60008060408385031215613e5b57600080fd5b6000613e6985828601613ae9565b9250506020613e7a85828601613ae9565b9150509250929050565b613e8d816149d8565b82525050565b613e9c81614910565b82525050565b613eab81614934565b82525050565b613eba81614940565b82525050565b6000613ecb826147b4565b613ed581856147ca565b9350613ee5818560208601614ac2565b80840191505092915050565b613efa816149ea565b82525050565b613f0981614a0e565b82525050565b613f1881614a32565b82525050565b613f2781614a56565b82525050565b613f3681614a7a565b82525050565b613f4581614a8c565b82525050565b6000613f56826147bf565b613f6081856147d5565b9350613f70818560208601614ac2565b613f7981614c27565b840191505092915050565b6000613f8f826147bf565b613f9981856147e6565b9350613fa9818560208601614ac2565b80840191505092915050565b6000613fc26020836147d5565b9150613fcd82614c45565b602082019050919050565b6000613fe56026836147d5565b9150613ff082614c6e565b604082019050919050565b6000614008601d836147d5565b915061401382614cbd565b602082019050919050565b600061402b6014836147d5565b915061403682614ce6565b602082019050919050565b600061404e6017836147e6565b915061405982614d0f565b601782019050919050565b6000614071602a836147d5565b915061407c82614d38565b604082019050919050565b6000614094601f836147d5565b915061409f82614d87565b602082019050919050565b60006140b76036836147d5565b91506140c282614db0565b604082019050919050565b60006140da6011836147e6565b91506140e582614dff565b601182019050919050565b60006140fd602f836147d5565b915061410882614e28565b604082019050919050565b60808201600082015161412960008501826141af565b50602082015161413c60208501826141af565b50604082015161414f60408501826141af565b50606082015161416260608501826141af565b50505050565b60408201600080830154905061417d81614b51565b61418a60008601826141af565b506001830154905061419b81614b51565b6141a860208601826141af565b5050505050565b6141b8816149ce565b82525050565b6141c7816149ce565b82525050565b6141d6816149ce565b82525050565b60006141e88284613ec0565b915081905092915050565b60006141fe82614041565b915061420a8285613f84565b9150614215826140cd565b91506142218284613f84565b91508190509392505050565b60006020820190506142426000830184613e93565b92915050565b600060408201905061425d6000830185613e93565b61426a6020830184613e93565b9392505050565b60006080820190506142866000830187613e93565b6142936020830186613e84565b6142a060408301856141be565b6142ad60608301846141be565b95945050505050565b60006080820190506142cb6000830187613e93565b6142d86020830186613e93565b6142e56040830185613e93565b6142f26060830184613e93565b95945050505050565b600060c0820190506143106000830189613e93565b61431d6020830188613e93565b61432a6040830187613e93565b6143376060830186613e93565b61434460808301856141be565b61435160a08301846141be565b979650505050505050565b60006060820190506143716000830186613e93565b61437e6020830185613e93565b61438b60408301846141be565b949350505050565b600060c0820190506143a86000830189613e93565b6143b56020830188613e93565b6143c260408301876141be565b6143cf6060830186613e93565b6143dc60808301856141be565b6143e960a08301846141be565b979650505050505050565b60006080820190506144096000830187613e93565b6144166020830186613e93565b61442360408301856141be565b61443060608301846141be565b95945050505050565b600060408201905061444e6000830185613e93565b61445b60208301846141be565b9392505050565b60006020820190506144776000830184613ea2565b92915050565b60006020820190506144926000830184613eb1565b92915050565b60006020820190506144ad6000830184613ef1565b92915050565b60006020820190506144c86000830184613f00565b92915050565b60006020820190506144e36000830184613f0f565b92915050565b60006020820190506144fe6000830184613f1e565b92915050565b60006020820190506145196000830184613f2d565b92915050565b600060208201905081810360008301526145398184613f4b565b905092915050565b6000602082019050818103600083015261455a81613fb5565b9050919050565b6000602082019050818103600083015261457a81613fd8565b9050919050565b6000602082019050818103600083015261459a81613ffb565b9050919050565b600060208201905081810360008301526145ba8161401e565b9050919050565b600060208201905081810360008301526145da81614064565b9050919050565b600060208201905081810360008301526145fa81614087565b9050919050565b6000602082019050818103600083015261461a816140aa565b9050919050565b6000602082019050818103600083015261463a816140f0565b9050919050565b600060208201905061465660008301846141cd565b92915050565b600060208201905061467160008301846141be565b92915050565b600060408201905061468c60008301856141be565b6146996020830184613f3c565b9392505050565b600060a0820190506146b560008301856141be565b6146c26020830184614113565b9392505050565b6000610100820190506146df60008301876141be565b6146ec6020830186614113565b6146f960a0830185614168565b61470660e0830184613ea2565b95945050505050565b600060408201905061472460008301856141be565b61473160208301846141be565b9392505050565b600060608201905061474d60008301866141be565b61475a60208301856141be565b61476760408301846141be565b949350505050565b600060808201905061478460008301876141be565b61479160208301866141be565b61479e60408301856141be565b6147ab60608301846141be565b95945050505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006147fc826149ce565b9150614807836149ce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561483c5761483b614b6b565b5b828201905092915050565b6000614852826149ce565b915061485d836149ce565b92508261486d5761486c614b9a565b5b828204905092915050565b6000614883826149ce565b915061488e836149ce565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156148c7576148c6614b6b565b5b828202905092915050565b60006148dd826149ce565b91506148e8836149ce565b9250828210156148fb576148fa614b6b565b5b828203905092915050565b6000819050919050565b600061491b826149ae565b9050919050565b600061492d826149ae565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061498182614910565b9050919050565b600081905061499682614e77565b919050565b60008190506149a982614e8b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006149e382614a9e565b9050919050565b60006149f5826149fc565b9050919050565b6000614a07826149ae565b9050919050565b6000614a1982614a20565b9050919050565b6000614a2b826149ae565b9050919050565b6000614a3d82614a44565b9050919050565b6000614a4f826149ae565b9050919050565b6000614a6182614a68565b9050919050565b6000614a73826149ae565b9050919050565b6000614a8582614988565b9050919050565b6000614a978261499b565b9050919050565b6000614aa982614ab0565b9050919050565b6000614abb826149ae565b9050919050565b60005b83811015614ae0578082015181840152602081019050614ac5565b83811115614aef576000848401525b50505050565b6000614b00826149ce565b91506000821415614b1457614b13614b6b565b5b600182039050919050565b60006002820490506001821680614b3757607f821691505b60208210811415614b4b57614b4a614bf8565b5b50919050565b6000614b64614b5f83614c38565b614906565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f4e6f7420656e6f756768206c6971756964697479000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601a8110614e8857614e87614bc9565b5b50565b60048110614e9c57614e9b614bc9565b5b50565b614ea881614910565b8114614eb357600080fd5b50565b614ebf81614922565b8114614eca57600080fd5b50565b614ed681614934565b8114614ee157600080fd5b50565b614eed81614940565b8114614ef857600080fd5b50565b614f048161494a565b8114614f0f57600080fd5b50565b614f1b81614976565b8114614f2657600080fd5b50565b614f32816149ce565b8114614f3d57600080fd5b5056fea2646970667358221220d5ed9dd46f082d89ed00835e62bcf6266706f623cab3ab99b2fc7cd4ed214c5364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80638988b9b81161010f578063b72ddee9116100a2578063d547741f11610071578063d547741f146105f8578063dea9e87914610614578063f3fdb15a14610630578063fef0bec81461064e576101f0565b8063b72ddee914610584578063b7f394c0146105a2578063c0107f81146105be578063d2c6d0dc146105dc576101f0565b8063953d9cf1116100de578063953d9cf1146104e5578063a217fddf14610503578063a29cb7e114610521578063a3456a1014610554576101f0565b80638988b9b81461044957806391d148541461046757806391f3e472146104975780639457be23146104b5576101f0565b80634b728f89116101875780636c296b00116101565780636c296b001461039d57806375e1d781146103cd578063821993ec146103fd578063887463ab1461042d576101f0565b80634b728f89146103135780634bf2ee391461033257806355a1ac2e146103505780636135600f14610381576101f0565b80632f2ff15d116101c35780632f2ff15d1461028d57806336568abe146102a95780633ec045a6146102c557806345227d5f146102e3576101f0565b806301ffc9a7146101f55780630bda514e14610225578063248a9ca31461024157806327f1a88414610271575b600080fd5b61020f600480360381019061020a9190613d55565b61066a565b60405161021c9190614462565b60405180910390f35b61023f600480360381019061023a9190613c78565b6106e4565b005b61025b60048036038101906102569190613cf0565b6107db565b604051610268919061447d565b60405180910390f35b61028b60048036038101906102869190613b27565b6107fb565b005b6102a760048036038101906102a29190613d19565b610b92565b005b6102c360048036038101906102be9190613d19565b610bbb565b005b6102cd610c3e565b6040516102da9190614498565b60405180910390f35b6102fd60048036038101906102f89190613dd0565b610c64565b60405161030a919061465c565b60405180910390f35b61031b610c89565b60405161032992919061470f565b60405180910390f35b61033a610c9b565b60405161034791906144b3565b60405180910390f35b61036a60048036038101906103659190613bd9565b610cc1565b60405161037892919061470f565b60405180910390f35b61039b60048036038101906103969190613d7e565b610fa0565b005b6103b760048036038101906103b29190613afe565b611137565b6040516103c4919061465c565b60405180910390f35b6103e760048036038101906103e29190613d7e565b61114f565b6040516103f4919061465c565b60405180910390f35b61041760048036038101906104129190613dd0565b611238565b604051610424919061465c565b60405180910390f35b61044760048036038101906104429190613e0c565b61125d565b005b610451611761565b60405161045e919061465c565b60405180910390f35b610481600480360381019061047c9190613d19565b611767565b60405161048e9190614462565b60405180910390f35b61049f6117d2565b6040516104ac919061451f565b60405180910390f35b6104cf60048036038101906104ca9190613c15565b611860565b6040516104dc919061465c565b60405180910390f35b6104ed6118cf565b6040516104fa91906144ce565b60405180910390f35b61050b6118f5565b604051610518919061447d565b60405180910390f35b61053b60048036038101906105369190613d7e565b6118fc565b60405161054b949392919061476f565b60405180910390f35b61056e60048036038101906105699190613afe565b61192c565b60405161057b919061465c565b60405180910390f35b61058c611944565b6040516105999190614498565b60405180910390f35b6105bc60048036038101906105b79190613d7e565b61196e565b005b6105c6611c85565b6040516105d3919061465c565b60405180910390f35b6105f660048036038101906105f19190613b76565b611c8b565b005b610612600480360381019061060d9190613d19565b611cf4565b005b61062e60048036038101906106299190613e0c565b611d1d565b005b6106386123ab565b60405161064591906144e9565b60405180910390f35b61066860048036038101906106639190613d7e565b6123d1565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106dd57506106dc82612567565b5b9050919050565b6002600054141561072a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610721906145e1565b60405180910390fd5b6002600081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663924f6ced30856040518363ffffffff1660e01b815260040161078f929190614248565b600060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505050506107cd338483856125d1565b506001600081905550505050565b600060016000838152602001908152602001600020600101549050919050565b60026000541415610841576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610838906145e1565b60405180910390fd5b600260008190555060008214156108905760136040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016108879190614504565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e23a98308585856040518563ffffffff1660e01b81526004016108f19493929190614271565b600060405180830381600087803b15801561090b57600080fd5b505af115801561091f573d6000803e3d6000fd5b50505050816002600083815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461098391906148d2565b9250508190555081600d600082825461099c91906148d2565b9250508190555081600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109f291906148d2565b9250508190555081600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a55919061422d565b60206040518083038186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa59190613da7565b1015610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add906145a1565b60405180910390fd5b610b35308484600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612971909392919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167fac44b7cd8d864cbf99c4acc9c9787f54f5a4ac089349fecf3de4ce2ddff7b7bb8383604051610b7d92919061470f565b60405180910390a26001600081905550505050565b610b9b826107db565b610bac81610ba76129fa565b612a02565b610bb68383612a9f565b505050565b610bc36129fa565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2790614621565b60405180910390fd5b610c3a8282612b7f565b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052816000526040600020602052806000526040600020600091509150505481565b60058060000154908060010154905082565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073__$90f1fa1b3f91137ac60e95891d324fdd69$__63b142980a846040518263ffffffff1660e01b8152600401610cfb9190614641565b60206040518083038186803b158015610d1357600080fd5b505af4158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190613cc7565b610d8d57600c6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610d849190614504565b60405180910390fd5b60006003600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600073__$90f1fa1b3f91137ac60e95891d324fdd69$__6328845ff0866040518263ffffffff1660e01b8152600401610e1b9190614641565b60206040518083038186803b158015610e3357600080fd5b505af4158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190613da7565b90506000811115610f4157610f33600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6b7494f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ee157600080fd5b505afa158015610ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f199190613da7565b82610f249190614878565b83612c6190919063ffffffff16565b82610f3e91906147f1565b91505b6002600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054829350935050509250929050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328bc83c130336040518363ffffffff1660e01b8152600401610ffd929190614248565b600060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b505050506110393382612c8a565b9050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401611098929190614439565b600060405180830381600087803b1580156110b257600080fd5b505af11580156110c6573d6000803e3d6000fd5b5050505080600560010160008282546110df91906147f1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fd5656bd5348ef71585f018f0e1310274a6c223cc991afb5c5c2ee9f42313ad448260405161112c919061465c565b60405180910390a250565b600e6020528060005260406000206000915090505481565b600073__$90f1fa1b3f91137ac60e95891d324fdd69$__63b142980a836040518263ffffffff1660e01b81526004016111889190614641565b60206040518083038186803b1580156111a057600080fd5b505af41580156111b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d89190613cc7565b61121a57600c6040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016112119190614504565b60405180910390fd5b60046000838152602001908152602001600020600001549050919050565b6003602052816000526040600020602052806000526040600020600091509150505481565b600260005414156112a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129a906145e1565b60405180910390fd5b600260008190555073__$90f1fa1b3f91137ac60e95891d324fdd69$__63b142980a826040518263ffffffff1660e01b81526004016112e29190614641565b60206040518083038186803b1580156112fa57600080fd5b505af415801561130e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113329190613cc7565b61137457600c6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161136b9190614504565b60405180910390fd5b61137e3383612c8a565b91506000600460008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663635f8fc23033856040518463ffffffff1660e01b81526004016114299392919061435c565b600060405180830381600087803b15801561144357600080fd5b505af1158015611457573d6000803e3d6000fd5b505050506000816040015111156114df57806040015183106114a657600081604001818152505082816020015161148e91906147f1565b816020018181525050828160600181815250506114da565b8281604001516114b691906148d2565b816040018181525050826005600101546114d091906147f1565b6005600101819055505b611512565b8281602001516114ef91906147f1565b81602001818152505082816060015161150891906147f1565b8160600181815250505b8060046000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed4ba59d84846040518363ffffffff1660e01b81526004016115b09291906146a0565b60206040518083038186803b1580156115c857600080fd5b505afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116009190613da7565b905060006116178286612c6190919063ffffffff16565b90506000818661162791906147f1565b9050806002600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461168991906147f1565b9250508190555080600d60008282546116a291906147f1565b9250508190555080600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116f891906147f1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe983baebb65a77750c6277cf1d19a6a07b25a472b789a59005944cb59b91425a87848860405161174993929190614738565b60405180910390a25050505060016000819055505050565b600d5481565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600a80546117df90614b1f565b80601f016020809104026020016040519081016040528092919081815260200182805461180b90614b1f565b80156118585780601f1061182d57610100808354040283529160200191611858565b820191906000526020600020905b81548152906001019060200180831161183b57829003601f168201915b505050505081565b6000600260005414156118a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189f906145e1565b60405180910390fd5b60026000819055506118bd3386868686612e4e565b90506001600081905550949350505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60106020528060005260406000206000915090505481565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663055d325430336040518363ffffffff1660e01b81526004016119cb929190614248565b600060405180830381600087803b1580156119e557600080fd5b505af11580156119f9573d6000803e3d6000fd5b505050506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611a5a919061422d565b60206040518083038186803b158015611a7257600080fd5b505afa158015611a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaa9190613da7565b905060008290507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831415611add578190505b60056000015481600560010154611af491906148d2565b1015611b385760176040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611b2f9190614504565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401611b95929190614439565b600060405180830381600087803b158015611baf57600080fd5b505af1158015611bc3573d6000803e3d6000fd5b50505050611c16303383600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612971909392919063ffffffff16565b8060056001016000828254611c2b91906148d2565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f2326675290def598d0fd820ee11f06c58c01b80230ab369044cf0b17dbfdc57f84604051611c78919061465c565b60405180910390a2505050565b600f5481565b60026000541415611cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc8906145e1565b60405180910390fd5b6002600081905550611ce63385858585613182565b600160008190555050505050565b611cfd826107db565b611d0e81611d096129fa565b612a02565b611d188383612b7f565b505050565b60026000541415611d63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5a906145e1565b60405180910390fd5b6002600081905550600073__$90f1fa1b3f91137ac60e95891d324fdd69$__63b142980a836040518263ffffffff1660e01b8152600401611da49190614641565b60206040518083038186803b158015611dbc57600080fd5b505af4158015611dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df49190613cc7565b611e3657600c6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611e2d9190614504565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663806a9f808360026040518363ffffffff1660e01b8152600401611e94929190614677565b60006040518083038186803b158015611eac57600080fd5b505afa158015611ec0573d6000803e3d6000fd5b505050506000600460008481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050838160000151611f1e91906147f1565b8160000181815250508060600151841115612030576000600560000154600560010154611f4b91906148d2565b905080826060015186611f5e91906148d2565b1115611fa25760176040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611f999190614504565b60405180910390fd5b816060015185600560000154611fb891906147f1565b611fc291906148d2565b6005600001819055508160600151858360400151611fe091906147f1565b611fea91906148d2565b826040018181525050816060015185836020015161200891906147f1565b61201291906148d2565b8260200181815250506000826060018181525050600192505061204a565b83816060015161204091906148d2565b8160600181815250505b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b949d9c85846005876040518563ffffffff1660e01b81526004016120ae94939291906146c9565b60206040518083038186803b1580156120c657600080fd5b505afa1580156120da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fe9190613da7565b905060006121158287612c6190919063ffffffff16565b90506000818761212591906147f1565b9050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ac8f7443033848a6040518563ffffffff1660e01b815260040161218894939291906143f4565b600060405180830381600087803b1580156121a257600080fd5b505af11580156121b6573d6000803e3d6000fd5b505050508184600001516121ca91906147f1565b8460000181815250508360046000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050506000828861222091906147f1565b9050806003600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461228291906147f1565b9250508190555080600f600082825461229b91906147f1565b9250508190555080601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122f191906147f1565b9250508190555061234730338a600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612971909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fee72e8c8b6eca9a0d0d7e3769f539ba283595748fe87a842d8d64d5d825173a889858a60405161239193929190614738565b60405180910390a250505050505060016000819055505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b6123e6816123e16129fa565b612a02565b816007819055505050565b600081148061248a575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401612438929190614248565b60206040518083038186803b15801561245057600080fd5b505afa158015612464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124889190613da7565b145b6124c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c090614601565b60405180910390fd5b61254a8363095ea7b360e01b84846040516024016124e8929190614439565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613481565b505050565b606061255e8484600085613548565b90509392505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000808314156126195760096040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016126109190614504565b60405180910390fd5b6126238584612c8a565b925060006126318584610cc1565b9150508084111561267a5760186040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016126719190614504565b60405180910390fd5b60006003600085815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008282876126de9190614878565b6126e89190614847565b9050600081876126f891906148d2565b9050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fa467c4826040518263ffffffff1660e01b8152600401612755919061465c565b600060405180830381600087803b15801561276f57600080fd5b505af1158015612783573d6000803e3d6000fd5b50505050818361279391906148d2565b6003600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460008881526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050828160000181815161284391906148d2565b9150818152505080600460008981526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505082600f600082825461289b91906148d2565b9250508190555082601060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128f191906148d2565b925050819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f29c098a0b2f51718bfec23f9b7f06f8d3a257d44b55f33fb0ccf606e7104820c84868b60405161295993929190614738565b60405180910390a38795505050505050949350505050565b6129f4846323b872dd60e01b8585856040516024016129929392919061435c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613481565b50505050565b600033905090565b612a0c8282611767565b612a9b57612a318173ffffffffffffffffffffffffffffffffffffffff16601461365c565b612a3f8360001c602061365c565b604051602001612a509291906141f3565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a92919061451f565b60405180910390fd5b5050565b612aa98282611767565b612b7b57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612b206129fa565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612b898282611767565b15612c5d5760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612c026129fa565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000670de0b6b3a76400008284612c789190614878565b612c829190614847565b905092915050565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612ce8919061422d565b60206040518083038186803b158015612d0057600080fd5b505afa158015612d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d389190613da7565b9050612d89843085600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612971909392919063ffffffff16565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612de6919061422d565b60206040518083038186803b158015612dfe57600080fd5b505afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190613da7565b90508181612e4491906148d2565b9250505092915050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c7c0ae83085898989886040518763ffffffff1660e01b8152600401612eb5969594939291906142fb565b60006040518083038186803b158015612ecd57600080fd5b505afa158015612ee1573d6000803e3d6000fd5b50505050612ef1868686856125d1565b93506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635efadbd13086886040518463ffffffff1660e01b8152600401612f549392919061435c565b60206040518083038186803b158015612f6c57600080fd5b505afa158015612f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa49190613da7565b905060008473ffffffffffffffffffffffffffffffffffffffff166355a1ac2e88866040518363ffffffff1660e01b8152600401612fe3929190614439565b604080518083038186803b158015612ffa57600080fd5b505afa15801561300e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130329190613e48565b5090508181101561307b57600a6040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016130729190614504565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156130c1576130bc3089898588613182565b613133565b8473ffffffffffffffffffffffffffffffffffffffff1663d2c6d0dc898985886040518563ffffffff1660e01b815260040161310094939291906143f4565b600060405180830381600087803b15801561311a57600080fd5b505af115801561312e573d6000803e3d6000fd5b505050505b7f9e76a01ba2e51393f58ccc22c0afc9520815e0cc3f301f7b5d7442fcaee9fdc188888888868960405161316c96959493929190614393565b60405180910390a1859250505095945050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eafe967b308787876040518563ffffffff1660e01b81526004016131e394939291906142b6565b60006040518083038186803b1580156131fb57600080fd5b505afa15801561320f573d6000803e3d6000fd5b50505050600061322a60075484612c6190919063ffffffff16565b90506000818461323a91906148d2565b9050836002600085815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461329c91906148d2565b92505081905550600060046000858152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905084816020018181516132ff91906148d2565b9150818152505080600460008681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505084600d600082825461335791906148d2565b9250508190555084600e60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133ad91906148d2565b925050819055506134018783600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166139569092919063ffffffff16565b7f3a9ce1fec5ebf7e61a4965c55f20ec0a88e791282568d736a19d878223d10d908787878760405161343694939291906143f4565b60405180910390a17f77c97459a115e74ba5adced182b076766b1b9825e785d85b5f0f06d444bef211308460405161346f929190614439565b60405180910390a15050505050505050565b60006134e3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661254f9092919063ffffffff16565b905060008151111561354357808060200190518101906135039190613cc7565b613542576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613539906145c1565b60405180910390fd5b5b505050565b60608247101561358d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161358490614561565b60405180910390fd5b613596856139dc565b6135d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135cc90614581565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516135fe91906141dc565b60006040518083038185875af1925050503d806000811461363b576040519150601f19603f3d011682016040523d82523d6000602084013e613640565b606091505b50915091506136508282866139ef565b92505050949350505050565b60606000600283600261366f9190614878565b61367991906147f1565b67ffffffffffffffff8111156136b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156136ea5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613748577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106137d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026138129190614878565b61381c91906147f1565b90505b6001811115613908577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613884577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106138c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061390190614af5565b905061381f565b506000841461394c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161394390614541565b60405180910390fd5b8091505092915050565b6139d78363a9059cbb60e01b8484604051602401613975929190614439565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613481565b505050565b600080823b905060008111915050919050565b606083156139ff57829050613a4f565b600083511115613a125782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a46919061451f565b60405180910390fd5b9392505050565b600081359050613a6581614e9f565b92915050565b600081359050613a7a81614eb6565b92915050565b600081519050613a8f81614ecd565b92915050565b600081359050613aa481614ee4565b92915050565b600081359050613ab981614efb565b92915050565b600081359050613ace81614f12565b92915050565b600081359050613ae381614f29565b92915050565b600081519050613af881614f29565b92915050565b600060208284031215613b1057600080fd5b6000613b1e84828501613a56565b91505092915050565b600080600060608486031215613b3c57600080fd5b6000613b4a86828701613a6b565b9350506020613b5b86828701613ad4565b9250506040613b6c86828701613ad4565b9150509250925092565b60008060008060808587031215613b8c57600080fd5b6000613b9a87828801613a56565b9450506020613bab87828801613a56565b9350506040613bbc87828801613ad4565b9250506060613bcd87828801613ad4565b91505092959194509250565b60008060408385031215613bec57600080fd5b6000613bfa85828601613a56565b9250506020613c0b85828601613ad4565b9150509250929050565b60008060008060808587031215613c2b57600080fd5b6000613c3987828801613a56565b9450506020613c4a87828801613ad4565b9350506040613c5b87828801613abf565b9250506060613c6c87828801613ad4565b91505092959194509250565b600080600060608486031215613c8d57600080fd5b6000613c9b86828701613a56565b9350506020613cac86828701613ad4565b9250506040613cbd86828701613ad4565b9150509250925092565b600060208284031215613cd957600080fd5b6000613ce784828501613a80565b91505092915050565b600060208284031215613d0257600080fd5b6000613d1084828501613a95565b91505092915050565b60008060408385031215613d2c57600080fd5b6000613d3a85828601613a95565b9250506020613d4b85828601613a56565b9150509250929050565b600060208284031215613d6757600080fd5b6000613d7584828501613aaa565b91505092915050565b600060208284031215613d9057600080fd5b6000613d9e84828501613ad4565b91505092915050565b600060208284031215613db957600080fd5b6000613dc784828501613ae9565b91505092915050565b60008060408385031215613de357600080fd5b6000613df185828601613ad4565b9250506020613e0285828601613a56565b9150509250929050565b60008060408385031215613e1f57600080fd5b6000613e2d85828601613ad4565b9250506020613e3e85828601613ad4565b9150509250929050565b60008060408385031215613e5b57600080fd5b6000613e6985828601613ae9565b9250506020613e7a85828601613ae9565b9150509250929050565b613e8d816149d8565b82525050565b613e9c81614910565b82525050565b613eab81614934565b82525050565b613eba81614940565b82525050565b6000613ecb826147b4565b613ed581856147ca565b9350613ee5818560208601614ac2565b80840191505092915050565b613efa816149ea565b82525050565b613f0981614a0e565b82525050565b613f1881614a32565b82525050565b613f2781614a56565b82525050565b613f3681614a7a565b82525050565b613f4581614a8c565b82525050565b6000613f56826147bf565b613f6081856147d5565b9350613f70818560208601614ac2565b613f7981614c27565b840191505092915050565b6000613f8f826147bf565b613f9981856147e6565b9350613fa9818560208601614ac2565b80840191505092915050565b6000613fc26020836147d5565b9150613fcd82614c45565b602082019050919050565b6000613fe56026836147d5565b9150613ff082614c6e565b604082019050919050565b6000614008601d836147d5565b915061401382614cbd565b602082019050919050565b600061402b6014836147d5565b915061403682614ce6565b602082019050919050565b600061404e6017836147e6565b915061405982614d0f565b601782019050919050565b6000614071602a836147d5565b915061407c82614d38565b604082019050919050565b6000614094601f836147d5565b915061409f82614d87565b602082019050919050565b60006140b76036836147d5565b91506140c282614db0565b604082019050919050565b60006140da6011836147e6565b91506140e582614dff565b601182019050919050565b60006140fd602f836147d5565b915061410882614e28565b604082019050919050565b60808201600082015161412960008501826141af565b50602082015161413c60208501826141af565b50604082015161414f60408501826141af565b50606082015161416260608501826141af565b50505050565b60408201600080830154905061417d81614b51565b61418a60008601826141af565b506001830154905061419b81614b51565b6141a860208601826141af565b5050505050565b6141b8816149ce565b82525050565b6141c7816149ce565b82525050565b6141d6816149ce565b82525050565b60006141e88284613ec0565b915081905092915050565b60006141fe82614041565b915061420a8285613f84565b9150614215826140cd565b91506142218284613f84565b91508190509392505050565b60006020820190506142426000830184613e93565b92915050565b600060408201905061425d6000830185613e93565b61426a6020830184613e93565b9392505050565b60006080820190506142866000830187613e93565b6142936020830186613e84565b6142a060408301856141be565b6142ad60608301846141be565b95945050505050565b60006080820190506142cb6000830187613e93565b6142d86020830186613e93565b6142e56040830185613e93565b6142f26060830184613e93565b95945050505050565b600060c0820190506143106000830189613e93565b61431d6020830188613e93565b61432a6040830187613e93565b6143376060830186613e93565b61434460808301856141be565b61435160a08301846141be565b979650505050505050565b60006060820190506143716000830186613e93565b61437e6020830185613e93565b61438b60408301846141be565b949350505050565b600060c0820190506143a86000830189613e93565b6143b56020830188613e93565b6143c260408301876141be565b6143cf6060830186613e93565b6143dc60808301856141be565b6143e960a08301846141be565b979650505050505050565b60006080820190506144096000830187613e93565b6144166020830186613e93565b61442360408301856141be565b61443060608301846141be565b95945050505050565b600060408201905061444e6000830185613e93565b61445b60208301846141be565b9392505050565b60006020820190506144776000830184613ea2565b92915050565b60006020820190506144926000830184613eb1565b92915050565b60006020820190506144ad6000830184613ef1565b92915050565b60006020820190506144c86000830184613f00565b92915050565b60006020820190506144e36000830184613f0f565b92915050565b60006020820190506144fe6000830184613f1e565b92915050565b60006020820190506145196000830184613f2d565b92915050565b600060208201905081810360008301526145398184613f4b565b905092915050565b6000602082019050818103600083015261455a81613fb5565b9050919050565b6000602082019050818103600083015261457a81613fd8565b9050919050565b6000602082019050818103600083015261459a81613ffb565b9050919050565b600060208201905081810360008301526145ba8161401e565b9050919050565b600060208201905081810360008301526145da81614064565b9050919050565b600060208201905081810360008301526145fa81614087565b9050919050565b6000602082019050818103600083015261461a816140aa565b9050919050565b6000602082019050818103600083015261463a816140f0565b9050919050565b600060208201905061465660008301846141cd565b92915050565b600060208201905061467160008301846141be565b92915050565b600060408201905061468c60008301856141be565b6146996020830184613f3c565b9392505050565b600060a0820190506146b560008301856141be565b6146c26020830184614113565b9392505050565b6000610100820190506146df60008301876141be565b6146ec6020830186614113565b6146f960a0830185614168565b61470660e0830184613ea2565b95945050505050565b600060408201905061472460008301856141be565b61473160208301846141be565b9392505050565b600060608201905061474d60008301866141be565b61475a60208301856141be565b61476760408301846141be565b949350505050565b600060808201905061478460008301876141be565b61479160208301866141be565b61479e60408301856141be565b6147ab60608301846141be565b95945050505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006147fc826149ce565b9150614807836149ce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561483c5761483b614b6b565b5b828201905092915050565b6000614852826149ce565b915061485d836149ce565b92508261486d5761486c614b9a565b5b828204905092915050565b6000614883826149ce565b915061488e836149ce565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156148c7576148c6614b6b565b5b828202905092915050565b60006148dd826149ce565b91506148e8836149ce565b9250828210156148fb576148fa614b6b565b5b828203905092915050565b6000819050919050565b600061491b826149ae565b9050919050565b600061492d826149ae565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061498182614910565b9050919050565b600081905061499682614e77565b919050565b60008190506149a982614e8b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006149e382614a9e565b9050919050565b60006149f5826149fc565b9050919050565b6000614a07826149ae565b9050919050565b6000614a1982614a20565b9050919050565b6000614a2b826149ae565b9050919050565b6000614a3d82614a44565b9050919050565b6000614a4f826149ae565b9050919050565b6000614a6182614a68565b9050919050565b6000614a73826149ae565b9050919050565b6000614a8582614988565b9050919050565b6000614a978261499b565b9050919050565b6000614aa982614ab0565b9050919050565b6000614abb826149ae565b9050919050565b60005b83811015614ae0578082015181840152602081019050614ac5565b83811115614aef576000848401525b50505050565b6000614b00826149ce565b91506000821415614b1457614b13614b6b565b5b600182039050919050565b60006002820490506001821680614b3757607f821691505b60208210811415614b4b57614b4a614bf8565b5b50919050565b6000614b64614b5f83614c38565b614906565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f4e6f7420656e6f756768206c6971756964697479000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601a8110614e8857614e87614bc9565b5b50565b60048110614e9c57614e9b614bc9565b5b50565b614ea881614910565b8114614eb357600080fd5b50565b614ebf81614922565b8114614eca57600080fd5b50565b614ed681614934565b8114614ee157600080fd5b50565b614eed81614940565b8114614ef857600080fd5b50565b614f048161494a565b8114614f0f57600080fd5b50565b614f1b81614976565b8114614f2657600080fd5b50565b614f32816149ce565b8114614f3d57600080fd5b5056fea2646970667358221220d5ed9dd46f082d89ed00835e62bcf6266706f623cab3ab99b2fc7cd4ed214c5364736f6c63430008040033",
  "libraries": {
    "TSUtils": "0xf6780c6eCFbF39CE58ac293dC2F00da27c91df4E"
  },
  "devdoc": {
    "events": {
      "AddReserves(address,uint256)": {
        "params": {
          "addAmount": "amount added as reserves as part of the liquidation event",
          "benefactor": "address added a certain amount to its reserves"
        }
      },
      "BorrowFromMaturityPool(address,uint256,uint256,uint256)": {
        "params": {
          "amount": "of the asset that it was borrowed",
          "commission": "is the amount extra that it will need to be paid at                   maturity",
          "maturityDate": "dateID/poolID/maturity in which the user will have                     to repay the loan",
          "to": "address which borrowed the asset"
        }
      },
      "DepositToMaturityPool(address,uint256,uint256,uint256)": {
        "params": {
          "amount": "of the asset that it was deposited",
          "commission": "is the amount extra that it will be collected at maturity",
          "from": "address which deposited the asset",
          "maturityDate": "dateID/poolID/maturity in which the user will be able                     to collect his deposit + his commission"
        }
      },
      "DepositToSmartPool(address,uint256)": {
        "params": {
          "amount": "amount added to the smart pool",
          "user": "address that added a certain amount to the smart pool"
        }
      },
      "LiquidateBorrow(address,address,uint256,address,uint256,uint256)": {
        "params": {
          "borrower": "address which had the original debt",
          "fixedLenderCollateral": "address of the asset that it was seized                              by the liquidator",
          "liquidator": "address which repaid the previously borrowed amount",
          "maturityDate": "poolID where the borrower had an uncollaterized position",
          "repayAmount": "amount of the asset that it was repaid",
          "seizedAmount": "amount seized of the collateral"
        }
      },
      "RepayToMaturityPool(address,address,uint256,uint256,uint256)": {
        "params": {
          "borrower": "address which had the original debt",
          "debtCovered": "amount of the debt that it was covered in this repayment",
          "maturityDate": "poolID where the user repaid its borrowed amounts",
          "payer": "address which repaid the previously borrowed amount",
          "penalty": "amount paid for penalties"
        }
      },
      "SeizeAsset(address,address,uint256,uint256)": {
        "params": {
          "borrower": "address which had the original debt",
          "liquidator": "address which seized this collateral",
          "maturityDate": "poolID where the borrower lost the amount of collateral",
          "seizedAmount": "amount seized of the collateral"
        }
      },
      "WithdrawFromMaturityPool(address,uint256,uint256)": {
        "params": {
          "amount": "of the asset that it was deposited",
          "from": "address which will be collecting the asset",
          "maturityDate": "poolID where the user collected its deposits"
        }
      },
      "WithdrawFromSmartPool(address,uint256)": {
        "params": {
          "amount": "amount withdrawn to the smart pool",
          "user": "address that withdrew a certain amount from the smart pool"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "borrowFromMaturityPool(uint256,uint256)": {
        "details": "Lends to a wallet for a certain maturity date/pool",
        "params": {
          "amount": "amount to send to the msg.sender",
          "maturityDate": "maturity date for repayment"
        }
      },
      "depositToMaturityPool(uint256,uint256)": {
        "details": "Deposits a certain amount to the protocol for      a certain maturity date/pool",
        "params": {
          "amount": "amount to receive from the msg.sender",
          "maturityDate": "maturity date / pool ID"
        }
      },
      "depositToSmartPool(uint256)": {
        "details": "Deposits an `amount` of underlying asset into the smart pool, receiving in return overlying eTokens. - E.g. User deposits 100 USDC and gets in return 100 eUSDC",
        "params": {
          "amount": "The amount to be deposited"
        }
      },
      "getAccountSnapshot(address,uint256)": {
        "details": "Gets current snapshot for a wallet in a certain maturity",
        "params": {
          "maturityDate": "maturity date",
          "who": "wallet to return status snapshot in the specified maturity date"
        }
      },
      "getAuditor()": {
        "details": "Gets the auditor contract interface being used to validate positions"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTotalMpBorrows(uint256)": {
        "details": "Gets the total amount of borrowed money for a maturityDate",
        "params": {
          "maturityDate": "maturity date"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidate(address,uint256,address,uint256)": {
        "details": "Msg.sender liquidates a borrower's position and repays a certain amount of collateral      for a maturity date, seizing a part of borrower's collateral",
        "params": {
          "borrower": "wallet that has an outstanding debt for a certain maturity date",
          "fixedLenderCollateral": "address of fixedLender from which the collateral will be seized to give the liquidator",
          "maturityDate": "maturity date for which the position will be liquidated",
          "repayAmount": "amount to be repaid by liquidator(msg.sender)"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "repayToMaturityPool(address,uint256,uint256)": {
        "details": "The pool that the user is trying to repay to should be matured",
        "params": {
          "borrower": "The address of the account that has the debt",
          "maturityDate": "The matured date where the debt is located",
          "repayAmount": "amount to be paid for the borrower's debt"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "seize(address,address,uint256,uint256)": {
        "details": "Public function for liquidator to seize borrowers tokens in a certain maturity date.      This function will only be called from another FixedLender, on `liquidation` calls.      That's why msg.sender needs to be passed to the private function (to be validated as a market)",
        "params": {
          "borrower": "address from which the tokens will be seized",
          "liquidator": "address which will receive the seized tokens",
          "maturityDate": "maturity date from where the tokens will be removed. Used to remove liquidity.",
          "seizeAmount": "amount to be removed from borrower's posession"
        }
      },
      "setLiquidationFee(uint256)": {
        "details": "Sets the protocol's liquidation fee for the underlying asset of this fixedLender",
        "params": {
          "_liquidationFee": "fee that the protocol earns when position is liquidated"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawFromMaturityPool(address,uint256,uint256)": {
        "details": "The pool that the user is trying to retrieve the money should be matured",
        "params": {
          "maturityDate": "The matured date for which we're trying to retrieve the funds",
          "redeemAmount": "The number of underlying tokens to receive",
          "redeemer": "The address of the account which is redeeming the tokens"
        }
      },
      "withdrawFromSmartPool(uint256)": {
        "details": "Withdraws an `amount` of underlying asset from the smart pool, burning the equivalent eTokens owned - E.g. User has 100 eUSDC, calls withdraw() and receives 100 USDC, burning the 100 eUSDC",
        "params": {
          "amount": "The underlying amount to be withdrawn - Send the value type(uint256).max in order to withdraw the whole eToken balance"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddReserves(address,uint256)": {
        "notice": "Event emitted reserves have been added to the protocol"
      },
      "BorrowFromMaturityPool(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a user borrows amount of an asset from a         certain maturity date"
      },
      "DepositToMaturityPool(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a user deposits an amount of an asset to a         certain maturity date collecting a commission at the end of the         period"
      },
      "DepositToSmartPool(address,uint256)": {
        "notice": "Event emitted when a user contributed to the smart pool"
      },
      "LiquidateBorrow(address,address,uint256,address,uint256,uint256)": {
        "notice": "Event emitted when a user's position had a liquidation"
      },
      "RepayToMaturityPool(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a user repays its borrows after maturity"
      },
      "SeizeAsset(address,address,uint256,uint256)": {
        "notice": "Event emitted when a user's collateral has been seized"
      },
      "WithdrawFromMaturityPool(address,uint256,uint256)": {
        "notice": "Event emitted when a user collects its deposits after maturity"
      },
      "WithdrawFromSmartPool(address,uint256)": {
        "notice": "Event emitted when a user contributed to the smart pool"
      }
    },
    "kind": "user",
    "methods": {
      "liquidate(address,uint256,address,uint256)": {
        "notice": "Function to liquidate an uncollaterized position"
      },
      "repayToMaturityPool(address,uint256,uint256)": {
        "notice": "Sender repays an amount of borrower's debt for a maturity date"
      },
      "seize(address,address,uint256,uint256)": {
        "notice": "Public function to seize a certain amount of tokens"
      },
      "withdrawFromMaturityPool(address,uint256,uint256)": {
        "notice": "User collects a certain amount of underlying asset after having         supplied tokens until a certain maturity date"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 390,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 6135,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "mpUserSuppliedAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6141,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "mpUserBorrowedAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6146,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "maturityPools",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(MaturityPool)11577_storage)"
      },
      {
        "astId": 6149,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "smartPool",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(SmartPool)11582_storage"
      },
      {
        "astId": 6152,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "liquidationFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6156,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "trustedUnderlying",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)1043"
      },
      {
        "astId": 6160,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "eToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IEToken)9236"
      },
      {
        "astId": 6163,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "underlyingTokenName",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 6166,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "auditor",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IAuditor)9173"
      },
      {
        "astId": 6169,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "interestRateModel",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IInterestRateModel)9408"
      },
      {
        "astId": 6172,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "totalMpDeposits",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6177,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "totalMpDepositsUser",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6180,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "totalMpBorrows",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6185,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "totalMpBorrowsUser",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAuditor)9173": {
        "encoding": "inplace",
        "label": "contract IAuditor",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1043": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEToken)9236": {
        "encoding": "inplace",
        "label": "contract IEToken",
        "numberOfBytes": "20"
      },
      "t_contract(IInterestRateModel)9408": {
        "encoding": "inplace",
        "label": "contract IInterestRateModel",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(MaturityPool)11577_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PoolLib.MaturityPool)",
        "numberOfBytes": "32",
        "value": "t_struct(MaturityPool)11577_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MaturityPool)11577_storage": {
        "encoding": "inplace",
        "label": "struct PoolLib.MaturityPool",
        "members": [
          {
            "astId": 11570,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "borrowed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11572,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "supplied",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11574,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11576,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "available",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SmartPool)11582_storage": {
        "encoding": "inplace",
        "label": "struct PoolLib.SmartPool",
        "members": [
          {
            "astId": 11579,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "borrowed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11581,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "supplied",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
